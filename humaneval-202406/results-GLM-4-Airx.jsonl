{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Example usage:\n# print(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Should return False\n# print(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Should return True"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    start = 0\n    balance = 0\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n\n        # When balance is zero, we have found a complete group\n        if balance == 0:\n            groups.append(paren_string[start:i+1])\n            start = i+1\n\n    return groups\n\n# Example usage:\n# print(separate_paren_groups('( ) (( )) (( )( ))'))  # ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Example usage:\n# print(truncate_number(3.5))  # Should output: 0.5"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Example usage:\n# print(below_zero([1, 2, 3]))  # Should return False\n# print(below_zero([1, 2, -4, 5]))  # Should return True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # First, calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    # Then, calculate the sum of the absolute differences from the mean\n    mad_sum = sum(abs(x - mean) for x in numbers)\n    # Finally, calculate the mean of these differences\n    mad = mad_sum / len(numbers)\n    return mad\n\n# Example usage:\n# print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Should output 1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, number in enumerate(numbers):\n        result.append(number)\n        if i < len(numbers) - 1:  # Check if it's not the last element\n            result.append(delimiter)\n    return result\n\n# Example usage:\n# Should print [1, 4, 2, 4, 3]\nprint(intersperse([1, 2, 3], 4))"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    groups = paren_string.split()\n    for group in groups:\n        depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                depth = max(depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(depth)\n    return max_depths\n\n# Example usage:\n# print(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output should be [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n# Example usage:\n# print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Output should be ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate over each number in the list\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_rolling = [numbers[0]]\n    for num in numbers[1:]:\n        max_rolling.append(max(max_rolling[-1], num))\n    return max_rolling\n\n# Example usage:\n# print(rolling_max([1, 2, 3, 2, 3, 4, 2]))"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    for i in range(len(string)):\n        # Check if the substring from the current index to the end is a palindrome\n        if is_palindrome(string[i:]):\n            # If it is, then append the reverse of the prefix before the palindrome\n            return string + string[:i][::-1]\n    # If no palindrome is found, return the original string (it's already the shortest palindrome)\n    return string"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    # Ensure that both strings are of equal length for XOR operation\n    if len(a) != len(b):\n        raise ValueError(\"Both strings must be of the same length.\")\n    \n    # Perform XOR operation and construct the result string\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    \n    return result\n\n# Example usage:\n# print(string_xor('010', '110'))  # Output should be '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda s: (len(s), strings.index(s)))\n\n# Example usage:\n# print(longest([]))  # Should return None\n# print(longest(['a', 'b', 'c']))  # Should return 'a'\n# print(longest(['a', 'bb', 'ccc']))  # Should return 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n# Example usage:\n# print(greatest_common_divisor(3, 5))  # Output should be 1\n# print(greatest_common_divisor(25, 15))  # Output should be 5"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n# Example usage:\n# prefixes = all_prefixes('abc')\n# print(prefixes)  # Output should be ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lower case to make the operation case-insensitive\n    # and then use a set to keep track of unique characters.\n    return len(set(string.lower()))\n\n# Example usage:\n# print(count_distinct_characters('xyzXYZ'))  # Should output 3\n# print(count_distinct_characters('Jerry'))   # Should output 4"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Define the mapping between note symbols and their beat counts\n    note_beats = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Split the string by spaces to get individual notes\n    notes = music_string.split()\n\n    # Map each note to its corresponding beat count\n    beats = [note_beats[note] for note in notes]\n\n    return beats\n\n# Example usage:\n# parse_music('o o| .| o| o| .| .| .| .| o o') should return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    sub_len = len(substring)\n    for i in range(len(string) - sub_len + 1):\n        if string[i:i+sub_len] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    int_to_numberals = {v: k for k, v in numberals_to_int.items()}\n\n    # Convert the space-separated string of numberals to a list of integers\n    numberals_list = numbers.split()\n    numberals_list.sort(key=lambda x: numberals_to_int[x])\n\n    # Convert the sorted integers back to their corresponding string representations\n    sorted_numbers = ' '.join([int_to_numberals[int_val] for int_val in numberals_list])\n\n    return sorted_numbers"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    \n    return closest_pair\n\n# Example usage:\n# print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n# print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n# Example usage:\n# print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n# Example usage:\n# print(filter_integers(['a', 3.14, 5]))  # Output: [5]\n# print(filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    largest_div = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_div = i\n    return largest_div\n\n# Example usage:\n# print(largest_divisor(15))  # Should return 5"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n# Example usage:\n# print(flip_case('Hello'))  # Output should be 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    # Filter the list of strings and return only those that start with the specified prefix\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))       # False\nprint(is_prime(101))     # True\nprint(is_prime(11))      # True\nprint(is_prime(13441))   # True\nprint(is_prime(61))      # True\nprint(is_prime(4))       # False\nprint(is_prime(1))       # False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    # Define the search range and tolerance\n    lower_bound = -10\n    upper_bound = 10\n    tolerance = 1e-7\n    \n    # Check if the polynomial has a zero within the range\n    f_lower = poly(xs, lower_bound)\n    f_upper = poly(xs, upper_bound)\n    \n    if f_lower * f_upper >= 0:\n        raise ValueError(\"Function has same sign at the bounds; no zero in the given range.\")\n    \n    # Use binary search to find a zero\n    while (upper_bound - lower_bound) > tolerance:\n        midpoint = (lower_bound + upper_bound) / 2\n        f_midpoint = poly(xs, midpoint)\n        \n        if abs(f_midpoint) <= tolerance:\n            return midpoint\n        elif f_lower * f_midpoint < 0:\n            upper_bound = midpoint\n        else:\n            lower_bound = midpoint\n    \n    # If we reach here, we have found a sufficiently accurate zero\n    return (lower_bound + upper_bound) / 2\n\n# Example usage:\n# >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n# -0.5\n# >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n# 1.0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = [l[i] for i in third_indices]\n    third_values.sort()\n\n    sorted_l = l.copy()\n    for i, value in zip(third_indices, third_values):\n        sorted_l[i] = value\n\n    return sorted_l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    # Check if list is empty to avoid ValueError\n    if not l:\n        return None  # Or raise an exception, depending on desired behavior\n\n    # Initialize the maximum element with the first element of the list\n    max_elem = l[0]\n\n    # Iterate over the list to find the maximum element\n    for num in l:\n        if num > max_elem:\n            max_elem = num\n\n    return max_elem\n\n# Example usage:\n# print(max_element([1, 2, 3]))  # Should return 3\n# print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Should return 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Example usage:\n# print(fizz_buzz(50))  # Output: 0\n# print(fizz_buzz(78))  # Output: 2\n# print(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    \n    result = l[:]\n    result[::2] = even_indices\n    return result"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b\n\n# Example usage:\n# print(prime_fib(1))  # Output: 2\n# print(prime_fib(2))  # Output: 3\n# print(prime_fib(3))  # Output: 5\n# print(prime_fib(4))  # Output: 13\n# print(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # Check for all combinations of three different elements\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Given that all cars move at the same speed and the road is infinitely long,\n    # each car from the left-to-right set will eventually meet each car from the\n    # right-to-left set. Since the cars are spread out and each pair will only\n    # collide once, the total number of collisions will be the number of ways\n    # to choose 2 cars from the n cars coming from each direction, which is a \n    # combination problem and can be solved with the formula for combinations: \n    # C(n, 2) = n! / (2!(n - 2)!)\n    # Simplifying this for our case, we get: n * (n - 1) / 2\n    return n * (n - 1) // 2  # Use integer division since we expect an integer result."}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]\n\n# Example usage:\n# print(incr_list([1, 2, 3]))  # Output should be [2, 3, 4]\n# print(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output should be [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases as provided\nassert pairs_sum_to_zero([1, 3, 5, 0]) == False\nassert pairs_sum_to_zero([1, 3, -2, 1]) == False\nassert pairs_sum_to_zero([1, 2, 3, 7]) == False\nassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\nassert pairs_sum_to_zero([1]) == False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))\n\n# Test cases\nprint(change_base(8, 3))  # Should return '22'\nprint(change_base(8, 2))  # Should return '1000'\nprint(change_base(7, 2))  # Should return '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2\n\n# Example usage:\n# Should print 7.5 when the base is 5 and the height is 3\nprint(triangle_area(5, 3))"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(3, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n# Test cases\nprint(fib4(5))  # Should return 4\nprint(fib4(6))  # Should return 8\nprint(fib4(7))  # Should return 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 0:\n        # If even number of items, return the average of the two middle values\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        # If odd number of items, return the middle value\n        return sorted_list[mid]\n\n# Example usage:\n# print(median([3, 1, 2, 4, 5]))  # Should return 3\n# print(median([-10, 4, 6, 1000, 10, 20]))  # Should return 15.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Remove any non-alphanumeric characters and convert to lowercase for a case-insensitive check\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n\n    # Check if the cleaned text is the same forwards and backwards\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result\n\n# Test cases\nprint(modp(3, 5))       # Should return 3\nprint(modp(1101, 101))  # Should return 2\nprint(modp(0, 101))     # Should return 1\nprint(modp(3, 11))      # Should return 8\nprint(modp(100, 101))   # Should return 1"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases to validate the function\nprint(remove_vowels(''))  # ''\nprint(remove_vowels(\"abcdef\\nghijklm\"))  # 'bcdf\\nghjklm'\nprint(remove_vowels('abcdef'))  # 'bcdf'\nprint(remove_vowels('aaaaa'))  # ''\nprint(remove_vowels('aaBAA'))  # 'B'\nprint(remove_vowels('zbcd'))  # 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)\n\n# Test cases\nprint(below_threshold([1, 2, 4, 10], 100))  # Should print True\nprint(below_threshold([1, 20, 4, 10], 5))   # Should print False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n# You can uncomment the following lines to test the function\n# print(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # Should return True\n# print(same_chars('abcd', 'dddddddabc'))               # Should return True\n# print(same_chars('dddddddabc', 'abcd'))               # Should return True\n# print(same_chars('eabcd', 'dddddddabc'))              # Should return False\n# print(same_chars('abcd', 'dddddddabce'))              # Should return False\n# print(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))   # Should return False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n# Example usage:\n# print(fib(10))  # Should return 55\n# print(fib(1))   # Should return 1\n# print(fib(8))   # Should return 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))       # False\nprint(correct_bracketing(\"<>\"))      # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))    # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    if not l:  # handle empty list edge case\n        return True\n    \n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    \n    return increasing or decreasing\n\n# Examples\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Use set to find common elements and remove duplicates, then sort the result\n    return sorted(set(l1) & set(l2))\n\n# Example usage:\n# Should print [1, 5, 653]\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n# Should print [2, 3]\nprint(common([5, 3, 2, 8], [3, 2]))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    # Start from the largest possible factor which is the square root of n\n    largest_prime = None\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    # Check for odd factors from 3 to sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    # If n is a prime number greater than 2, it's the largest prime factor\n    if n > 2:\n        largest_prime = n\n    return largest_prime\n\n# Example usage:\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))\n\n# Example usage:\n# print(sum_to_n(30))  # Should return 465\n# print(sum_to_n(100)) # Should return 5050"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"(\"))       # False\nprint(correct_bracketing(\"()\"))      # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))    # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # The derivative of a term ax^n is n*ax^(n-1)\n    # So we multiply each coefficient by its corresponding power of x (which is its index + 1)\n    # and then shift the result one position to the left (drop the last element)\n    return [\u7cfb\u6570 * (\u6307\u6570 + 1) for \u6307\u6570, \u7cfb\u6570 in enumerate(xs)][1:]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n# Test cases to validate the function\nprint(fibfib(1))  # Should return 0\nprint(fibfib(5))  # Should return 4\nprint(fibfib(8))  # Should return 24"}
{"task_id": "HumanEval/64", "completion": "FIX = \"\"\"\nAdded additional test cases to ensure the function works correctly.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    # Check if 'y' is at the end of the string and if so, count it as a vowel\n    if s[-1].lower() == 'y':\n        count += 1\n    \n    # Count the vowels in the string\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            \n    return count\n\n# Additional test cases\nassert vowels_count(\"abcde\") == 2, \"Test case 1 failed\"\nassert vowels_count(\"ACEDY\") == 3, \"Test case 2 failed\"\nassert vowels_count(\"hello\") == 2, \"Test case 3 failed\"\nassert vowels_count(\"why\") == 1, \"Test case 4 failed\"\nassert vowels_count(\"\u91d1\u5b57\u5854\") == 0, \"Test case 5 failed\"\nassert vowels_count(\"rhythmy\") == 0, \"Test case 6 failed\"\nassert vowels_count(\"Rhythmy\") == 0, \"Test case 7 failed\"\nassert vowels_count(\"AEIOUY\") == 5, \"Test case 8 failed\"\nassert vowels_count(\"\") == 0, \"Test case 9 failed\"  # Empty string test"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift = shift % num_digits  # To handle shift > number of digits\n\n    if shift == 0:\n        return x_str\n    elif shift > num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n\n# Examples:\nprint(digitSum(\"\"))  # => 0\nprint(digitSum(\"abAB\"))  # => 131\nprint(digitSum(\"abcCd\"))  # => 67\nprint(digitSum(\"helloE\"))  # => 69\nprint(digitSum(\"woArBld\"))  # => 131\nprint(digitSum(\"aAaaaXa\"))  # => 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract numbers from the string using split and list comprehension\n    # The numbers are found before the word 'apples' and 'oranges'\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Subtract the number of apples and oranges from the total number of fruits\n    mangoes = n - sum(numbers)\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    min_even = float('inf')\n    min_index = -1\n    \n    # Iterate over the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even:\n            min_even = value\n            min_index = index\n    \n    # Return the smallest even value and its index in a list, or an empty list if no even value is found\n    return [min_even, min_index] if min_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency = {}\n    for number in lst:\n        frequency[number] = frequency.get(number, 0) + 1\n\n    for number in sorted(frequency.keys(), reverse=True):\n        if frequency[number] >= number:\n            return number\n\n    return -1\n\n# Examples\nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Add min value\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Add max value\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to two decimal points\n        return round(area, 2)\n    else:\n        # If not a valid triangle, return -1\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # The function will compare elements from the start and end of the array\n    # and count how many are different.\n    changes_needed = 0\n    # We use the floor division to compare the elements up to the middle of the array.\n    for i in range(len(arr) // 2):\n        # If the elements are not the same, we increment the change counter.\n        if arr[i] != arr[-i-1]:\n            changes_needed += 1\n    return changes_needed\n\n# Test cases to verify the function\nassert smallest_change([1,2,3,5,4,7,9,6]) == 4\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nassert smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def total_chars(lst):\n        return sum(len(item) for item in lst)\n    \n    if total_chars(lst1) < total_chars(lst2):\n        return lst2\n    return lst1\n\n# Examples\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a):\n        while is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a //= i\n            if len(prime_factors) > 2:  # More than 3 prime factors, can stop early\n                return False\n    return len(prime_factors) == 3 and a > 1  # Check if the last factor is also a prime number\n\n# Examples:\n# is_multiply_prime(30) == True because 30 = 2 * 3 * 5\nprint(is_multiply_prime(30))  # Expected output: True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a >= 0 and round(a ** (1/3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count and return the number of prime hex digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n# Example usage:\n# print(is_happy(\"a\"))      # => False\n# print(is_happy(\"aa\"))     # => False\n# print(is_happy(\"abcd\"))   # => True\n# print(is_happy(\"aabb\"))   # => False\n# print(is_happy(\"adb\"))    # => True\n# print(is_happy(\"xyy\"))    # => False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Should output ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)\n\n# Examples\nprint(prime_length('Hello'))      # Should return True\nprint(prime_length('abcdcba'))    # Should return True\nprint(prime_length('kittens'))    # Should return True\nprint(prime_length('orange'))     # Should return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 2  # The numbers are 1 and 10^1 - 1 = 9, which includes 1 itself.\n    \n    # For numbers with more than one digit, there are 9 possibilities for each\n    # digit (2-9) excluding the first and last which can be 1.\n    # There are n-1 digits excluding the first and last.\n    # There are 10^(n-1) total n-digit numbers.\n    total_numbers = 10 ** (n - 1)\n    numbers_starting_with_1 = total_numbers // 10\n    numbers_ending_with_1 = total_numbers // 10\n\n    # If n > 1, we've counted the numbers that both start and end with 1 twice.\n    # There is exactly 1 such number for each n > 1 (e.g., 100001 for n=6).\n    if n > 1:\n        numbers_starting_with_1_ending_with_1 = 1\n    else:\n        numbers_starting_with_1_ending_with_1 = 0\n\n    # The total count is the sum of numbers starting with 1 and ending with 1,\n    # minus the numbers that are counted twice (start and end with 1).\n    return numbers_starting_with_1 + numbers_ending_with_1 - numbers_starting_with_1_ending_with_1\n\n# Example usage:\n# print(starts_one_ends(3))  # Should return 20, for three-digit numbers"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the integer N to its binary representation and remove the '0b' prefix\n    binary_representation = bin(N)[2:]\n    # Initialize the sum of digits\n    digit_sum = 0\n    # Iterate over each digit in the binary representation and sum them\n    for digit in binary_representation:\n        digit_sum += int(digit)\n    # Convert the sum back to binary and remove the '0b' prefix\n    return bin(digit_sum)[2:]\n\n# Example usage:\n# print(solve(1000))  # Output should be \"1\"\n# print(solve(150))   # Output should be \"110\"\n# print(solve(147))   # Output should be \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Split the string into words keeping spaces\n    words = s.split(' ')\n    # Sort each word individually and join them back with a space\n    ordered_words = [''.join(sorted(word)) for word in words]\n    # Join all the sorted words to form the final string\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # Sort coordinates by row ascending, then by column descending\n    coordinates.sort(key=lambda coordinate: (coordinate[0], -coordinate[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Create a copy of the array to avoid modifying the original\n    sorted_array = array.copy()\n    \n    # Check if the sum of the first and last index is odd or even\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        # Sort in descending order\n        sorted_array.sort(reverse=True)\n    else:\n        # Sort in ascending order\n        sorted_array.sort()\n    \n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    def shift_char(c, shift):\n        if c.isalpha():\n            base = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - base + shift) % 26 + base)\n        else:\n            return c\n\n    shift_amount = 2 * 2\n    return ''.join(shift_char(char, shift_amount) for char in s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    # First, check if the list has at least two distinct elements\n    if len(lst) < 2 or len(set(lst)) < 2:\n        return None\n\n    # Initialize variables to store the smallest and second smallest values\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    # Iterate through the list to find the smallest and second smallest elements\n    for num in lst:\n        if num < smallest:\n            second_smallest, smallest = smallest, num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n    # If second_smallest is still inf, that means there was no second distinct smallest element\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences based on '.', '?', or '!'\n    sentences = []\n    for delimiter in '.?!':\n        S = S.replace(delimiter, ' ')\n    sentences = S.split()\n    \n    # Count the number of sentences starting with 'I'\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith('I') and len(sentence) > 1:\n            boredom_count += 1\n    \n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Ensure all inputs are integers\n    if all(isinstance(num, int) for num in (x, y, z)):\n        # Check if any number is the sum of the other two\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False\n\n# Example usage:\n# print(any_int(5, 2, 7))  # \u279e True\n# print(any_int(3, 2, 2))  # \u279e False\n# print(any_int(3, -2, 1)) # \u279e True\n# print(any_int(3.6, -2.2, 2)) # \u279e False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    shifted_vowels = {vowel: alphabet[alphabet.index(vowel) + 2] for vowel in vowels}\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += shifted_vowels[char]\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(largest_prime))\n\n# Examples\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output should be 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output should be 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output should be 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output should be 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output should be 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output should be 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    is_lower = all(key.islower() for key in dict.keys())\n    is_upper = all(key.isupper() for key in dict.keys())\n    return is_lower or is_upper\n\n# Examples\nprint(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}))  # should return True\nprint(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}))  # should return False\nprint(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}))  # should return False\nprint(check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))  # should return False\nprint(check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}))  # should return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n# Example usage:\n# print(count_up_to(5))  # Output: [2, 3]\n# print(count_up_to(11)) # Output: [2, 3, 5, 7]\n# print(count_up_to(0))  # Output: []\n# print(count_up_to(20)) # Output: [2, 3, 5, 7, 11, 13, 17, 19]\n# print(count_up_to(1))  # Output: []\n# print(count_up_to(18)) # Output: [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):  # Iterate through even indices\n        if s[i] in upper_vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the string to a float\n    num = float(value)\n    # Find the nearest whole number\n    nearest_int = round(num)\n    # Check if the number is equidistant from two integers\n    if abs(num - nearest_int) == 0.5:\n        # If the number is negative, return the nearest more negative integer\n        if num < 0:\n            return int(num) - 1\n        # Otherwise, return the nearest more positive integer\n        else:\n            return int(num) + 1\n    else:\n        # Return the nearest integer if it is not equidistant from two integers\n        return nearest_int"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    current_level = n\n    for i in range(1, n):\n        if current_level % 2 == 0:\n            current_level += 2\n        else:\n            current_level += 2\n        pile.append(current_level)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces to normalize the separators\n    s = s.replace(',', ' ')\n    # Split the string by spaces to get the words\n    words_array = s.split()\n    return words_array"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Ensure x is the smaller number\n    if x > y:\n        x, y = y, x\n\n    # Iterate from y to x (inclusive) to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1\n\n# Example usage:\n# print(choose_num(12, 15))  # Output should be 14\n# print(choose_num(13, 12))  # Output should be -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n    \n    return sorted([num for num in x if not has_even_digit(num)])\n\n# Example usage:\n# print(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\n# print(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter out numbers not between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    # Map numbers to their corresponding names\n    names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    # Replace each number with its name\n    result = [names[num] for num in reversed_arr]\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n\n# Test cases\nassert count_nums([]) == 0\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    # Find the index of the first element in the sorted array in the original array\n    index = arr.index(sorted_arr[0])\n    # Check if the elements from the index to the end of the array are sorted\n    # and the elements from the start to the index-1 are the same as the start of the sorted array\n    return arr[index:] == sorted_arr and arr[:index] == sorted_arr[-index:]"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Count odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    # Count even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to match or exceed the odd numbers in lst1\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Split the string into words\n    letters = test.split()\n    # Create a dictionary to store the letter counts\n    letter_counts = {}\n    # Iterate over each letter and count their occurrences\n    for letter in letters:\n        letter_counts[letter] = letter_counts.get(letter, 0) + 1\n    \n    # Find the maximum occurrence\n    max_count = max(letter_counts.values(), default=0)\n    # Create a dictionary with letters that have the maximum occurrence\n    most_frequent = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return most_frequent"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Create a set of characters to be removed for faster lookup\n    remove_chars = set(c)\n    # Filter out characters in s that are in c\n    filtered_string = ''.join([char for char in s if char not in remove_chars])\n    # Check if the filtered string is a palindrome\n    is_palindrome = filtered_string == filtered_string[::-1]\n    # Return the tuple with the filtered string and the palindrome check result\n    return (filtered_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for item in lst:\n        odd_digits = sum(1 for char in item if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result\n\n# Example usage:\nprint(odd_count(['1234567']))\nprint(odd_count(['3', \"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_units = sum(sum(row) for row in grid)\n    return math.ceil(total_units / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation.\n    For similar number of ones, sorts based on the decimal value.\n\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Example usage:\nprint(sort_array([1, 5, 2, 3, 4]))  # Should print: [1, 2, 3, 4, 5]\nprint(sort_array([1, 0, 2, 3, 4]))  # Should print: [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\n# print(select_words(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\n# print(select_words(\"simple white space\", 2))     # Output: []\n# print(select_words(\"Hello world\", 4))            # Output: [\"world\"]\n# print(select_words(\"Uncle sam\", 3))              # Output: [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    # Start from the second last character and move leftwards\n    for i in range(len(word) - 2, 0, -1):\n        # Check if current character is a vowel and both neighbors are consonants\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\n# Examples\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Concatenate the strings from the list\n    str1, str2 = lst\n    combined = str1 + str2\n\n    # Function to check if a string has balanced parentheses\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Check all possible combinations of concatenation\n    if is_balanced(combined) or is_balanced(str1 + str2[::-1]) or is_balanced(str1[::-1] + str2):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Examples\nprint(match_parens(['()(', ')']))  # Should print 'Yes'\nprint(match_parens([')', ')']))     # Should print 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in descending order and return the first k elements\n    # Then sort those k elements in ascending order before returning\n    return sorted(arr[:k], reverse=True)[:k][::-1]\n\n# Example 1\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\n\n# Example 2\nprint(maximum([4, -4, 4], 2))  # Output: [4, 4]\n\n# Example 3\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n    \n# Example usage:\nprint(solution([5, 8, 7, 1]))  # ==> 12\nprint(solution([3, 3, 3, 3, 3]))  # ==> 9\nprint(solution([30, 13, 24, 321]))  # ==> 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Initialize the sum\n    total = 0\n    \n    # Iterate over the first k elements of the array\n    for i in range(k):\n        # Check if the element has at most two digits\n        if 10 <= arr[i] < 100:\n            total += arr[i]\n    \n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])\n\n# Example usage:\n# print(get_odd_collatz(5))  # Should return [1, 5]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date or len(date.split('-')) != 3:\n        return False\n\n    month, day, year = date.split('-')\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    month, day, year = int(month), int(day), int(year)\n    if not (1 <= month <= 12):\n        return False\n\n    days_in_month = [31, 29 if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    return 1 <= day <= days_in_month[month - 1]\n\n# Examples:\nprint(valid_date('03-11-2000'))  # => True\nprint(valid_date('15-01-2012'))  # => False\nprint(valid_date('04-0-2040'))   # => False\nprint(valid_date('06-04-2020'))  # => True\nprint(valid_date('06/04/2020'))  # => False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # First, check if there are whitespaces\n    if ' ' in txt:\n        return txt.split()\n    # If no whitespaces, check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    # If no whitespaces or commas, count the odd-indexed lowercase letters\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 == 1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    # Check for duplicates and if list is sorted\n    return lst == sorted(lst) and len(lst) == len(set(lst))\n\n# Examples\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Find the intersection of two intervals\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n\n    # Check if there is an intersection\n    if start_max > end_min:\n        return \"NO\"\n    # Calculate the length of the intersection\n    intersection_length = end_min - start_max + 1\n    # Check if the length of the intersection is a prime number\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\n\n# [input/output] samples:\nprint(intersection((1, 2), (2, 3)))  # ==> \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # ==> \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # ==> \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n        \n    return sum_of_magnitudes * product_of_signs"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    min_heap = []\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def get_neighbors(x, y):\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                yield nx, ny\n    \n    def push_to_heap(x, y, path):\n        if len(path) == k:\n            heappush(min_heap, (path, sum(path)))\n        elif len(path) < k:\n            for nx, ny in get_neighbors(x, y):\n                if not visited[nx][ny]:\n                    visited[nx][ny] = True\n                    push_to_heap(nx, ny, path + [grid[nx][ny]])\n                    visited[nx][ny] = False\n    \n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            push_to_heap(i, j, [grid[i][j]])\n            visited[i][j] = False\n    \n    return min_heap[0][0]\n\n# Examples\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    # Initialize the sequence with the first three numbers\n    sequence = [1, 3]\n    \n    # Special case for n=0\n    if n == 0:\n        return [1]\n    \n    # trib(1) is already in the sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            # For even i, calculate tri(i) = 1 + i / 2\n            sequence.append(1 + i / 2)\n        else:\n            # For odd i, calculate tri(i) = tri(i-1) + tri(i-2) + tri(i+1)\n            # Since tri(i+1) is not yet known, we'll calculate it later\n            sequence.append(None)  # Placeholder for tri(i)\n    \n    # Now calculate the odd tribonacci numbers using the already known sequence\n    for i in range(2, n + 1):\n        if i % 2 == 1 and sequence[i] is None:\n            # tri(i) = tri(i-1) + tri(i-2) + tri(i+1)\n            # where tri(i+1) is the next even number in the sequence\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n    \n    return sequence\n\n# Example usage:\nprint(tri(3))  # Output should be [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n    return 0 if not has_odd_digit else product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    # Stack to keep track of opening brackets\n    stack = []\n    # Counter for nested level\n    nested_level = 0\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n            # Increase nested level when an opening bracket is found\n            nested_level += 1\n        elif char == ']':\n            if stack:\n                stack.pop()\n                # Decrease nested level when a closing bracket is found\n                nested_level -= 1\n            else:\n                # Invalid sequence if there's a closing without a matching opening\n                return False\n    \n    # A string is considered nested if there was at least one point where the nested level was greater than 0\n    return nested_level > 0\n\n# Test cases\nassert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][[') == True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # if the string is empty\n        return False\n    # Check if the last character is an alphabet and the character before it is a space\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')\n\n# Example usage:\n# print(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\n# print(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\n# print(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\n# print(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # Start from the second element and iterate through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is smaller than the previous one\n        if arr[i] < arr[i - 1]:\n            # Return the index of the current element\n            return i - 1\n    # If no such element is found, return -1\n    return -1\n\n# Examples\nprint(can_arrange([1,2,4,3,5]))  # Output should be 3\nprint(can_arrange([1,2,3]))      # Output should be -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    # Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate over the list to find the required integers\n    for num in lst:\n        if num < 0:  # Check if the number is negative\n            # Update the largest_negative if it's either not set or the current number is larger\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:  # Check if the number is positive\n            # Update the smallest_positive if it's either not set or the current number is smaller\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    # Return the tuple with the results\n    return (largest_negative, smallest_positive)\n\n# Example usage:\n# largest_smallest_integers([2, 4, 1, 3, 5, 7]) should return (None, 1)\n# largest_smallest_integers([]) should return (None, None)\n# largest_smallest_integers([0]) should return (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Function to handle string representations of numbers with commas\n    def parse_number(s):\n        return float(s.replace(',', '.')) if isinstance(s, str) and ',' in s else s\n\n    # Convert both inputs to a comparable form\n    a parsed = parse_number(a)\n    b parsed = parse_number(b)\n\n    # Check if the parsed values are equal\n    if a parsed == b parsed:\n        return None\n    else:\n        # Return the larger value in its original form\n        return a if a parsed > b parsed else b\n\n# Example usage:\n# print(compare_one(1, 2.5))  #\u279e 2.5\n# print(compare_one(1, \"2,3\"))  #\u279e \"2,3\"\n# print(compare_one(\"5,1\", \"6\"))  #\u279e \"6\"\n# print(compare_one(\"1\", 1))  #\u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    # If n is odd or less than 8, it cannot be written as the sum of 4 even numbers\n    if n % 2 != 0 or n < 8:\n        return False\n    \n    # Subtract the smallest even number (2) four times from n\n    n -= 2 * 4\n    \n    # If the result is non-negative and divisible by 2, it can be written as the sum of 4 even numbers\n    return n >= 0 and n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        factorial_i = 1\n        for j in range(1, i + 1):\n            factorial_i *= j\n        result *= factorial_i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace instances of '__' with '-'\n    text = text.replace('__', '-')\n    \n    # Replace instances of '___' with '-'\n    text = text.replace('___', '-')\n    \n    # Continue this pattern for more consecutive underscores if needed\n    # For example, replacing '____' with '-', and so on.\n    # Here, we use a loop to handle any number of consecutive underscores\n    while '___' in text:\n        text = text.replace('___', '-')\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if the file name starts with a letter\n    if not file_name[0].isalpha():\n        return 'No'\n    \n    # Split the file name into two parts separated by a dot\n    parts = file_name.split('.')\n    \n    # Check if there's exactly one dot and the parts after splitting\n    if len(parts) != 2 or not parts[1]:\n        return 'No'\n    \n    # Check the substring after the dot\n    valid_extensions = ['txt', 'exe', 'dll']\n    if parts[1].lower() not in valid_extensions:\n        return 'No'\n    \n    # Check for more than three digits in the file name\n    digit_count = sum(char.isdigit() for char in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n\n# Examples\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(\n        x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3 != 0 else x\n        for i, x in enumerate(lst)\n    )"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert string representations of fractions to Fraction objects\n    fraction_x = Fraction(x)\n    fraction_n = Fraction(n)\n    \n    # Multiply the fractions\n    result = fraction_x * fraction_n\n    \n    # Check if the result is a whole number (integer)\n    return result.denominator == 1\n\n# Example usage:\nprint(simplify(\"1/5\", \"5/1\"))  # Output: True\nprint(simplify(\"1/6\", \"2/1\"))  # Output: False\nprint(simplify(\"7/10\", \"10/2\"))  # Output: False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n# Example usage:\n# print(order_by_points([1, 11, -1, -11, -12]))  # Output should be [-1, -11, 1, -12, 11]\n# print(order_by_points([]))  # Output should be []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_first_last_odd(n):\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 == 1 and int(str_n[-1]) % 2 == 1\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_first_last_odd(num):\n            count += 1\n    return count\n\n# Examples:\n# print(specialFilter([15, -73, 14, -15]))  # Output: 1\n# print(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Create the array 'a' according to the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize the count of valid triples\n    count = 0\n    \n    # Iterate through all possible triples (i, j, k) with i < j < k\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # Check if the sum of the elements is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    # Return the count of valid triples\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    start_index = planets_order.index(planet1)\n    end_index = planets_order.index(planet2)\n    \n    # Make sure to get the planets between them, regardless of the order they're given\n    start_index, end_index = sorted([start_index, end_index])\n    \n    # Slice the list to get the planets between the two given planets\n    return tuple(planets_order[start_index + 1:end_index])\n\n# Examples:\n# print(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\n# print(bf(\"Earth\", \"Mercury\"))    # ==> (\"Venus\",)\n# print(bf(\"Mercury\", \"Uranus\"))   # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out strings with odd length\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    # Calculate the difference between the squares of the odd integers and even integers\n    odd_squares_sum = sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n    even_squares_sum = sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 0)\n    \n    # Return double the difference\n    return 2 * (odd_squares_sum - even_squares_sum)\n    \n# Example usage:\nprint(double_the_difference([1, 3, 2, 0]))  # Should return 10\nprint(double_the_difference([-1, -2, 0]))   # Should return 0\nprint(double_the_difference([9, -2]))       # Should return 81\nprint(double_the_difference([0]))           # Should return 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n        \n        if strength > max_strength or (strength == max_strength and strongest_extension is None):\n            strongest_extension = extension\n            max_strength = strength\n\n    return f'{class_name}.{strongest_extension}'\n\n# Example usage:\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output should be 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return b in a or any(b[i:] + b[:i] in a for i in range(len(b)))\n\n# Test cases to validate the function\nassert cycpattern_check(\"abcd\", \"abd\") == False\nassert cycpattern_check(\"hello\", \"ell\") == True\nassert cycpattern_check(\"whassup\", \"psus\") == False\nassert cycpattern_check(\"abab\", \"baa\") == True\nassert cycpattern_check(\"efef\", \"eeff\") == False\nassert cycpattern_check(\"himenss\", \"simen\") == True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num)  # Handle negative numbers by taking the absolute value\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_pairs = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_number = ''\n    for value, symbol in roman_pairs:\n        while number >= value:\n            roman_number += symbol\n            number -= value\n    return roman_number\n\n# Examples:\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # First, sort the sides so that the largest is last\n    sides = sorted([a, b, c])\n    \n    # The hypotenuse is the largest side in a right triangle\n    # Check if the sum of squares of the smaller sides equals the square of the largest side (hypotenuse)\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))  # Count of unique characters\n        # Check if this word has more unique characters or if it's equal but lexicographically smaller\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n            \n    return max_word\n\n# Example usage:\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the total number of carrots eaten after trying to satisfy the need\n    total_eaten = number + min(need, remaining)\n    # Calculate the number of carrots left after satisfying the need\n    left = remaining - min(need, remaining)\n    return [total_eaten, left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for operator, operand in zip(operators, operands[1:]):\n        expression += f' {operator} {operand}'\n    return eval(expression)\n\n# Example usage:\n# operators = ['+', '*', '-']\n# operands = [2, 3, 4, 5]\n# result = do_algebra(operators, operands)\n# print(result)  # Output should be 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Initialize an empty list to store the transformed characters\n    transformed_chars = []\n    \n    # Check if the string contains any alphabetic characters\n    contains_letters = any(c.isalpha() for c in s)\n    \n    # Iterate through each character in the string\n    for c in s:\n        # If the character is a letter, reverse its case\n        if c.isalpha():\n            transformed_chars.append(c.swapcase())\n        else:\n            # If not a letter, add the character as it is\n            transformed_chars.append(c)\n    \n    # If the string contains no letters, reverse the entire string\n    if not contains_letters:\n        transformed_chars.reverse()\n    \n    # Join the list of characters into a string and return it\n    return ''.join(transformed_chars)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Ensure we iterate from the smaller to the larger number\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Initialize an empty list to store the even digits\n    even_digits = []\n    \n    # Loop through the range from start to end inclusive\n    for num in range(start, end + 1):\n        # Convert the current number to a string to iterate over digits\n        for digit in str(num):\n            # Check if the digit is an even number\n            if int(digit) % 2 == 0:\n                # Add the even digit to the list, avoiding duplicates\n                if digit not in even_digits:\n                    even_digits.append(int(digit))\n    \n    # Sort the list of even digits in ascending order\n    even_digits.sort()\n    \n    return even_digits"}
