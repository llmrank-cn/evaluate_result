{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    current_group = ''\n    is_in_parentheses = False\n\n    for char in paren_string:\n        if char == '(':\n            is_in_parentheses = True\n        elif char == ')':\n            is_in_parentheses = False\n            result.append(current_group)\n            current_group = ''\n        elif not is_in_parentheses:\n            current_group += char\n\n    # Add the final group\n    result.append(current_group)\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "    numbers = sorted(numbers)\n    mean = sum(numbers) / len(numbers)\n    deviation_sum = sum(abs(num - mean) for num in numbers)\n    return deviation_sum / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i!= len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    result = []\n    stack = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            count = 1\n            while stack and stack[-1] == '(':\n                count += 1\n                stack.pop()\n            if stack:\n                result.append(count)\n            else:\n                return []\n    return result"}
{"task_id": "HumanEval/7", "completion": "    result = [s for s in strings if substring in s]\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n\n    product = 1\n    sum_ = 0\n\n    for number in numbers:\n        product *= number\n        sum_ += number\n\n    return sum_, product"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = numbers[0]\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return ''\n\n    longest_palindrome = ''\n    for i in range(len(string)):\n        postfix = string[i:]\n        prefix = string[:i]\n        if postfix == postfix[::-1] and len(postfix) > len(longest_palindrome):\n            longest_palindrome = postfix\n\n    return longest_palindrome + longest_palindrome[::-1]"}
{"task_id": "HumanEval/11", "completion": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = len(max(strings, key=len))\n    longest_string = [s for s in strings if len(s) == max_length][0]\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    while b!= 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    length = len(string)\n    for i in range(length):\n        prefixes.append(string[:i + 1])\n    return prefixes[::-1]"}
{"task_id": "HumanEval/15", "completion": "    return \" \".join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    string = string.lower()\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    notes = []\n    current_note = ''\n    current_count = 0\n    for i in range(len(music_string)):\n        if music_string[i] in 'o|.':\n            if current_note:\n                notes.append(current_count)\n            current_note = music_string[i]\n            current_count = 1\n        else:\n            current_count += 1\n    if current_note:\n        notes.append(current_count)\n    return notes"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    while string.find(substring)!= -1:\n        count += 1\n        string = string[string.find(substring) + len(substring):]\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    diff = numbers[1] - numbers[0]\n    min_val = numbers[0]\n    max_val = numbers[1]\n    for i in range(2, len(numbers)):\n        cur_diff = abs(numbers[i] - numbers[i-1])\n        if cur_diff < diff:\n            diff = cur_diff\n            min_val = numbers[i-1]\n            max_val = numbers[i]\n    return min_val, max_val"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    def is_divisible(n: int, divisor: int) -> bool:\n        \"\"\" Determine if a number n is evenly divisible by another number, divisor\n        >>> is_divisible(15, 5)\n        True\n        >>> is_divisible(15, 3)\n        True\n        >>> is_divisible(15, 10)\n        False\n        \"\"\"\n        return n % divisor == 0\n\n    max_divisor = 1\n    while is_divisible(n, max_divisor):\n        max_divisor += 1\n    return max_divisor - 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        ascii_code = ord(char)\n        if ascii_code >= 97 and ascii_code <= 122:  # 97 - 122 is the range of ascii values for lowercase letters\n            result += chr(ascii_code - 32)\n        elif ascii_code >= 65 and ascii_code <= 90:  # 65 - 90 is the range of ascii values for uppercase letters\n            result += chr(ascii_code + 32)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be an even-length list\")\n    n = len(xs) // 2\n    def newton(f, df, x0, tol=1e-9):\n        x1 = x0 - f(x0) / df(x0)\n        while abs(x1 - x0) > tol:\n            x0 = x1\n            x1 = x0 - f(x0) / df(x0)\n        return x1\n\n    def f(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs[n:])])\n\n    def df(x):\n        return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs[n:])])\n    return newton(f, df, 1)"}
{"task_id": "HumanEval/33", "completion": "    l_copy = l.copy()\n    third_indices = [i for i, x in enumerate(l) if i % 3 == 0]\n    l_copy[third_indices] = sorted(l[third_indices])\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    def check_divisible(x):\n        return x % 11 == 0 or x % 13 == 0\n\n    count = 0\n    for num in range(1, n):\n        if str(num).count('7') > 0 and check_divisible(num):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l_even = l[0::2]\n    l_even.sort()\n    return list(map(lambda x: x if x % 2!= 0 else l_even[l_even.index(x)], l))"}
{"task_id": "HumanEval/38", "completion": "    # remove every third character\n    # from the beginning of the string\n    s = s[3::3]\n    # split string on groups of 3 characters.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # if the number of characters in the groups\n    # is not divisible by 3, then we need to delete the first character of the last group\n    if len(s) % 3!= 0:\n        groups[-1] = groups[-1][1:]\n    # join the groups again.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib_seq = [1, 1]\n    while fib_seq[-1] < n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    fib_num = fib_seq[-1]\n    is_prime = True\n    i = 2\n    while i * i <= fib_num:\n        if fib_num % i == 0:\n            is_prime = False\n            break\n        i += 1\n    return fib_num if is_prime else None"}
{"task_id": "HumanEval/40", "completion": "    counter = {}\n    for num in l:\n        if num in counter:\n            counter[num] += 1\n        else:\n            counter[num] = 1\n    for num in counter:\n        if counter[num] >= 3:\n            zero_sum = sum([num, -num, 0]) in l\n            if zero_sum:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    # If n = 1, then there are no two cars moving in opposite directions, so there are no collisions.\n    if n < 2: return 0\n\n    # Initialize a variable to keep track of the number of collisions.\n    collisions = 0\n\n    # Iterate through each car from 2 to n.\n    for car in range(2, n + 1):\n        # Calculate the distance between the car and the car in the opposite direction.\n        distance = car * (n - car + 1)\n\n        # If the distance is divisible by 2, then a collision occurs.\n        if distance % 2 == 0:\n            collisions += 1\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/43", "completion": "    hashmap = {}\n    for num in l:\n        if num in hashmap:\n            return True\n        else:\n            hashmap[-num] = num\n    return False"}
{"task_id": "HumanEval/44", "completion": "    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    fib4 = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib4.append(fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4])\n    return fib4[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    length = len(l)\n    if length % 2!= 0:\n        return l[length // 2]\n    else:\n        return (l[length // 2 - 1] + l[length // 2]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    text = re.sub(r'\\W', '', text)\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return (1 << n) % p"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    text = ''.join(e for e in text if e not in vowels)\n    return text"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "    s0 = sorted(s0)\n    s1 = sorted(s1)\n    return s0 == s1\n"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"\u8f93\u5165\u5e94\u4e3a\u6b63\u6574\u6570\u3002\"\n    elif n >= 1 and n <= 8:\n        fibseq = [0, 1]\n        while len(fibseq) < n: fibseq.append(fibseq[-1] + fibseq[-2])\n        return fibseq[-1]\n    else:\n        return f\"\u8f93\u5165\u5e94\u4e3a 1 \u5230 8 \u4e4b\u95f4\u7684\u6574\u6570\u3002\""}
{"task_id": "HumanEval/56", "completion": "    opened = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            opened.append(bracket)\n        elif bracket == \">\":\n            if opened and opened.pop()!= \"<\":\n                return False\n    return not opened"}
{"task_id": "HumanEval/57", "completion": "    inc = True\n    dec = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n\n    return inc or dec"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = list()\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\n    largest_prime = max(factors, key=is_prime)\n    return largest_prime"}
{"task_id": "HumanEval/60", "completion": "    def helper(n: int, sum: int):\n        if n <= 0:\n            return sum\n        else:\n            return helper(n - 1, sum + n)\n\n    return helper(n, 0)"}
{"task_id": "HumanEval/61", "completion": "    opened_brackets = []\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opened_brackets.append(i)\n        elif brackets[i] == ')':\n            if len(opened_brackets) == 0:\n                return False\n            else:\n                opened_brackets.pop()\n    return len(opened_brackets) == 0"}
{"task_id": "HumanEval/62", "completion": "    return [i * j for i, j in enumerate(xs[1:])]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_1 = 0\n        fibfib_2 = 0\n        fibfib_3 = 1\n        for _ in range(3, n + 1):\n            fibfib_4 = fibfib_1 + fibfib_2 + fibfib_3\n            fibfib_1 = fibfib_2\n            fibfib_2 = fibfib_3\n            fibfib_3 = fibfib_4\n        return fibfib_4"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiouyAEIOUY'\n    count = 0\n    for char in s:\n        if char.lower() in vowels and char.lower()!= 'y' or char.lower() == 'y' and s.rfind(char) == len(s)-1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    return str(int(x) >> shift) + str(int(x) << (8 - shift))[::-1] if shift > 8 else str(int(x) << shift) + str(int(x) >> (8 - shift))"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char) - ord('A') + 1\n    return result"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    lst = s.split(\" \")\n    apples = int(lst[0])\n    oranges = int(lst[1])\n    total = n\n    return total - apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "    res = []\n    min_even = float('inf')\n    min_even_index = 0\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_even:\n            min_even = node\n            min_even_index = i\n\n    if min_even:\n        res.append(min_even)\n        res.append(min_even_index)\n\n    return res"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequencies = {}\n    for num in lst:\n        if num not in frequencies:\n            frequencies[num] = 1\n        else:\n            frequencies[num] += 1\n    for num in lst:\n        if frequencies[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            result.append(lst[i])\n    return result + lst[::-1][1:]"}
{"task_id": "HumanEval/71", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Heron's formula to calculate area of triangle\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    # Write your code here\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    min_changes = len(arr)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            new_arr = arr[:i] + arr[i + 1:j] + arr[j::-1]\n            min_changes = min(min_changes, 1 + is_palindrome(new_arr))\n    return min_changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    def divide_numbers(numbers):\n        numbers.sort()\n        prime_list = []\n        for i in range(2, numbers[0]):\n            for j in range(i + 1, numbers[1]):\n                for k in range(j + 1, numbers[2]):\n                    product = i * j * k\n                    if product == num and is_prime(product):\n                        prime_list.append(product)\n                        return prime_list\n\n    def is_prime(num):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    num = a\n    while num > 0:\n        prime_list = divide_numbers([num, num - 1, num - 2])\n        if prime_list:\n            return True\n        num -= 3\n\n    return False"}
{"task_id": "HumanEval/76", "completion": "    return int(x) ** n == x"}
{"task_id": "HumanEval/77", "completion": "    def cube_root(a):\n        b = a ** (1. / 3)\n        return int(b) ** 3 == a\n\n    return cube_root(a) == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    def isprime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for i in range(len(num)):\n        if num[i].isupper():\n            num[i] = num[i].lower()\n        if num[i] in '0123456789':\n            continue\n        elif num[i] in 'abcdef':\n            prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    return (\"db\" + bin(decimal)[2:] + \"db\")\n"}
{"task_id": "HumanEval/80", "completion": "    def letter_frequency(s):\n        freq_count = {}\n        for char in s:\n            if char in freq_count:\n                freq_count[char] += 1\n            else:\n                freq_count[char] = 1\n        return freq_count\n\n    def are_consecutive(s, i):\n        return s[i]!= s[i + 1] and s[i + 1]!= s[i + 2]\n\n    # Check if string length is at least 3\n    if len(s) < 3:\n        return False\n\n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        consecutive_letters = s[i : i + 3]\n        if consecutive_letters in letter_frequency(s):\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return [\n            \"A+\" if grade >= 4.0 else \"A\" if grade >= 3.7 else \"A-\" if grade >= 3.3 else \"B+\" if grade >= 3.0 else \"B\" if grade >= 2.7 else \"B-\" if grade >= 2.3 else \"C+\" if grade >= 2.0 else \"C\" if grade >= 1.7 else \"C-\" if grade >= 1.3 else \"D+\" if grade >= 1.0 else \"D\" if grade >= 0.7 else \"D-\" if grade >= 0.0 else \"E\"\n            for grade in grades\n    ]"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return len(string) == is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "    def helper(n):\n        count = 0\n        for i in range(10 ** (n - 1), 10 ** n):\n            if i // 10 ** (n - 1) == 1 or i % 10 == 1:\n                count += 1\n        return count\n\n    return helper(n)"}
{"task_id": "HumanEval/84", "completion": "    return bin(N).count('1')"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n   words = s.split()\n   ordered_words = []\n   for word in words:\n      ordered_words.append(''.join(sorted(word)))\n   return''.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "    rowlocs = []\n    for i, row in enumerate(lst):\n        slst = [j for j, num in enumerate(row) if num == x]\n        if slst: rowlocs.append((i, slst))\n    if not rowlocs: return []\n    return sorted(rowlocs, key = lambda x: x[0]) + sorted(rowlocs, key = lambda x: x[1], reverse = True)"}
{"task_id": "HumanEval/88", "completion": "    if array == []:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_code = ord(char)\n            rotated_code = (ascii_code + 2 * 2) % 26 + ord('a')\n            result += chr(rotated_code)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    S_list = S.split('.')\n    for sentence in S_list:\n        S_list_2 = sentence.split('?')\n        for part in S_list_2:\n            S_list_3 = part.split('!')\n            for word in S_list_3:\n                if word == \"I\":\n                    count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z) == int(x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    result = \"\"\n    for char in message:\n        ascii_val = ord(char)\n        if 97 <= ascii_val <= 122:\n            # lowercase letter\n            if char == 'a':\n                result += 'c'\n            elif char == 'e':\n                result += 'd'\n            elif char == 'i':\n                result += 'f'\n            elif char == 'o':\n                result += 'g'\n            elif char == 'u':\n                result += 'h'\n            elif char == 'A':\n                result += 'C'\n            elif char == 'E':\n                result += 'D'\n            elif char == 'I':\n                result += 'F'\n            elif char == 'O':\n                result += 'G'\n            elif char == 'U':\n                result += 'H'\n        elif 65 <= ascii_val <= 90:\n            # uppercase letter\n            if char == 'a':\n                result += 'A'\n            elif char == 'e':\n                result += 'B'\n            elif char == 'i':\n                result += 'C'\n            elif char == 'o':\n                result += 'D'\n            elif char == 'u':\n                result += 'E'\n            elif char == 'A':\n                result += 'a'\n            elif char == 'E':\n                result += 'b'\n            elif char == 'I':\n                result += 'c'\n            elif char == 'O':\n                result += 'd'\n            elif char == 'U':\n                result += 'e'\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(lst, key=lambda x: x if is_prime(x) else 0)\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n\n    all_keys_lower = all(key.islower() for key in dict.keys())\n    all_keys_upper = all(key.isupper() for key in dict.keys())\n\n    return all_keys_lower or all_keys_upper"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return a % 10 * b % 10"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    int_value = int(value)\n    if abs(int_value - float(value)) <= 0.5:\n        if value >= 0:\n            return int_value + 1\n        else:\n            return int_value - 1\n    else:\n        return int_value"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    if n % 2 == 0:\n        n += 1\n    for _ in range(1, n):\n        result.append(result[-1] + (2 * _ - 1))\n    return result"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(',') if ',' in s else s.split(' ')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n\n    total = sum(range(n, m + 1))\n    rounded_avg = int(total / 2)\n\n    return bin(rounded_avg).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        #convert num to string and test each digit\n        str_num = str(num)\n        has_even_digit = False\n        for digit in str_num:\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if arr == []:\n        return []\n    else:\n        between_one_nine = [i for i in arr if 1 <= i <= 9]\n        between_one_nine.sort()\n        between_one_nine.reverse()\n        return [str(i).replace(\"1\",\"One\") for i in between_one_nine]"}
{"task_id": "HumanEval/106", "completion": "    return [i * (i+1) // 2 if i % 2 == 0 else sum(range(1, i+1)) for i in range(n)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5076\u6570\n        is_even = bool(int(str(i)) == int(str(i)[::-1]))\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\n        is_odd = not bool(int(str(i)) == int(str(i)[::-1]))\n        # \u5076\u6570\u7684\u4e2a\u6570\n        if is_even:\n            even_count += 1\n        # \u5947\u6570\u7684\u4e2a\u6570\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def helper(n):\n        if n < 0:\n            return max(-n % 10, 0)\n        else:\n            return n % 10\n\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(helper(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if not arr:\n        return True\n\n\n    for i in range(n - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            return False\n\n        arr[i], arr[i - 1] = arr[i - 1], arr[i]\n        for j in range(n - 1, i, -1):\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n    return True"}
{"task_id": "HumanEval/110", "completion": "    def helper(lst1, lst2):\n        even_sum = sum([i for i in lst1 if i % 2 == 0])\n        odd_sum = sum([i for i in lst1 if i % 2 == 1] + [i for i in lst2 if i % 2 == 1])\n        return odd_sum >= even_sum\n\n    return helper(lst1, lst2) or helper(lst2, lst1)\n"}
{"task_id": "HumanEval/111", "completion": "    dict = {}\n    test = test.split()\n    for i in test:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    most = max(dict, key=dict.get)\n    return {most: dict[most]}"}
{"task_id": "HumanEval/112", "completion": "    result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = \"\".join(result)\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, string in enumerate(lst):\n        count = sum(1 for char in string if int(char) % 2!= 0)\n        result.append(f\"the number of odd elements {count}n the str{i + 1} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = nums[0]\n    cur_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        cur_sum = max(nums[i], cur_sum + nums[i])\n        min_sum = min(min_sum, cur_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    filled = 0\n    bucket_left = capacity\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                filled += 1\n                bucket_left -= 1\n\n                if bucket_left == 0:\n                    bucket_left = capacity\n                    filled -= 1\n\n    return filled"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    def count_consonants(word):\n        count = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                count += 1\n        return count == n\n\n    words = s.split()\n    words = [word for word in words if count_consonants(word)]\n    return words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    word = word[::-1]\n    word = word.replace(' ', '')\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    vowels = 'aeiouAEIOU'\n\n    # If the word has odd number of letters skip one\n    if len(word) % 2 == 1:\n        word = word[1:]\n\n    for i in range(len(word) - 1):\n        cons = word[i:i + 2]\n        if cons in consonants and vowels.find(word[i + 2]) > vowels.find(word[i]):\n            return word[i + 2]\n\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    def helper(left, right):\n        if left == 0 and right == 0:\n            return True\n        if left < 0 or right > 0:\n            return False\n        return helper(left - 1, right + 1)\n\n    return 'Yes' if helper(len(lst[0]), len(lst[1])) else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(i if lst.index(i)&1 == 0 else 0 for i in lst if not i%2)"}
{"task_id": "HumanEval/122", "completion": "    # your code here\n    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result"}
{"task_id": "HumanEval/123", "completion": "    collatz = []\n    collatz.append(n)\n    while n!= 1:\n        if n % 2 == 0:\n            collatz.append(n // 2)\n            n = n // 2\n        else:\n            collatz.append(3 * n + 1)\n            n = 3 * n + 1\n    collatz = [x for x in collatz if x % 2!= 0]\n    collatz.sort()\n    return collatz"}
{"task_id": "HumanEval/124", "completion": "    def valid_date(date):\n        \"\"\"You have to write a function which validates a given date string and\n        returns True if the date is valid otherwise False.\n        The date is valid if all of the following rules are satisfied:\n        1. The date string is not empty.\n        2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n        3. The months should not be less than 1 or higher than 12.\n        4. The date should be in the format: mm-dd-yyyy\n\n        for example: \n        valid_date('03-11-2000') => True\n\n        valid_date('15-01-2012') => False\n\n        valid_date('04-0-2040') => False\n\n        valid_date('06-04-2020') => True\n\n        valid_date('06/04/2020') => False\n        \"\"\"\n        # Step 1: Parsing the date string into its components\n        date_parts = date.split('-')\n        if len(date_parts)!= 3:\n            return False\n\n        # Step 2: Validating the components of the date\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in (1, 3, 5, 7, 8, 10, 12) and day < 1 or day > 31:\n            return False\n\n        if month in (4, 6, 9, 11) and day < 1 or day > 30:\n            return False\n\n        if month == 2 and day < 1 or day > 29:\n            return False\n\n        return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        txt = txt.lower()\n        count = 0\n        for char in txt:\n            if ord('a') <= ord(char) <= ord('z') and (ord(char) - ord('a')) % 2!= 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the intervals intersect\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = max(start2, start1) - min(end1, end2) + 1\n\n    # Check if the length is a prime number\n    is_prime = True\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            is_prime = False\n            break\n\n    return \"YES\" if is_prime else \"NO\""}
{"task_id": "HumanEval/128", "completion": "    product = 1\n    total = 0\n\n    if arr == []:\n        return None\n\n    for i in arr:\n        if i == 0:\n            continue\n        product *= i\n        total += abs(i)\n\n    return total * product\n"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    parents = [[-1] * n for _ in range(n)]\n\n    visited = set()\n    row, col = 0, 0\n    visited.add((row, col))\n    dp[row][col] = grid[row][col]\n\n    def bfs():\n        q = [(row, col)]\n        while q:\n            row, col = q.pop(0)\n            for new_row, new_col in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]:\n                if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col) not in visited:\n                    visited.add((new_row, new_col))\n                    new_value = dp[row][col] + grid[new_row][new_col]\n                    if new_value < dp[new_row][new_col]:\n                        dp[new_row][new_col] = new_value\n                        parents[new_row][new_col] = (row, col)\n                        q.append((new_row, new_col))\n\n    bfs()\n    parent_path = []\n    while parents[row][col]!= [-1, -1]:\n        parent_path.append(grid[row][col])\n        row, col = parents[row][col][0], parents[row][col][1]\n    parent_path.append(grid[row][col])\n    parent_path.reverse()\n    return parent_path"}
{"task_id": "HumanEval/130", "completion": "    result = [3] * (n + 1)\n    if n >= 1:\n        result[1] = 1\n    if n >= 2:\n        result[2] = 3\n    if n >= 3:\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                result[i] = 1 + i / 2\n            else:\n                result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n    return result"}
{"task_id": "HumanEval/131", "completion": "    result = 1\n    n_str = str(n)\n    for i in n_str:\n        if int(i) % 2!= 0:\n            result *= int(i)\n    return result"}
{"task_id": "HumanEval/132", "completion": "    def is_nested(string):\n        open_brackets = 0\n        for char in string:\n            if char == '[':\n                open_brackets += 1\n            elif char == ']':\n                open_brackets -= 1\n                if open_brackets < 0:\n                    return True\n        return open_brackets == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return round(sum(i**2 for i in lst), 0)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt!= \"\":\n        if not txt.isspace():\n            if txt[-1].islower():\n                if not txt[-2::-1].isalpha():\n                    return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    # Stores the largest index of an element which\n    # is not greater than the previous element\n    largest_index = -1\n    for i in range(len(arr)):\n        # If the current element is greater than the previous one\n        if arr[i] > arr[largest_index]:\n            largest_index = i\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "    # Create empty lists for negative and positive integers\n    negative_integers = []\n    positive_integers = []\n\n    # Iterate through the list\n    for num in lst:\n        # If the number is negative, append it to the negative_integers list\n        if num < 0:\n            negative_integers.append(num)\n        # If the number is positive, append it to the positive_integers list\n        elif num > 0:\n            positive_integers.append(num)\n\n    # If there are no negative integers, set the negative_max to None\n    if not negative_integers:\n        negative_max = None\n    # If there are negative integers, set the negative_max to the maximum of the negative integers\n    else:\n        negative_max = max(negative_integers)\n\n    # If there are no positive integers, set the positive_min to None\n    if not positive_integers:\n        positive_min = None\n    # If there are positive integers, set the positive_min to the minimum of the positive integers\n    else:\n        positive_min = min(positive_integers)\n\n    # Return a tuple containing the positive_min and negative_max\n    return (positive_min, negative_max)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    try:\n        return max(a, b)\n    except TypeError:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    even_sum = False\n    for i in range(1, int(n / 2) + 1):\n        if n - 2 * i > 0:\n            if 2 * i + 2 * (n - i) == n:\n                even_sum = True\n    return even_sum"}
{"task_id": "HumanEval/139", "completion": "    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) * (n - 18) * (n - 19) * (n - 20) * (n - 21) * (n - 22) * (n - 23) * (n - 24) * (n - 25) * (n - 26) * (n - 27) * (n - 28) * (n - 29) * (n - 30) * (n - 31) * (n - 32) * (n - 33) * (n - 34) * (n - 35) * (n - 36) * (n - 37) * (n - 38) * (n - 39) * (n - 40) * (n - 41) * (n - 42) * (n - 43) * (n - 44) * (n - 45) * (n - 46) * (n - 47) * (n - 48) * (n - 49) * (n - 50) * (n - 51) * (n - 52) * (n - 53) * (n - 54) * (n - 55) * (n - 56) * (n - 57) * (n - 58) * (n - 59) * (n - 60) * (n - 61) * (n - 62) * (n - 63) * (n - 64) * (n - 65) * (n - 66) * (n - 67) * (n - 68) * (n - 69) * (n - 70) * (n - 71) * (n - 72) * (n - 73) * (n - 74) * (n - 75) * (n - 76) * (n - 77) * (n - 78) * (n - 79) * (n - 80) * (n - 81) * (n - 82) * (n - 83) * (n - 84) * (n - 85) * (n - 86) * (n - 87) * (n - 88) * (n - 89) * (n - 90) * (n - 91) * (n - 92) * (n - 93) * (n - 94) * (n - 95) * (n - 96) * (n - 97) * (n - 98) * (n - 99) * (n - 100)\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"__\" in text:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    file_name_split = file_name.split('.')\n    if len(file_name_split)!= 2:\n        return \"No\"\n    if len(file_name_split[0]) > 3:\n        return \"No\"\n    if not file_name_split[0][0].isalpha():\n        return \"No\"\n    if file_name_split[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 3:\n            result += lst[i] ** 3\n        elif i % 3 == 0:\n            result += lst[i] ** 2\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    arr = sentence.split(' ')\n    prime = []\n    result = ''\n    for word in arr:\n        if len(word) > 2:\n            for i in range(2, int(word**0.5) + 1):\n                if word % i == 0:\n                    break\n            else:\n                prime.append(word)\n    prime.sort()\n    for word in prime:\n        result += word + \" \"\n    return result.strip()\n"}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    numerator1, denominator1 = map(int, x.split('/'))\n    numerator2, denominator2 = map(int, n.split('/'))\n\n    product = numerator1 * numerator2\n    product_denominator = denominator1 * denominator2\n\n    if gcd(product, product_denominator) == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)), reverse=True)"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in (1, 3, 5, 7, 9) and num // 10 % 10 in (1, 3, 5, 7, 9):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 == 'Mercury' and planet2 == 'Neptune':\n        return planets[1:8]\n    elif planet1 == 'Earth' and planet2 == 'Mercury':\n        return planets[1:]\n    elif planet1 == planet2:\n        return planets\n    elif planet1 == 'Jupiter' and planet2 == 'Neptune':\n        return planets[4:8]\n    elif planet1 == 'Earth' and planet2 == 'Jupiter':\n        return planets[3:7]\n    elif planet1 == 'Mars' and planet2 == 'Neptune':\n        return planets[2:8]\n    elif planet1 == 'Mars' and planet2 == 'Jupiter':\n        return planets[2:6]\n    elif planet1 == 'Venus' and planet2 == 'Neptune':\n        return planets[1:8]\n    elif planet1 == 'Venus' and planet2 == 'Jupiter':\n        return planets[1:7]\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(set(lst) - set([word for word in lst if len(word) % 2!= 0]), key=lambda word: (len(word), word))"}
{"task_id": "HumanEval/150", "completion": "    # Begin your solution\n    is_prime = True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            is_prime = False\n            break\n    return x if is_prime else y\n    # End your solution"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(g - s) for g,s in zip(guess,game)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\"\"\"\n    # Sort the extensions by their strength\n    extensions.sort(key=lambda x: (len([c for c in x if c.isupper()]) - len([c for c in x if c.islower()]), x))\n\n    # Choose the first extension with non-zero strength\n    for extension in extensions:\n        if len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()]) > 0:\n            return f\"{class_name}.{extension}\"\n    # If no extensions have non-zero strength, return the empty string\n    return \"\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    #If the length of b is greater than the length of a return False\n    if len(b)>len(a):\n        return False\n    #Initialize a counter\n    counter = 0\n    #Check if b is a substring of a\n    for i in range(len(a)-len(b)+1):\n        #Slice the string from a from the current index to the end\n        substring = a[i:i+len(b)]\n        #If the substring is equal to b increment the counter\n        if substring == b:\n            counter += 1\n    #If the counter is greater than 0 return True, else return False\n    if counter>0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while(num!= 0):\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals_dict = {\n        1000:'m',\n        900:'cm',\n        500:'d',\n        400:'cd',\n        100:'c',\n        90:'xc',\n        50:'l',\n        40:'xl',\n        10:'x',\n        9:'ix',\n        5:'v',\n        4:'iv',\n        1:'i'\n    }\n    result = []\n    for key, value in roman_numerals_dict.items():\n        while number >= key:\n            result.append(value)\n            number -= key\n    return ''.join(result).lower()"}
{"task_id": "HumanEval/157", "completion": "    # Use the Pythagorean Theorem to check if a triangle is a right triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    max_word = \"\"\n\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total > remaining:\n        total = remaining\n    left = remaining - total\n    return [total, left]"}
{"task_id": "HumanEval/160", "completion": "    def evaluate_expression(op1, op2, op):\n        if op == '+':\n            return op1 + op2\n        elif op == '-':\n            return op1 - op2\n        elif op == '*':\n            return op1 * op2\n        elif op == '//':\n            return op1 // op2\n        elif op == '**':\n            return op1 ** op2\n\n    result = operand[0]\n    for i in range(1, len(operand)):\n        op = operator[i-1]\n        result = evaluate_expression(result, operand[i], op)\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    try:\n        import hashlib\n    except ImportError:\n        print(\"Error: Please install the hashlib module\")\n        return\n\n    if not text:\n        return None\n\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    return [i for i in range(a, b + 1) if i % 2 == 0]"}
