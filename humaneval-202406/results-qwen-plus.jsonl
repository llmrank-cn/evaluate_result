{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    start = 0\n    balance = 0\n\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            balance += 1\n        elif char == \")\":\n            balance -= 1\n        if balance == 0 and start < i:\n            groups.append(paren_string[start:i+1])\n            start = i + 1\n\n    return groups"}
{"task_id": "HumanEval/2", "completion": "import math\n\ndef truncate_number(number: float) -> float:\n    \"\"\"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - math.floor(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n\n# Test cases\nassert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n\n\n# Test case provided by the user\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        count = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_depth:\n                    max_depth = count\n            elif char == ')':\n                count -= 1\n        result.append(max_depth)\n    return result\n\n# Test case\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return (total_sum, total_product)\n\n# Test cases\nprint(sum_product([]))  # Output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n    \n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    \n    return result\n\n# Test case provided by the user\nassert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\"\"\"\n    # Find the longest palindrome postfix\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            break\n    \n    # Construct the palindrome by appending the reversed prefix\n    prefix = string[:i]\n    return string + prefix[::-1]\n\n# Test cases\nprint(make_palindrome(''))\nprint(make_palindrome('cat'))\nprint(make_palindrome('cata'))"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n# Test case\nprint(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n\n# Test cases\nassert longest([]) == None\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n# Test cases\nassert all_prefixes('abc') == ['a', 'ab', 'abc']\nassert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    parsed_notes = []\n    note = ''\n    for char in music_string:\n        if char == ' ':\n            if note:\n                parsed_notes.append(notes[note])\n                note = ''\n        else:\n            note += char\n    if note:\n        parsed_notes.append(notes[note])\n    return parsed_notes\n\n\n# Test case\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    length_substring = len(substring)\n    \n    for i in range(len(string) - length_substring + 1):\n        if string[i:i+length_substring] == substring:\n            count += 1\n            \n    return count"}
{"task_id": "HumanEval/19", "completion": "number_mapping = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\ndef sort_numbers(numbers: str) -> str:\n    number_list = numbers.split()\n    sorted_numbers = sorted(number_list, key=lambda x: number_mapping[x])\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_diff = float('inf')\n    closest_pair = None\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n                \n    return closest_pair\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    return [((num - min_num) / (max_num - min_num)) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):  # Start from n-1 and go down to 2\n        if n % i == 0:\n            return i\n    # If no divisor is found (n is prime), return None or 1 depending on the requirement\n    return None  # You can change this to 1 if you want the function to always return an integer\n\n# Test case\nprint(largest_divisor(15))  # Output: 5"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test cases\nprint(factorize(8))  # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\n# Test case\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 == 0:\n        a = max([abs(coeff) for coeff in xs if coeff != 0])\n        if a == 0:\n            raise ValueError(\"Invalid input: Coefficients must have a non-zero value\")\n        \n        # Normalize the polynomial to make the leading coefficient 1\n        xs = [coeff / a for coeff in xs]\n        \n        # Use Newton's method to find the root\n        x = 1\n        epsilon = 1e-6\n        while True:\n            x_new = x - poly(xs, x) / poly([coeff * i for i, coeff in enumerate(xs)], x)\n            if abs(x_new - x) < epsilon:\n                return round(x_new, 2)\n            x = x_new"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    third_elements = sorted(element for index, element in enumerate(l) if index % 3 == 0)\n    return [third_elements[index // 3] if index % 3 == 0 else l[index] for index in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n\n# Test case provided by the user\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    new_l = l.copy()\n    for i in range(0, len(l), 2):\n        new_l[i] = even_indices.pop(0)\n    return new_l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # shift elements in each group back to their original position. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    fib_count = 0\n    num1, num2 = 0, 1\n    while fib_count < n:\n        next_num = num1 + num2\n        if is_prime(next_num):\n            fib_count += 1\n        num1, num2 = num2, next_num\n    return num1\n\n\n# Test cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    if n < 3:\n        return False\n\n    # Create a set to store unique elements\n    unique_elements = set()\n\n    # Iterate through the list\n    for i in range(n):\n        # Check if -l[i] exists in the set\n        if -l[i] in unique_elements:\n            # If it does, we have found a triplet\n            return True\n        else:\n            # Otherwise, add l[i] to the set\n            unique_elements.add(l[i])\n\n    # If no triplet is found, return False\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    # Generate random positions for n cars moving left to right and right to left\n    l2r_positions = sorted(range(1, n + 1))\n    r2l_positions = sorted(range(n, 0, -1))\n\n    collisions = 0\n    i, j = 0, 0\n\n    while i < n and j < n:\n        if l2r_positions[i] <= r2l_positions[j]:\n            collisions += 1\n            i += 1\n        else:\n            j += 1\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    element_dict = {}\n    \n    for num in l:\n        if -num in element_dict:\n            return True\n        else:\n            element_dict[num] = True\n            \n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    digits = \"0123456789\"\n    result = \"\"\n    \n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x = x // base\n    \n    return result\n\n# Test cases provided by the user\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "from typing import List\n\ndef fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    if n <= 2:\n        return [0, 0, 2][n]\n    \n    fib_sequence = [0, 0, 2, 0]  # Initial sequence\n    for i in range(4, n+1):\n        fib_sequence.append(sum(fib_sequence[-4:]))\n    \n    return fib_sequence[n]\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()  # Sort the list\n    length = len(l)\n    mid = length // 2\n\n    if length % 2 == 0:  # Even number of elements\n        return (l[mid - 1] + l[mid]) / 2\n    else:  # Odd number of elements\n        return l[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result\n\n# Test cases\nprint(modp(3, 5))  # Output: 3\nprint(modp(1101, 101))  # Output: 2\nprint(modp(0, 101))  # Output: 1\nprint(modp(3, 11))  # Output: 8\nprint(modp(100, 101))  # Output: 1"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    char_set = set(s0)\n    return all(char in char_set for char in s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    \n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))  # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n    \n    is_increasing = l[0] < l[1]\n    is_decreasing = l[0] > l[1]\n    \n    for i in range(1, len(l) - 1):\n        if is_increasing and l[i] > l[i + 1]:\n            is_increasing = False\n            is_decreasing = True\n        elif is_decreasing and l[i] < l[i + 1]:\n            is_decreasing = False\n            is_increasing = True\n            \n        if is_increasing and is_decreasing:\n            return False\n            \n    return is_increasing or is_decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert lists to sets to remove duplicates and find common elements\n    common_elements = set(l1) & set(l2)\n    # Sort the common elements and return as a list\n    return sorted(list(common_elements))\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]"}
{"task_id": "HumanEval/59", "completion": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    largest_factor = 1\n    # Check divisibility by 2\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n\n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n\n    # If n is still a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor\n\n# Test cases\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n                \n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative_coeffs = []\n    for index, coeff in enumerate(xs):\n        if index != 0:\n            derivative_coeffs.append(index * coeff)\n    return derivative_coeffs"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    \n    # Initialize a list to store previously computed fibfib numbers\n    fibfib_seq = [0, 0, 1] + [0] * (n - 2)\n    \n    # Compute fibfib numbers up to n\n    for i in range(3, n + 1):\n        fibfib_seq[i] = fibfib_seq[i - 1] + fibfib_seq[i - 2] + fibfib_seq[i - 3]\n    \n    return fibfib_seq[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    s = s.lower()\n    for char in s:\n        if char in vowels:\n            count += 1\n        elif char == 'y' and s.index(char) == len(s) - 1:\n            count += 1\n    return count\n\n# Additional Test Cases\nassert vowels_count(\"hello\") == 2\nassert vowels_count(\"silent\") == 3\nassert vowels_count(\"Yoga\") == 1\nassert vowels_count(\"consonant\") == 1\nassert vowels_count(\"vowel\") == 2\nassert vowels_count(\"xylophone\") == 3\nassert vowels_count(\"python\") == 1\nprint(\"All test cases pass\")"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    digits = [int(d) for d in str(abs(x))]\n    num_digits = len(digits)\n    \n    if shift >= num_digits:\n        return ''.join(map(str, digits[::-1]))\n    \n    shifted_digits = digits[-shift:] + digits[:-shift]\n    return ''.join(map(str, shifted_digits))\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    uppercase_sum = sum(ord(c) for c in s if c.isupper())\n    return uppercase_sum\n\n# Test cases\nprint(digitSum(\"\")) # => 0\nprint(digitSum(\"abAB\")) # => 131\nprint(digitSum(\"abcCd\")) # => 67\nprint(digitSum(\"helloE\")) # => 69\nprint(digitSum(\"woArBld\")) # => 131\nprint(digitSum(\"aAaaaXa\")) # => 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = s.split(\" \")\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num <= smallest_even:\n            smallest_even = num\n            smallest_index = i\n\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_index]\n\n# Test cases\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))          # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    for num, count in freq.items():\n        if count > num:\n            return num\n    \n    return -1\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1])) # Expected output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Expected output: 3\nprint(search([5, 5, 4, 4, 4])) # Expected output: -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    result = []\n    while lst:\n        min_num = min(lst)\n        lst.remove(min_num)\n        result.append(min_num)\n        \n        if lst:\n            max_num = max(lst)\n            lst.remove(max_num)\n            result.append(max_num)\n            \n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Check if the given sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        semi_perimeter = (a + b + c) / 2\n        # Use Heron's formula to find the area\n        area = math.sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n\n    # Iterate up to the middle of the array\n    for i in range(n // 2):\n        # Compare elements from both ends and increment changes if they don't match\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n\n    # If the length of the array is odd, check the middle element\n    if n % 2 != 0:\n        changes += abs(arr[n // 2] - arr[n // 2 - 1])\n\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def count_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    len1 = count_chars(lst1)\n    len2 = count_chars(lst2)\n    \n    return lst1 if len1 <= len2 else lst2\n\n# Test cases\nprint(total_match([], [])) # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi'])) # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])) # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])) # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5'])) # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a = a / prime\n    return len(factors) == 3 and a == 1\n\n# Test case\nprint(is_multiply_prime(30))  # Should print: True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1 or n == 1:\n        return True\n    for i in range(1, int(x ** 0.5) + 1):\n        if x == n ** i:\n            return True\n    return False\n\n# Test cases\nprint(is_simple_power(1, 4))  # => True\nprint(is_simple_power(2, 2))  # => True\nprint(is_simple_power(8, 2))  # => True\nprint(is_simple_power(3, 2))  # => False\nprint(is_simple_power(3, 1))  # => False\nprint(is_simple_power(5, 3))  # => False"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = set('2357BDF')\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:].zfill(8)  # Convert to binary and pad with leading zeros\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s) - 2):\n        if s[i:i+3] in seen:\n            return False\n        seen.add(s[i:i+3])\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0:\n            letter_grades.append('A+')\n        elif g > 3.7:\n            letter_grades.append('A')\n        elif g > 3.3:\n            letter_grades.append('A-')\n        elif g > 3.0:\n            letter_grades.append('B+')\n        elif g > 2.7:\n            letter_grades.append('B')\n        elif g > 2.3:\n            letter_grades.append('B-')\n        elif g > 2.0:\n            letter_grades.append('C+')\n        elif g > 1.7:\n            letter_grades.append('C')\n        elif g > 1.3:\n            letter_grades.append('C-')\n        elif g > 1.0:\n            letter_grades.append('D+')\n        elif g > 0.7:\n            letter_grades.append('D')\n        elif g > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test case\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])) # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    # Count numbers starting with 1\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1':\n            count += 1\n    # Count numbers ending with 1\n    for i in range(10**(n-1), 10**n):\n        if str(i)[-1] == '1':\n            count += 1\n    # Subtract duplicates (numbers that both start and end with 1)\n    count -= starts_with_one_and_ends_with_one(n)\n    return count\n\ndef starts_with_one_and_ends_with_one(n):\n    return len([i for i in range(10**(n-1), 10**n) if str(i)[0] == '1' and str(i)[-1] == '1'])"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = bin(sum(int(digit) for digit in str(N))).replace(\"0b\", \"\")\n    return binary_sum.zfill(len(bin(N)) - 2)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n\n# Test case\nprint(add([4, 2, 6, 7]))  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [word[::-1].sorted()[::-1] for word in words]\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                coordinates.append((i, j))\n                \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Test cases\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # Expected: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1)) # Expected: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3)) # Expected: [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) < 2:\n        return array\n    else:\n        sum_first_last = array[0] + array[-1]\n        if sum_first_last % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n        else:\n            new_char = char\n        encrypted += new_char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    first_min = second_min = float('inf')\n    for num in lst:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif num < second_min and num != first_min:\n            second_min = num\n    if second_min == float('inf'):\n        return None\n    return second_min"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.replace('.', ' ').replace('!', ' ').replace('?', ' ').split()\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    return boredom_count\n\n# Test cases\nprint(is_bored(\"Hello world\")) # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\")) # Output: 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.islower():\n            if char in 'aeiou':\n                encoded_message += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_message += char.upper()\n        elif char.isupper():\n            if char in 'AEIOU':\n                encoded_message += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                encoded_message += char.lower()\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n    \n    if max_prime is None:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21])) # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7])) # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:  # Return False if the dictionary is empty\n        return False\n\n    case = None  # Initialize case to None\n\n    for key in dict:\n        if isinstance(key, str):  # Check if the key is a string\n            if case is None:  # If case is None, set it based on the key's case\n                case = key.islower()\n            elif case != key.islower():  # If the current key's case doesn't match the stored case\n                return False\n\n        else:  # If the key is not a string\n            return False\n\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    \n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digits of a and b\n    unit_a = a % 10\n    unit_b = b % 10\n\n    # Multiply the unit digits\n    result = unit_a * unit_b\n\n    return result"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):  # iterate over even indices\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if abs(num - int(num)) < 0.5:\n        return int(num)\n    else:\n        return int(num) + (1 if num > 0 else -1)\n\n# Test cases\nprint(closest_integer(\"10\")) # Output: 10\nprint(closest_integer(\"15.3\")) # Output: 15\nprint(closest_integer(\"14.5\")) # Output: 15\nprint(closest_integer(\"-14.5\")) # Output: -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    current_level = n\n    for i in range(n):\n        pile.append(current_level)\n        if n % 2 == 0:\n            current_level += 2\n        else:\n            current_level += 1\n    return pile\n\n# Test cases\nprint(make_a_pile(3))  # Output: [3, 5, 7]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # Remove any leading/trailing spaces\n    s = s.strip()\n    \n    # Split the string by commas and spaces\n    words = s.replace(',', ' ').split()\n    \n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Ensure x is smaller than or equal to y\n    if x > y:\n        x, y = y, x\n    \n    # Iterate from y down to x and check for the first even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number found, return -1\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = int(round((m+n)/2))\n        return bin(avg)[2:]\n\n# Test cases\nprint(rounded_avg(1, 5)) # Should print: 0b11\nprint(rounded_avg(7, 5)) # Should print: -1\nprint(rounded_avg(10, 20)) # Should print: 0b1111\nprint(rounded_avg(20, 33)) # Should print: 0b11010"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    valid_nums.sort(reverse=True)\n    \n    result = [num_names[num] for num in valid_nums]\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(i):\n    if i == 0 or i == 1:\n        return 1\n    else:\n        return i * factorial(i-1)\n\n# Test case\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # check if the number is a palindrome\n            if i % 2 == 0:  # check if the number is even\n                even_count += 1\n            else:  # check if the number is odd\n                odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12))  # Output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits_sum = sum(int(digit) for digit in str(abs(num)))\n        if digits_sum > 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_nums([]) == 0)\nprint(count_nums([-1, 11, -11]) == 1)\nprint(count_nums([1, 1, 2]) == 3)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n\n    # Create a circular shift of the array\n    shifted_arr = arr[n - 1:] + arr[:n - 1]\n\n    # Check if the sorted array is a rotation of the original array\n    for i in range(n):\n        if arr == shifted_arr[i:]:\n            return True\n\n    return False\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Output: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Output: False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    if len(odd_lst1) > len(even_lst2):\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Initialize an empty dictionary to store letter counts\n    letter_counts = {}\n    \n    # Split the input string into a list of letters\n    letters = test.split()\n    \n    # Iterate through the letters\n    for letter in letters:\n        # If the letter is not in the dictionary, add it with a count of 1\n        if letter not in letter_counts:\n            letter_counts[letter] = 1\n        # If the letter is already in the dictionary, increment its count by 1\n        else:\n            letter_counts[letter] += 1\n            \n    # Find the maximum count\n    max_count = max(letter_counts.values(), default=0)\n    \n    # Create a new dictionary to store the letters with the max count\n    result = {}\n    \n    # Iterate through the letter counts and add letters with the max count to the result dictionary\n    for letter, count in letter_counts.items():\n        if count == max_count:\n            result[letter] = count\n            \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Remove characters from s that are in c\n    s = ''.join(char for char in s if char not in c)\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = s == s[::-1]\n    \n    return (s, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, num_str in enumerate(lst):\n        count = sum(int(digit) % 2 != 0 for digit in num_str)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))  # Output: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', \"11111111\"]))  # Output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    start = end = 0\n    curr_sum = 0\n    min_sum = float('inf')\n\n    while end < len(nums):\n        curr_sum += nums[end]\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        while curr_sum <= 0:\n            curr_sum -= nums[start]\n            start += 1\n        end += 1\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_waters = sum(sum(row) for row in grid)\n    return total_waters // capacity + (total_waters % capacity != 0)\n\n# Test cases\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)) # Expected: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)) # Expected: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5)) # Expected: 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonants_count = 0\n        for letter in word:\n            if letter.lower() not in 'aeiou':\n                consonants_count += 1\n        if consonants_count == n:\n            result.append(word)\n    \n    return result\n\n# Test cases\nprint(select_words(\"Mary had a little lamb\", 4)) #==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3)) #==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2)) #==> []\nprint(select_words(\"Hello world\", 4)) #==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3)) #==> [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    str1, str2 = lst[0], lst[1]\n    for i in range(2):  # Iterate over all possible concatenation orders\n        result = str1 + str2 if i == 0 else str2 + str1\n        if is_balanced(result):\n            return 'Yes'\n    return 'No'\n\ndef is_balanced(s):\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Expected output: 'Yes'\nprint(match_parens([')', ')']))   # Expected output: 'No'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    if not arr or k <= 0:\n        return []\n    \n    max_heap = []\n    for num in arr:\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, -num)  # Push negative numbers to maintain the max heap property\n        elif num > -max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -num)\n    \n    # Return the sorted list in descending order\n    return [-num for num in heapq.nlargest(k, max_heap)]\n\n# Test cases\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_two_digits = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            sum_two_digits += num\n    return sum_two_digits\n\n# Example usage\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([num for num in sequence if num % 2 != 0])\n\n# Test cases\nprint(get_odd_collatz(5))  # Returns [1, 5]"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        # Parse the date string in the given format\n        parsed_date = datetime.strptime(date, '%m-%d-%Y')\n        \n        # Check if the month is February and if it's a leap year\n        if parsed_date.month == 2:\n            # If the year is divisible by 4 but not by 100 or divisible by 400, it's a leap year\n            if (parsed_date.year % 4 == 0 and parsed_date.year % 100 != 0) or parsed_date.year % 400 == 0:\n                max_days = 29\n            else:\n                max_days = 28\n        else:\n            # Get the maximum number of days based on the month\n            max_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][parsed_date.month - 1]\n        \n        # Check if the number of days is valid\n        return 1 <= parsed_date.day <= max_days\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if ord(char.lower()) % 2 != 0 and ord(char.lower()) >= ord('a') and ord(char.lower()) <= ord('z'):\n                count += 1\n        return count\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):  # Check for duplicates\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    # Find the intersection range\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If the intersection is empty, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Return \"YES\" if the length is prime, \"NO\" otherwise\n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            return 0\n        sign *= (1 if num > 0 else -1)\n        magnitude_sum += abs(num)\n\n    return sign * magnitude_sum\n\n# Test cases\nprint(prod_signs([1, 2, 2, -4]))  # Output: -9\nprint(prod_signs([0, 1]))           # Output: 0\nprint(prod_signs([]))               # Output: None"}
{"task_id": "HumanEval/129", "completion": "from collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    \n    def neighbors(i, j):\n        for dx, dy in directions:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < N and 0 <= nj < N:\n                yield ni, nj\n    \n    visited = set()\n    min_path = []\n    \n    for start_i in range(N):\n        for start_j in range(N):\n            queue = deque([(start_i, start_j)])\n            path = []\n            \n            while queue and len(path) < k:\n                i, j = queue.popleft()\n                path.append(grid[i][j])\n                \n                if len(path) == k:\n                    break\n                    \n                for nei_i, nei_j in neighbors(i, j):\n                    if (nei_i, nei_j) not in visited:\n                        visited.add((nei_i, nei_j))\n                        queue.append((nei_i, nei_j))\n                    \n            if len(path) == k:\n                min_path = path\n                break\n                \n    return min_path\n\n# Test cases\nprint(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)) # Output: [1, 2, 1]\nprint(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)) # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci = [1, 3]\n    if n <= 2:\n        return tribonacci[:n+1]\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n    return tribonacci\n\n# Test cases\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack or stack[-1] != \"[\":\n                return False\n            stack.pop()\n    \n    return len(stack) > 0\n\n# Test cases\nprint(is_nested('[[]]'))         # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]'))         # \u279e False\nprint(is_nested('[]'))          # \u279e False\nprint(is_nested('[[][]]'))       # \u279e True\nprint(is_nested('[[]][['))       # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    # Round each element in the list to the upper int (Ceiling)\n    rounded_lst = [math.ceil(num) for num in lst]\n    \n    # Calculate the sum of squares\n    sum_of_squares = sum(rounded_num ** 2 for rounded_num in rounded_lst)\n    \n    return sum_of_squares"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n\n    # Split the string into words\n    words = txt.split()\n\n    # Get the last word\n    last_word = words[-1]\n\n    # Check if the last character of the last word is a letter\n    if last_word[-1].isalpha() and not last_word[-2].isspace():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n\n# Test cases\nprint(can_arrange([1,2,4,3,5])) # Expected output: 3\nprint(can_arrange([1,2,3]))       # Expected output: -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n                \n    return (largest_negative, smallest_positive)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))  # Output: (None, None)\nprint(largest_smallest_integers([0]))  # Output: (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a == b:\n        return None\n    else:\n        return max(a, b)\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    else:\n        return True\n\n# Test cases\nprint(is_equal_to_sum_even(4)) # Output: False\nprint(is_equal_to_sum_even(6)) # Output: False\nprint(is_equal_to_sum_even(8)) # Output: True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '___' in text:\n        text = text.replace('___', '-_')\n    return text.replace '__' , '-'\n\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    parts = file_name.split('.')\n    \n    if len(parts) != 2 or not parts[0] or not parts[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if not parts[0].startswith(tuple('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n        return 'No'\n    \n    digit_count = sum(c.isdigit() for c in parts[0])\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(\" \")\n    prime_words = [word for word in words if is_prime(len(word))]\n    result = \" \".join(prime_words)\n    return result"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n    result = frac_x * frac_n\n    return result.denominator == 1\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\")) # Expected output: True\nprint(simplify(\"1/6\", \"2/1\")) # Expected output: False\nprint(simplify(\"7/10\", \"10/2\")) # Expected output: False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    sorted_nums = sorted(nums, key=lambda x: (-sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return sorted_nums\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15])) # => 1 \nprint(specialFilter([33, -2, -3, 45, 21, 109])) # => 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    triplets = set()\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            complement = 3 - (a[i] + a[j]) % 3\n            if complement == a[j]:\n                continue\n            for k in range(j + 1, n):\n                if a[k] == complement:\n                    count += 1\n                    triplets.add((a[i], a[j], a[k]))\n                    break\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1+1:index2])\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # Output: (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))      # Output: (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))     # Output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Delete strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst\n\n# Test cases\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total * 2"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"\n\n# Test case\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num) # Make the number positive to count digits correctly\n    while num > 0:\n        last_digit = num % 10\n        if last_digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            result += symbol\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the largest side is equal to the sum of squares of other two sides\n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_count:\n            max_unique_count = len(unique_chars)\n            max_word = word\n            \n    return max_word\n\n# Test cases to validate the function\nprint(find_max([\"name\", \"of\", \"string\"])) # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"])) # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])) # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need - number, remaining)\n    carrots_left = remaining - (need - number if total_eaten >= need else 0)\n    return [total_eaten, carrots_left]\n\n# Test cases\nprint(eat(5, 6, 10)) # Expected output: [11, 4]\nprint(eat(4, 8, 9)) # Expected output: [12, 1]\nprint(eat(1, 10, 10)) # Expected output: [11, 0]\nprint(eat(2, 11, 5)) # Expected output: [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    has_letter = any(char.isalpha() for char in s)\n    if not has_letter:\n        return s[::-1]\n    else:\n        result = []\n        for char in s:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n        return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode('utf-8'))\n        return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for num in range(min(a, b), max(a, b) + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result\n\n# Test cases\nprint(generate_integers(2, 8)) # => [2, 4, 6, 8]\nprint(generate_integers(8, 2)) # => [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # => []"}
