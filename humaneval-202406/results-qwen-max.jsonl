{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the numbers to make it easier to check for close elements\n    sorted_numbers = sorted(numbers)\n    \n    # Iterate through the sorted list and compare each pair of adjacent numbers\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold:\n            return True\n    \n    return False\n\n# Test cases\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Output: False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Output: True"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    start = 0\n    \n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if i > 0 and paren_string[i-1] != ')':\n                start = i\n        elif paren_string[i] == ')' and i > 0 and paren_string[i-1] == ')':\n            result.append(paren_string[start:i+1])\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Calculate the sum of absolute differences\n    abs_diff_sum = sum(abs(number - mean_value) for number in numbers)\n    \n    # Calculate the Mean Absolute Deviation\n    mad = abs_diff_sum / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result\n\n# Test cases\nprint(intersperse([], 4))  # []\nprint(intersperse([1, 2, 3], 4))  # [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def count_nested_parens(s: str) -> int:\n        max_depth, depth = 0, 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [count_nested_parens(group) for group in groups]\n\n# Test the function with the given example\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n# Test cases\nprint(filter_by_substring([], 'a'))  # Output: []\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Output: ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = 0\n    product_of_numbers = 1\n\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n\n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            break\n\n    # Reverse the substring before the palindromic suffix and append it to the original string\n    return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    # Convert the binary strings to integers\n    a_int = int(a, 2)\n    b_int = int(b, 2)\n    \n    # Perform XOR operation on the integers\n    xor_result = a_int ^ b_int\n    \n    # Convert the result back to binary string and return it\n    return format(xor_result, 'b').zfill(max(len(a), len(b)))\n\n# Test the function with the given example\nprint(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n            \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases\nprint(greatest_common_divisor(3, 5))  # Output: 1\nprint(greatest_common_divisor(25, 15))  # Output: 5"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\n# Test case\nprint(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n\n# Test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))   # Output: 4"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count\n\n# Test cases\nprint(how_many_times('', 'a')) # 0\nprint(how_many_times('aaa', 'a')) # 3\nprint(how_many_times('aaaa', 'aa')) # 3"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numeral_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: numeral_map[x])\n    return ' '.join(sorted_numbers)\n\n# Test the function\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to store the closest pair\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_distance = abs(sorted_numbers[1] - sorted_numbers[0])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(1, len(sorted_numbers) - 1):\n        current_distance = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if current_distance < min_distance:\n            min_distance = current_distance\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n            \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]\n\n# Test cases\nprint(filter_integers(['a', 3.14, 5]))  # [5]\nprint(filter_integers([1, 2, 3, 'abc', {}, []]))  # [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n\n# Test cases\nprint(strlen(''))  # Output: 0\nprint(strlen('abc'))  # Output: 3"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Test example\nprint(largest_divisor(15))  # Output: 5"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        while (n % divisor) == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n# Test cases\nprint(factorize(8))  # [2, 2, 2]\nprint(factorize(25))  # [5, 5]\nprint(factorize(70))  # [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n# Test case\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()\n\n# Test example\nprint(flip_case('Hello'))  # Output: 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n\n# Test cases\nprint(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))      # False\nprint(is_prime(101))     # True\nprint(is_prime(11))     # True\nprint(is_prime(13441))  # False, not a prime number\nprint(is_prime(61))     # True\nprint(is_prime(4))      # False\nprint(is_prime(1))      # False"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\"\n    Find a zero of the polynomial defined by its coefficients xs.\n    \"\"\"\n    # Ensure the polynomial has an even number of coefficients and the last is not zero\n    assert len(xs) % 2 == 0 and xs[-1] != 0, \"List of coefficients must have an even number and end with a non-zero value.\"\n\n    # Function to evaluate the polynomial at a given point\n    def eval_poly(x):\n        return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\n    # Check the sign of the polynomial at 0 and 1 to determine the interval\n    if eval_poly(0) * eval_poly(1) < 0:\n        a, b = 0, 1\n    else:\n        raise ValueError(\"The provided polynomial does not change signs between 0 and 1, suggesting no root in this interval.\")\n\n    # Bisection method to find a root\n    while b - a > 1e-6:  # Precision threshold for the root\n        mid = (a + b) / 2\n        mid_val = eval_poly(mid)\n        if mid_val == 0:\n            return mid  # Found exact root\n        elif eval_poly(a) * mid_val < 0:\n            b = mid\n        else:\n            a = mid\n    return (a + b) / 2  # Return midpoint as the best estimate of the root"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values_at_indices = [l[i] for i in indices]\n    sorted_values = sorted(values_at_indices)\n\n    new_list = l.copy()\n    for i, index in enumerate(indices):\n        new_list[index] = sorted_values[i]\n\n    return new_list\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n\n# Test the function with the given example\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n\n# Test cases\nprint(max_element([1, 2, 3]))  # 3\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\nprint(fizz_buzz(50)) # 0\nprint(fizz_buzz(78)) # 2\nprint(fizz_buzz(79)) # 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    \n    result = []\n    for i, value in enumerate(l):\n        if i % 2 == 0:\n            result.append(even_indices.pop(0))\n        else:\n            result.append(value)\n    \n    return result\n\n# Test cases\nprint(sort_even([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\ndef prime_fib(n: int):\n    count, i = 0, 0\n    while count < n:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)\n\n# Test cases\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    # Each car going left to right will collide with each car going right to left.\n    # Therefore, the total number of collisions is the square of the number of cars in each group.\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))  # [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n\n# Test cases\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Find the length of the list\n    n = len(l)\n    \n    # Calculate the index of the middle element(s)\n    mid = n // 2\n    \n    # Check if the list has an odd or even number of elements\n    if n % 2 == 0:\n        # If even, return the average of the two middle elements\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        # If odd, return the middle element\n        return l[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    # Remove any non-alphanumeric characters and convert to lowercase\n    text = ''.join(filter(str.isalnum, text.lower()))\n    \n    # Check if the string is equal to its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    \n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    \n    return result\n\n# Test cases\nprint(modp(3, 5))    # Output: 3\nprint(modp(1101, 101))  # Output: 2\nprint(modp(0, 101))   # Output: 1\nprint(modp(3, 11))   # Output: 8\nprint(modp(100, 101)) # Output: 1"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result\n\n# Test cases\nprint(remove_vowels(''))          # Expected: ''\nprint(remove_vowels(\"abcdef\\nghijklm\"))  # Expected: 'bcdf\\nghjklm'\nprint(remove_vowels('abcdef'))      # Expected: 'bcdf'\nprint(remove_vowels('aaaaa'))       # Expected: ''\nprint(remove_vowels('aaBAA'))       # Expected: 'B'\nprint(remove_vowels('zbcd'))        # Expected: 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\n# Test cases\nprint(below_threshold([1, 2, 4, 10], 100))  # Should print True\nprint(below_threshold([1, 20, 4, 10], 5))  # Should print False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0.replace(\" \", \"\")) == sorted(s1.replace(\" \", \"\"))\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))  # True\nprint(same_chars('dddddddabc', 'abcd'))  # True\nprint(same_chars('eabcd', 'dddddddabc'))  # False\nprint(same_chars('abcd', 'dddddddabce'))  # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n# Test cases\nprint(fib(10)) # Output: 55\nprint(fib(1))  # Output: 0\nprint(fib(8))  # Output: 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))       # False\nprint(correct_bracketing(\"<>\"))      # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))    # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    \n    direction = l[1] - l[0]\n    for i in range(2, len(l)):\n        if direction == 0:\n            direction = l[i] - l[i-1]\n            continue\n        if (direction > 0 and l[i] < l[i-1]) or (direction < 0 and l[i] > l[i-1]):\n            return False\n    \n    return True\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    result = list(set(l1) & set(l2))\n    result.sort()\n    return result\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    # Initialize the largest prime factor to the smallest prime number\n    largest_prime = 2\n    \n    # Divide n by 2 until it becomes odd\n    while n % 2 == 0:\n        n //= 2\n        \n    # Start checking for prime factors from 3 onwards, with a step of 2 (to only check odd numbers)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            largest_prime = i\n            n //= i\n        else:\n            i += 2\n            \n    # If n is still greater than 2, it means n itself is a prime number and hence the largest prime factor\n    if n > 2:\n        largest_prime = n\n        \n    return largest_prime\n\n# Test cases\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n\n# Test cases\nprint(sum_to_n(30))  # Output: 465\nprint(sum_to_n(100))  # Output: 5050\nprint(sum_to_n(5))   # Output: 15\nprint(sum_to_n(10))  # Output: 55\nprint(sum_to_n(1))   # Output: 1"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"(\"))       # False\nprint(correct_bracketing(\"()\"))      # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))    # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * xs[n] for n, i in enumerate(range(1, len(xs)))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    dp = [0, 0, 1]\n    for i in range(3, n+1):\n        dp.append(dp[-1] + dp[-2] + dp[-3])\n    \n    return dp[n]\n\n# Test cases\nprint(fibfib(1)) # 0\nprint(fibfib(5)) # 4\nprint(fibfib(8)) # 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = 0\n    vowels = \"aeiou\"\n    \n    for char in s:\n        if char in vowels:\n            count += 1\n            \n    if s.endswith('y'):\n        count += 1\n    \n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"fly\"))    # 1\nprint(vowels_count(\"crypts\")) # 1\nprint(vowels_count(\"HELLO\"))  # 2\nprint(vowels_count(\"quick\"))  # 1\nprint(vowels_count(\"QUIZ\"))   # 0"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    digits = str(x)\n    num_digits = len(digits)\n    \n    if shift >= num_digits:\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the string\n    apple_orange_count = s.split()\n    apples = int(apple_orange_count[0])\n    oranges = int(apple_orange_count[4])\n\n    # Calculate the number of mango fruits\n    mangoes = n - (apples + oranges)\n\n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19)) # 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3)) # 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even = float('inf')\n    min_index = -1\n    \n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_even:\n            min_even = val\n            min_index = i\n            \n    return [min_even, min_index] if min_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n\n    # Count the frequency of each number in the list\n    frequency = Counter(lst)\n\n    # Find the maximum number that satisfies the condition\n    max_number = -1\n    for num, freq in frequency.items():\n        if freq >= num > max_number:\n            max_number = num\n\n    return max_number"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Append minimum value\n        if sorted_lst:  # If there are still elements left\n            result.append(sorted_lst.pop())  # Append maximum value\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n# Test cases\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is palindromic (balanced)\n    is_balanced = q == q[::-1]\n    \n    # Calculate the sum of its elements\n    total_weight = sum(q)\n    \n    # Return True if it's balanced and the sum is less than or equal to w, otherwise False\n    return is_balanced and total_weight <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def count_chars(lst):\n        return sum(len(s) for s in lst)\n\n    total_chars_lst1 = count_chars(lst1)\n    total_chars_lst2 = count_chars(lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    divisor = 2\n    while a > 1:\n        if a % divisor == 0 and is_prime(divisor):\n            factors.append(divisor)\n            a //= divisor\n        else:\n            divisor += 1\n\n    return len(factors) == 3\n\n# Test example\nprint(is_multiply_prime(30))  # Output: True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        power = int(log(x, n))\n        return n ** power == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    x = int(a ** (1/3))\n    return x ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = set(\"2357BD\")\n    count = sum(1 for digit in num if digit in primes)\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n            \n    return True\n\n# Test cases\nprint(is_happy(\"a\"))     # False\nprint(is_happy(\"aa\"))    # False\nprint(is_happy(\"abcd\"))  # True\nprint(is_happy(\"aabb\"))  # False\nprint(is_happy(\"adb\"))   # True\nprint(is_happy(\"xyy\"))   # False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    # Calculate the count of numbers starting or ending with 1, avoiding double-counting\n    count = 2 * 10**(n-1) - 10**(n-2)\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the number N to binary and count the '1's\n    binary_N = bin(N)[2:]  # [2:] to remove the '0b' prefix\n    sum_of_digits = binary_N.count('1')\n    \n    # Convert the sum_of_digits back to binary\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(\" \")\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return \" \".join(ordered_words)\n\n# Test cases\nprint(anti_shuffle('Hi'))  # Returns: 'Hi'\nprint(anti_shuffle('hello'))  # Returns: 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Returns: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n\n    for i, row in enumerate(lst):\n        coords = [(i, col) for col, val in enumerate(row) if val == x]\n        coords.sort(key=lambda coord: (coord[1], coord[0]), reverse=True)\n        result.extend(coords)\n\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Create a copy of the given array to avoid modifying the original one\n    sorted_array = array.copy()\n\n    # Check if the sum of the first and last elements is odd or even\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        # Sort in descending order if the sum is even\n        sorted_array.sort(reverse=True)\n    else:\n        # Sort in ascending order if the sum is odd\n        sorted_array.sort()\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + (2 * 2)\n            if char.islower():\n                encrypted += chr((shifted - 97) % 26 + 97)\n            else:\n                encrypted += chr((shifted - 65) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique_lst = set(lst)\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.remove(min(unique_lst))\n    return min(unique_lst)"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('. ')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredom_count += 1\n    return boredom_count\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n\n# Test cases\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.isupper():\n                    encoded_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n                else:\n                    encoded_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n\n        encoded_message.append(encoded_char)\n\n    return ''.join(encoded_message)"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    largest_prime = -1\n    \n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n            \n    if largest_prime != -1:\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return None"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n\n    lower = all(k.islower() for k in d.keys())\n    upper = all(k.isupper() for k in d.keys())\n\n    return lower or upper"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n# Test cases\nprint(count_upper('aBCdEf')) # returns 1\nprint(count_upper('abcdefg')) # returns 0\nprint(count_upper('dBBE')) # returns 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stone_levels = [n]\n    while len(stone_levels) < n:\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stone_levels.append(n)\n    return stone_levels[:n]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # Using regex to split the string by either commas or spaces\n    import re\n    words = re.split(r'[ ,]+', s)\n    return words\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # Should output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Should output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n# Test cases\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n\n    return binary_avg"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n\n    for num in x:\n        has_even_digit = False\n        temp_num = num\n\n        while temp_num > 0:\n            digit = temp_num % 10\n            if digit % 2 == 0:\n                has_even_digit = True\n                break\n            temp_num //= 10\n\n        if not has_even_digit:\n            result.append(num)\n\n    return sorted(result)\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    digit_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    valid_digits = [x for x in arr if 1 <= x <= 9]\n    valid_digits.sort()\n    valid_digits.reverse()\n\n    return [digit_names[digit] for digit in valid_digits]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(i):\n        return 1 if i == 1 else i * factorial(i - 1)\n\n    def sum_to_i(i):\n        return sum(range(1, i + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n\n# Test cases\nprint(count_nums([]) == 0)\nprint(count_nums([-1, 11, -11]) == 1)\nprint(count_nums([1, 1, 2]) == 3)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    max_val = max(arr)\n    max_idx = arr.index(max_val)\n    \n    # Check if the maximum value is already at the end or if all elements after max are in non-decreasing order\n    for i in range(max_idx + 1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count_lst1 = lst1.count(0) + lst1.count(2) + lst1.count(4) + lst1.count(6) + lst1.count(8)\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    even_count_lst2 = lst2.count(0) + lst2.count(2) + lst2.count(4) + lst2.count(6) + lst2.count(8)\n    \n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    test_list = test.split()\n    histogram_dict = {}\n    \n    for letter in test_list:\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    \n    max_count = max(histogram_dict.values()) if histogram_dict else 0\n    most_frequent_letters = {k: v for k, v in histogram_dict.items() if v == max_count}\n    \n    return most_frequent_letters"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, string in enumerate(lst):\n        num_odds = sum(int(digit) % 2 != 0 for digit in string)\n        output_string = f\"the number of odd elements {num_odds}n the str{num_odds}ng {num_odds} of the {num_odds}nput.\"\n        result.append(output_string)\n    return result\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_trips = 0\n    for well in grid:\n        water_units = sum(well)\n        trips_for_well = math.ceil(water_units / capacity)\n        total_trips += trips_for_well\n    return total_trips"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\nprint(sort_array([1, 5, 2, 3, 4])) # [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6])) # [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4])) # [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        consonant_count = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                consonant_count += 1\n        return consonant_count\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    closest_vowel = \"\"\n    \n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            closest_vowel = word[i]\n            break\n            \n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    open_count = lst[0].count('(')\n    close_count = lst[0].count(')')\n\n    open_count += lst[1].count('(')\n    close_count += lst[1].count(')')\n\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    \n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(set(odd_numbers))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n    if not (1 <= int(month) <= 12):\n        return False\n\n    if month == '02':\n        if int(year) % 4 == 0 and (int(year) % 100 != 0 or int(year) % 400 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    elif month in ['04', '06', '09', '11']:\n        max_day = 30\n    else:\n        max_day = 31\n\n    if not (1 <= int(day) <= max_day):\n        return False\n\n    if not all(part.isdigit() and len(part) == 2 for part in parts):\n        return False\n\n    return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))  # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    \n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1] or lst.count(lst[i]) > 1:\n            return False\n    \n    return True\n\n# Test cases\nprint(is_sorted([5]))             # True\nprint(is_sorted([1, 2, 3, 4, 5]))   # True\nprint(is_sorted([1, 3, 2, 4, 5]))   # False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start + 1\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n\n    magnitude_sum = 0\n    sign_product = 1\n\n    for num in arr:\n        magnitude_sum += abs(num)\n        if num < 0:\n            sign_product *= -1\n\n    return magnitude_sum * sign_product\n\n# Test cases\nprint(prod_signs([1, 2, 2, -4]))  # Output: -9\nprint(prod_signs([0, 1]))         # Output: 0\nprint(prod_signs([]))            # Output: None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    path = []\n\n    def dfs(x, y, k, cur_path):\n        if k == 0:\n            if not path or cur_path < path:\n                path[:] = cur_path[:]\n            return\n\n        visited[x][y] = True\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                dfs(nx, ny, k-1, cur_path + [grid[nx][ny]])\n        visited[x][y] = False\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, k-1, [grid[i][j]])\n\n    return path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    tribonacci = [1, 3]\n    \n    for i in range(2, n):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n\n    return tribonacci[:n+1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0\n\n# Test cases\nprint(digits(1))    # Output: 1\nprint(digits(4))    # Output: 0\nprint(digits(235))  # Output: 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']' and len(stack) > 0:\n            stack.pop()\n        else:\n            return False\n    \n    return len(stack) > 0\n\n# Test cases\nprint(is_nested('[[]]')) # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]')) # \u279e False\nprint(is_nested('[]')) # \u279e False\nprint(is_nested('[[][]]')) # \u279e True\nprint(is_nested('[[]][[')) # \u279e True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    import math\n    squared_lst = [math.ceil(x) ** 2 for x in lst]\n    return sum(squared_lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    \n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"\")) # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n\n    for num in lst:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n        elif num > 0:\n            if min_pos is None or num < min_pos:\n                min_pos = num\n\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Convert inputs to floats for comparison, handling both . and , as decimal points\n    a_float = float(str(a).replace(',', '.'))\n    b_float = float(str(b).replace(',', '.'))\n\n    # Compare the float representations and return accordingly\n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None\n\n# Test cases\nprint(compare_one(1, 2.5))     # \u279e 2.5\nprint(compare_one(1, \"2,3\"))   # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))      # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 8 or n % 2 != 0:\n        return False\n    return True\n\n# Test cases\nprint(is_equal_to_sum_even(4)) # False\nprint(is_equal_to_sum_even(6)) # False\nprint(is_equal_to_sum_even(8)) # True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    def factorial(x):\n        if x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result\n\n# Test example\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"-\")\n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\")) # \"Example\"\nprint(fix_spaces(\"Example 1\")) # \"Example_1\"\nprint(fix_spaces(\" Example 2\")) # \"_Example_2\"\nprint(fix_spaces(\" Example   3\")) # \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n\n    # Check for exactly one dot and split the filename into two parts\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n\n    name, extension = parts\n\n    # Check the extension\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Check for the substring before the dot\n    if not re.match(r'^[a-zA-Z][a-zA-Z0-9]*$', name):\n        return 'No'\n\n    # Check for no more than three digits\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n            \n        else:\n            result += num\n    return result\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the result of x * n\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    # Check if the result is a whole number\n    return result_num % result_den == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n\n# Test the function with the given example\nprint(get_max_triples(5))  # Output: 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))\n\n# Test cases\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))  # => [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))  # => [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases\nprint(x_or_y(7, 34, 12))  # Should print 34\nprint(x_or_y(15, 8, 5))   # Should print 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i % 2 == 1])\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0])) # Should print 10\nprint(double_the_difference([-1, -2, 0])) # Should print 0\nprint(double_the_difference([9, -2])) # Should print 81\nprint(double_the_difference([0])) # Should print 0\nprint(double_the_difference([])) # Should print 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(a-b) for a, b in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        upper_count = sum(1 for char in extension if char.isupper())\n        lower_count = sum(1 for char in extension if char.islower())\n        return upper_count - lower_count\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # Concatenate b with itself to handle rotations easily\n    b_concat = b + b\n    \n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if b_concat[i:i+len(b)] in a:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides to ensure the longest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    \n    # Check if the sum of the squares of the two shorter sides equals the square of the longest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_count = 0\n    max_word = \"\"\n    for word in words:\n        unique_count = count_unique_chars(word)\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word):\n            max_unique_count = unique_count\n            max_word = word\n\n    return max_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"])) # == \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"])) # == \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])) # == \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n\n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n        return md5_hash\n\n# Test case\nprint(string_to_md5('Hello world'))  # Should print '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Ensure a is less than or equal to b\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Initialize an empty list to store even digits\n    even_digits = []\n    \n    # Loop through the range from start to end (inclusive)\n    for num in range(start, end + 1):\n        # Convert the number to a string to check each digit\n        num_str = str(num)\n        \n        # Check each digit in the number\n        for digit in num_str:\n            # If the digit is even and not already in the list, append it\n            if int(digit) % 2 == 0 and int(digit) not in even_digits:\n                even_digits.append(int(digit))\n    \n    # Sort the list of even digits in ascending order\n    even_digits.sort()\n    \n    return even_digits"}
