{"task_id": "HumanEval/0", "completion": "from typing import List\nimport itertools\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i, j in itertools.combinations(numbers, 2):\n        if abs(i - j) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    temp = []\n    for c in paren_string.replace(' ',''):\n        if c == '(':\n            stack.append(c)\n            temp.append(c)\n        elif c == ')':\n            stack.pop()\n            temp.append(c)\n            if len(stack) == 0:\n                result.append(''.join(temp))\n                temp = []\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    int_part = int(number)\n    return number - int_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # calculate the mean of numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # calculate the absolute difference between each number and the mean, then take the average\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    groups = paren_string.split()\n    depth_levels = []\n    for group in groups:\n        max_depth = depth = 0\n        for c in group:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n        depth_levels.append(max_depth)\n    return depth_levels"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" \n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Calculate sum by using built-in sum function\n    total_sum = sum(numbers)\n    \n    # Calculate product. If the list is empty, return 1\n    total_product = reduce(operator.mul, numbers, 1)\n    \n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_nums = []\n    for i in range(1, len(numbers) + 1):\n        max_nums.append(max(numbers[:i]))\n    return max_nums"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    \n    for i in range(len(string),-1,-1):\n        suffix = string[i:]\n        if suffix == suffix[::-1]: \n            prefix = string[:i] \n            return string + prefix[::-1]\n\n# Testing function\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    result = ''\n    for i in range(max_len):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n# Testing\nprint(string_xor('010', '110')) # '100'"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    else:\n        longest_string = max(strings, key=len)\n        return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    music_dict = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n    }\n    return [music_dict[note] for note in music_string.split()]\n\n# Testing the function\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o')) # Should return: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count, start = 0, 0\n    while start < len(string):\n        pos = string.find(substring, start)   # Find substring from 'start'\n        if pos != -1:                         # If found, increment count and update start\n            count += 1\n            start = pos + 1\n        else:                                 # If not found, break the loop\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Define a dictionary to map from string to integer\n    str_to_int = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \n                  \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    # Define a dictionary to map from integer to string\n    int_to_str = {v: k for k, v in str_to_int.items()}\n    \n    # Split numbers by space to create a list\n    numbers_list = numbers.split()\n    \n    # Convert each word in the list to the corresponding integer\n    num_int_list = [str_to_int[i] for i in numbers_list]\n    \n    # Sort the list of integers\n    num_int_list.sort()\n    \n    # Convert each integer in the list back to the corresponding word\n    sorted_numbers = \" \".join([int_to_str[i] for i in num_int_list])\n    \n    return sorted_numbers"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_difference = sorted_numbers[1] - sorted_numbers[0]\n\n    for i in range(len(sorted_numbers) - 1):\n        difference = sorted_numbers[i+1] - sorted_numbers[i]\n        if difference < min_difference:\n            min_difference = difference\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    return [(x - min_value) / range_value for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if type(value) is int]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" \n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return [n for i, n in enumerate(numbers) if numbers.count(n) == 1]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \n   \"\"\"\n       Concatenate list of strings into a single string\n\n       >>> concatenate([])\n       ''\n       >>> concatenate(['a', 'b', 'c'])\n       'abc'\n  \"\"\"\n\n   return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    \n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while(i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list, x0=0, tol=1e-6, max_iter=100):\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 1e-6.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    x = x0\n    for _ in range(max_iter):\n        y = poly(xs, x)\n        dy = sum((i+1)*coeff*x**i for i, coeff in enumerate(xs[1:]))\n        dx = y / dy if dy else tol\n        x -= dx\n        if abs(dx) < tol:\n            return x\n    return x"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    every_third = [l[i] for i in range(len(l)) if i % 3 == 0]  # Extracting every third value.\n    every_third.sort()  # Sorting the values.\n\n    output_list = l.copy()  # Creating a copy of the original list to avoid modifying it.\n    for i in range(len(output_list)):\n        if i % 3 == 0:  # For every third index, replace it with the sorted value.\n            output_list[i] = every_third.pop(0)\n    return output_list"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if l:\n        return max(l)\n    return None"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = sorted([l[i] for i in range(0, len(l), 2)])\n    return [evens.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode: put last character of each group in front of it. Unless group has fewer elements than 3.\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "import sympy\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    fib = [0, 1]\n    prime_fibs = []\n\n    i = 2\n    while len(prime_fibs) < n:\n        fib.append(fib[i-1] + fib[i-2])\n        if sympy.isprime(fib[i]):\n            prime_fibs.append(fib[i])\n        i += 1\n\n    return prime_fibs[n-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            sum = l[i] + l[left] + l[right]\n            if sum < 0:\n                left += 1\n            elif sum > 0:\n                right -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move at the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    s = set(l)\n\n    for i in s:\n        if -i in s and i != 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    assert 2 <= base < 10, \"base must be between 2 and 9.\"\n\n    if x == 0:\n        return '0'\n    else:\n        result = ''\n        while x > 0:\n            x, remainder = divmod(x, base)\n            result = str(remainder) + result\n        return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"\n    Calculates the n-th number in the fib4 sequence\n\n    Args:\n    n: int: the position in the series to calculate\n\n    Return:\n    int: the n-th number in the fib4 sequence\n    \"\"\"\n\n    # Base cases\n    if n == 0: \n        return 0\n    elif n == 1 or n == 3: \n        return 0\n    elif n == 2: \n        return 2 \n\n    # Placeholder for previous 4 values in the sequence\n    fib4_values = [0, 0, 2, 0]\n\n    # Iteratively compute the fib4 sequence\n    for _ in range(4, n+1):\n        # Accumulate the sum of the last 4 values\n        fib4_next = sum(fib4_values)\n        # Update the stored sequence\n        fib4_values = fib4_values[1:] + [fib4_next]\n    \n    return fib4_values[-1]\n\n# Testing\nprint(fib4(5)) # Should print 4\nprint(fib4(6)) # Should print 8\nprint(fib4(7)) # Should print 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    list_length = len(l)\n    if list_length % 2 == 0:\n        return (l[list_length//2 - 1] + l[list_length//2]) / 2\n    else:\n        return l[list_length//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\" # defining a string containing all vowels (both lower and upper case)\n    return \"\".join([char for char in text if char not in vowels]) # using list comprehension to exclude all vowels"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n       return \"Input should be positive integer!\"\n    elif n == 1:\n       return 0\n    elif n == 2:\n       return 1\n    else:\n       first = 0\n       second = 1\n       for _ in range(2, n):\n           first, second = second, first + second\n       return second"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # The call to set(l1) and set(l2) eliminates duplicates from the lists.\n    # The & operator gives us a set containing the elements that are in both sets.\n    # list() turns the set back into a list.\n    # sorted() gives us the elements in ascending order.\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(num: int):\n        \"\"\"Helper function to check if a number is prime or not.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while (i * i <= num):\n            if (num % i == 0 or num % (i + 2) == 0):\n                return False\n            i += 6\n        return True\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n if is_prime(n) else i"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_count += 1\n        elif bracket == \")\":\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    Implementing derivative of a polynomial\n    \"\"\"\n    # Removing the first element as the derivative of a constant is 0\n    xs = xs[1:]\n    # Multiplying each of the remaining elements with its index. \n    return [i * x for i, x in enumerate(xs, start=1)]"}
{"task_id": "HumanEval/63", "completion": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \"\"\"\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = 0\n    for l in s:\n        if l in 'aeiou':\n            count += 1\n        elif l == 'y' and s[-1] == 'y':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n\n    if shift > length:\n        return x_str[::-1]\n\n    shift = shift % length\n    result = x_str[-shift:] + x_str[:-shift]\n\n    return result"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    words = s.split()\n    number_of_apples = int(words[0])\n    number_of_oranges = int(words[3])\n    return n - number_of_apples - number_of_oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_index = i\n\n    # No even number case\n    if smallest_index == -1:\n        return []\n\t\t\n    return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    num_with_freq = list(set([(x, lst.count(x)) for x in lst]))\n    numbers_that_meet_condition = [x for (x, freq) in num_with_freq if x >= 1 and freq >= x]\n    return max(numbers_that_meet_condition) if numbers_that_meet_condition else -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    res = []\n    while lst:\n        res.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            res.append(max(lst))\n            lst.remove(max(lst))\n    return res"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2.0\n\n    # Calculate the area using Heron's formula and round it to 2 decimal points\n    area = round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n    return area"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    is_palindrome = q == q[::-1]\n    is_light_enough = sum(q) <= w\n    return is_palindrome and is_light_enough"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n\n    while i <= j:\n        if arr[i] != arr[j]:\n            changes += 1\n\n        i += 1\n        j -= 1\n\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(i) for i in lst1)\n    total_chars_lst2 = sum(len(i) for i in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n == 2:\n            return True\n        if n < 2 or n % 2 == 0:\n            return False\n        for current in range(3, int(n ** 0.5) + 1, 2):\n            if n % current == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 101) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif n == 1:\n        return x == 1\n    else:\n        p = n\n        while p < x:\n            p *= n\n        return p == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    cube_root = round(abs(a) ** (1/3))\n    return cube_root**3 == abs(a)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    # Convert the decimal input to a binary string and eliminate the 0b prefix\n    binary_str = str(bin(decimal))[2:]\n    # Add the extra characters\n    binary_str = \"db\" + binary_str + \"db\"\n    return binary_str"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n                return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    import math\n\n    def is_prime(n):\n        if n == 1 or n == 0:\n            return False\n        max_div = math.floor(math.sqrt(n))\n        for i in range(2, 1 + max_div):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (2*(10**(n-1))) - (10**(n-2))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_rep = bin(N)[2:] # Get the binary representation of the number (excluding the 0b prefix)\n    digit_sum = sum(int(digit) for digit in binary_rep) # Count the number of 1's in the binary representation\n    \n    return bin(digit_sum)[2:] # Return the sum as a binary string, and excluding the 0b prefix"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Splitting the string into words.\n    words = s.split(' ')\n    \n    # Sorting each word based on ASCII value of each character.\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Joining the sorted words with spaces.\n    result = ' '.join(sorted_words)\n    \n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    output = []\n    # Loop through each row\n    for outerindex, outerlist in enumerate(lst):\n        row = []\n        # Loop through each column\n        for innerindex, innerlist in enumerate(outerlist):\n            if innerlist == x:\n                row.append((outerindex, innerindex))\n        row = sorted(row, key=lambda x: x[1], reverse=True)\n        output.extend(row)\n    return output"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    _array = array[:]\n    if (array[0] + array[-1]) % 2 == 0:\n        _array.sort(reverse=True)\n    else:\n        _array.sort()\n    return _array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_s = ''\n    for char in s:\n        if char.isalpha():\n            ascii_start = ord('a') if char.islower() else ord('A')\n            new_char = chr((ord(char) - ascii_start + 4) % 26 + ascii_start)\n            encrypted_s += new_char\n        else:\n            encrypted_s += char\n    return encrypted_s"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences by delimiters\n    sentences = [s.strip() for s in re.split(r'[.?!]', S)]\n\n    # Count the number of sentences that starts with 'I'\n    return sum(1 for s in sentences if s.startswith('I'))"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int): # checks if all numbers are integers\n        if x == y + z or y == x + z or z == x + y: # checks if any one of the numbers is equal to sum of the other two\n            return True \n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    output = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiouy':\n                letter = chr((ord(char.lower()) + 2 - 97) % 26 + 97)\n                output += letter.upper() if char.isupper() else letter.lower()\n            else:\n                output += char.lower() if char.isupper() else char.upper()\n        else:\n            output += char\n    return output"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    else:\n        all_lower = all(map(str.islower, dict.keys()))\n        all_upper = all(map(str.isupper, dict.keys()))\n        string_keys = all(isinstance(key, str) for key in dict.keys())\n        \n        return (all_lower or all_upper) and string_keys"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        elif num <= 3:\n            return True\n        elif num%2 == 0 or num%3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num%i == 0 or num%(i + 2) == 0:\n                return False\n            i += 6\n        return True\n \n    return [x for x in range(2, n) if is_prime(x)]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \"\"\"\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n   \n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):  # iterating over string with step size 2(only even indices)\n        if s[i] in vowels:  # checking if character is an uppercase vowel\n            count += 1       # increment count if condition is True\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert string to float\n    value_float = float(value)\n    \n    # Round the float value away from zero.\n    if value_float > 0:\n        return int(value_float) if (value_float - int(value_float)) < 0.5 else int(value_float)+1\n    else: \n        return int(value_float) if (value_float - int(value_float)) > -0.5 else int(value_float)-1"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = list(range(n, n * 2 if n % 2 == 0 else n * 2, 2))\n    return result"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # Replacing commas with spaces so we have a unified separator for split\n    s = s.replace(',', ' ')\n\n    # Splitting the resulting string into words\n    words = s.split()\n\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Check if y is less than x, if so return -1\n    if y < x:\n        return -1\n\n    # If y is even, return y.\n    # If y is odd, return y-1 (unless y-1 is less than x, then return -1)\n    return y if y % 2 == 0 else y - 1 if y - 1 >= x else -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    # Check the condition first.\n    if n > m:\n        return -1\n    \n    # Calculate the average.\n    avg = round((n + m) / 2)\n    \n    # Return the binary representation.\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    # filter numbers that don't have even digits\n    no_even_digits = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # return the sorted list\n    return sorted(no_even_digits)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # store names corresponding to numbers\n    names = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n\n    # considering only numbers between 1 and 9 (inclusive), then reverse it\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n\n    # replace each number by its corresponding text\n    return [names[i] for i in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(i):\n        if i == 1 or i == 0:\n            return 1\n        else:\n            return i*factorial(i-1)\n    def sum_nums(i):\n        return sum(range(1, i+1))\n\n    return [factorial(i) if i%2==0 else sum_nums(i) for i in range(n)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        # Converts the number to a string and compare it to its reversed version\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num<0:\n            num *= -1\n            digit_sum = -1*(sum(int(digit) for digit in str(num)))\n        else:\n            digit_sum = sum(int(digit) for digit in str(num))\n            \n        if digit_sum > 0:\n            count +=1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:  # If the array is empty\n        return True\n    list_sorted = sorted(arr)\n    for i in range(len(arr)):\n        if arr == list_sorted:\n            return True\n        # Perform right shift operation\n        last_element = arr.pop(len(arr) - 1)\n        arr.insert(0, last_element)\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    num_of_odd_in_lst1 = len(list(filter(lambda x: x % 2 != 0, lst1)))\n    num_of_even_in_lst2 = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    if num_of_odd_in_lst1 <= num_of_even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    all_counts = Counter(test.split())\n    max_count = max(all_counts.values(), default=0)\n    max_items = {k: v for k, v in all_counts.items() if v == max_count}\n    return max_items"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    for char in c:\n        s = s.replace(char, '')\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i in lst:\n        str = i\n        count = sum(1 for i in str if int(i) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    n = len(nums)\n    min_sum = float('inf')\n\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += nums[j]\n            min_sum = min(min_sum, curr_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    operations = 0\n    total_water_units = sum(sum(row) for row in grid)\n    while total_water_units > 0:\n        current_capacity = capacity\n        for row in grid:\n            if current_capacity <= 0:\n                break\n            for index in range(len(row)):\n                if row[index] == 1 and current_capacity > 0:\n                    row[index] = 0\n                    current_capacity -= 1\n                    total_water_units -= 1\n        operations += 1\n    return operations"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array based on the number of ones in their binary representation\n    # and if they have the same number of ones, by their decimal value\n    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = []\n    for word in words:\n        cnt = 0\n        for char in word:\n            if char in consonants:\n                cnt += 1\n        if cnt == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    word = word[::-1]\n    \n    for i in range(1,len(word)-1):\n        if (word[i] in vowels) and (word[i-1] not in vowels) and (word[i+1] not in vowels):\n            return word[i]\n            \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    open_parentheses_1 = s1.count('(')\n    close_parentheses_1 = s1.count(')')\n    open_parentheses_2 = s2.count('(')\n    close_parentheses_2 = s2.count(')')\n\n    if (open_parentheses_1 > close_parentheses_1) and (close_parentheses_2 >= open_parentheses_2):\n        return 'Yes'\n    elif (open_parentheses_1 == close_parentheses_1) and (open_parentheses_2 == close_parentheses_2):\n        return 'Yes'\n    elif (close_parentheses_1 > open_parentheses_1) and (open_parentheses_2 >= close_parentheses_2):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n        \"\"\"\n        Given an array arr of integers and a positive integer k, return a sorted list \n        of length k with the maximum k numbers in arr.\n        \"\"\"\n        # Sorting the array in reverse (i.e., in descending order)\n        arr.sort(reverse=True)\n        \n        # Get the maximum k numbers\n        max_nums = arr[:k]\n        \n        # Sorting the maximum numbers in ascending order before returning\n        max_nums.sort()\n        \n        return max_nums"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    return sum(i for i in arr[:k] if i < 100)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz = []\n    while n != 1:\n        if n % 2 == 1:  # odd number\n            collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    collatz.append(1)  # add 1 which is the end of every Collatz sequence\n    return sorted(collatz)"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        # Trying to convert the string to a date object\n        d = datetime.strptime(date, '%m-%d-%Y')\n        \n        # Validating the day\n        if d.month in [1,3,5,7,8,10,12]:\n            if not 1 <= d.day <= 31:\n                return False\n        elif d.month in [4,6,9,11]:\n            if not 1 <= d.day <= 30:\n                return False\n        elif d.month == 2:\n            if not 1 <= d.day <= 29:\n                return False\n\n        # If the code reaches this point, the date is valid\n        return True\n    except ValueError: \n        # This means the string couldn't be converted to a date, so it's not valid\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    # Split the string on whitespace\n    if ' ' in txt:\n        return txt.split()\n\n    # Split the string on comma\n    elif ',' in txt:\n        return txt.split(',')\n\n    # Count the number of lower-case letters with odd order\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    \n    if lst == sorted_lst:\n        if len(lst) == len(set(lst)):\n            return True\n        elif lst.count(max(lst, key = lst.count)) > 2:\n            return False\n        else:\n            return True\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n == 1 or n == 0: return False\n        for i in range(2, math.isqrt(n) + 1):\n            if n % i == 0: return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    # If the array is empty, return None\n    if len(arr) == 0:\n        return None\n\n    # Initialize variables for the product of signs and the sum of magnitudes\n    prod_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        # Calculate the sum of magnitudes\n        sum_of_magnitudes += abs(num)\n\n        # Calculate the product of signs\n        if num < 0:\n            prod_of_signs *= -1\n        elif num > 0:\n            prod_of_signs *= 1\n        else:\n            prod_of_signs = 0\n\n    return prod_of_signs * sum_of_magnitudes"}
{"task_id": "HumanEval/129", "completion": "from typing import List\nimport heapq\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    # information needed for BFS, including current position, path followed and current length of path\n    start_nodes = [(grid[i][j], -k, [grid[i][j]], (i, j)) for i in range(N) for j in range(N)]\n    heapq.heapify(start_nodes)\n    # steps for moving to neighbours\n    moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    while start_nodes:\n        _, remaining_len, path, (x, y) = heapq.heappop(start_nodes)\n        # check if path length k is reached\n        if remaining_len == -1:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            # check if new cell is within the grid\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path.copy()\n                new_path.append(grid[nx][ny])\n                heapq.heappush(start_nodes, (new_path, remaining_len+1, new_path, (nx, ny)))\n\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \n    # Base condition\n    tri_list = [0, 3, 2]\n\n    # Start from the 3rd term\n    for i in range(3, n+1):\n\n        # If the index is even\n        if i % 2 == 0:\n            tri_list.append(1 + i / 2)\n        else:  # If the index is odd\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[min(i + 1, n)])\n\n    # Return the final list\n    return tri_list[1:n+2]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    odd_digits = [int(i) for i in str(n) if int(i) % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    \"\"\"\n    Returns true if and only if the input string contains a valid subsequence of brackets where at least one bracket in the subsequence is nested.\n    \"\"\"\n    counter = 0\n    nested = False\n    for bracket in string :\n        if bracket == '[' :\n            counter += 1\n        else:\n            if counter > 1:\n                nested = True\n            if counter == 0 :\n                return False\n            else:\n                counter -= 1\n    if counter != 0 :\n        return False\n    return nested\n\n# Testing\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n\n    if not neg_ints:\n        maximum_neg = None\n    else:\n        maximum_neg = max(neg_ints)\n        \n    if not pos_ints:\n        minimum_pos = None\n    else:\n        minimum_pos = min(pos_ints)\n        \n    return (maximum_neg, minimum_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == str:\n        try:\n            a_real = float(a.replace(\",\",\".\"))\n        except ValueError:\n            return \"Invalid input in a\"\n    else:\n        a_real = float(a)\n\n    if type(b) == str:\n        try:\n            b_real = float(b.replace(\",\",\".\"))\n        except ValueError:\n            return \"Invalid input in b\"\n    else:\n        b_real = float(b)\n        \n    if a_real == b_real:\n        return None\n    elif a_real > b_real:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 8 or n % 2 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n\n    def standard_factorial(n):\n        \"\"\"Compute the standard factorial of n.\"\"\"\n        return math.prod(range(1, n+1))\n    \n    return math.prod(standard_factorial(i) for i in range(1, n+1))"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Replace all the consecutive spaces with -\n    text = re.sub(' {2,}', '-', text)\n    # Replace all the remaining single spaces with _\n    text = re.sub(' ', '_', text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n    digits = sum(character.isdigit() for character in file_name)\n    if digits > 3:\n        return 'No'\n    dot_count = file_name.count('.')\n    if dot_count != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not re.match('^[A-Za-z]', name):\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate over the list with index\n    for i in range(len(lst)):\n        # Check if index is a multiple of 4 and not a multiple of 3\n        if i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3   # Cube of the integer at the index\n        # Check if index is a multiple of 3\n        elif i % 3 == 0:\n            total += lst[i]**2   # Square of the integer at the index\n        else:\n            total += lst[i]      # Add unmodified value\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sqr = int(n**0.5) + 1\n        for divisor in range(3, sqr, 2):\n            if n % divisor == 0:\n                return False\n        return True\n\n    words = sentence.split(' ')\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    from fractions import Fraction\n    x = Fraction(x)\n    n = Fraction(n)\n  \n    result = x * n\n    \n    return result.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(abs(num))))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0 \n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if int(str_num[0])%2 != 0 and int(str_num[-1])%2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    if n < 3:\n        return 0\n\n    a = [(i * i - i + 1) % 3 for i in range(1, n+1)]\n    count_0 = a.count(0)\n    count_1 = a.count(1)\n    count_2 = a.count(2)\n    \n    # Calculate triples whose sum is multiple of 3.\n    # This includes:\n    # - three numbers whose modulo 3 equals 0\n    # - two numbers whose modulo 3 equals 1 and one number whose modulo 3 equals 2\n    # - two numbers whose modulo 3 equals 2 and one number whose modulo 3 equals 1\n    triples = count_0 * (count_0 - 1) * (count_0 - 2) // 6\n    triples += count_1 * (count_1 - 1) * count_2 // 2\n    triples += count_2 * (count_2 - 1) * count_1 // 2\n\n    return triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    \n    # Define a list of planets sorted by proximity to the sun.\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if the provided planet names are valid.\n    if planet1 not in planets or planet2 not in planets: return ()\n    \n    # Find the indices of planet1 and planet2 in the list of planets.\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    \n    # Swap the indices if planet1 is farther from the Sun than planet2.\n    if index1 > index2: index1, index2 = index2, index1\n    \n    # Return a tuple of the planets between planet1 and planet2.\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    sorted_lst = sorted([string for string in lst if len(string) % 2 == 0])\n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n < 2:  # less than 2 is not prime.\n        return y\n    for i in range(2, n):\n        if n % i == 0:  # is divisible by number other than self and 1.\n            return y\n    return x  # is prime."}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total_sum = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            total_sum += num ** 2\n    return total_sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(a - b) for a, b in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    # Initialize max strength and strongest extension\n    max_strength = -float('inf')\n    strongest_extension = \"\"\n    \n    # Loop through the list of extensions\n    for extension in extensions:\n        \n        # Determine strength of extension\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        \n        # Update max strength and strongest extension if necessary\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[1:] + b[0]\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = str(abs(num))\n    even_count = sum(1 for digit in num if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num if int(digit) % 2 != 0)\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    roman_numeral = \"\"\n\n    for i in range(len(values)):\n        count = number // values[i]\n        number %= values[i]\n\n        roman_numeral += roman_numerals[i] * count\n\n    return roman_numeral"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return min((set(w), w) for w in sorted(words, reverse=True))[1]"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    Implementation of the rabbit's eating process based on the given constraints and requirements.\n    \"\"\"\n    total_eaten = number\n    carrots_left = remaining\n\n    # If we need more than the remaining carrots,\n    # We consume all remaining carrots\n    if need > remaining:\n        total_eaten += remaining\n        carrots_left = 0\n    else:\n        # To fullfil our need, we eat the quantity we need\n        total_eaten += need\n        carrots_left -= need\n\n    return [total_eaten, carrots_left]\n\n# Testing function: \nprint(eat(5, 6, 10))  # -> [11, 4]\nprint(eat(4, 8, 9))  # -> [12, 1]\nprint(eat(1, 10, 10))  # -> [11, 0]\nprint(eat(2, 11, 5))  # -> [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    # create a string representation of the algebric expression\n    algebric_expression = \"\"\n    for i in range(len(operator)):\n        algebric_expression += str(operand[i]) + operator[i]\n    algebric_expression += str(operand[-1])\n    # evaluate and return the result of the algebric expression\n    return eval(algebric_expression)"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    # Check if the string contains only non-letter characters\n    # If true, reverse the string.\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    # Otherwise,\n    # convert each character to the opposite case and join them together\n    return ''.join(char.swapcase() if char.isalpha() else char for char in s)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    result = hashlib.md5()\n    result.update(text.encode())\n    \n    return result.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # First, we ensure that a is always less than or equal to b.\n    if a > b:\n        a, b = b, a \n    # then, we initialize our result list.\n    result = []\n    # for every number in the range a to b (inclusive)\n    for num in range(a, b + 1):\n        # if the number is even (ie: divisible by 2)\n        if num % 2 == 0:\n            # append it into our result list.\n            result.append(num)\n    # finally, return the result list.\n    return result"}
