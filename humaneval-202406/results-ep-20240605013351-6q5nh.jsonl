{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n\n    return False"}
{"task_id": "HumanEval/1", "completion": "    grouped_parentheses = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            grouped_parentheses.append(current_group)\n            current_group = \"\"\n        else:\n            current_group += char\n\n    if current_group:\n        grouped_parentheses.append(current_group)\n\n    return grouped_parentheses"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n    return balance < 0\n"}
{"task_id": "HumanEval/4", "completion": "    from math import fabs\n    mean = sum(numbers) / len(numbers)\n    deviation_sum = sum(fabs(x - mean) for x in numbers)\n    return deviation_sum / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    paren_count = [0]\n    def inner_parse_nested_parens(paren_string: str) -> None:\n        nonlocal paren_count\n        paren_count[0] += 1\n        for i, char in enumerate(paren_string):\n            if char == '(':\n                inner_parse_nested_parens(paren_string[i:])\n            elif char == ')':\n                paren_count[0] -= 1\n    inner_parse_nested_parens(paren_string)\n    return paren_count"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    result_sum = 0\n    result_product = 1\n\n    if not numbers:\n        return result_sum, result_product\n\n    for num in numbers:\n        result_sum += num\n        result_product *= num\n\n    return result_sum, result_product\n"}
{"task_id": "HumanEval/9", "completion": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "    string = string + '$'\n    longest_palindrome = ''\n    i = 1\n    while i < len(string):\n        # For odd lengthed palindrome\n        left = string[:i]\n        right = string[i:]\n        mid = left[::-1]\n        if right == mid:\n            if i > len(longest_palindrome):\n                longest_palindrome = left + mid\n        # For even lengthed palindrome\n        left = string[:i:i + 2]\n        right = string[i:i + 2:]\n        mid = left[::-1]\n        if right == mid:\n            if i + 2 > len(longest_palindrome):\n                longest_palindrome = left + mid\n        i += 1\n    return string[0:len(longest_palindrome)] + longest_palindrome[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_length = max(len(string) for string in strings)\n    longest_string = [string for string in strings if len(string) == max_length][0]\n\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "    while b!= 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for length in range(1, len(string) + 1):\n        prefixes.append(string[:length])\n    return prefixes[::-1]\n"}
{"task_id": "HumanEval/15", "completion": "    return \" \".join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    string = string.lower()\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "notes = music_string.split()\nbeats = []\nfor note in notes:\n    if note == 'o':\n        beats.append(4)\n    elif note == 'o|':\n        beats.append(2)\n    elif note == '.|':\n        beats.append(1)\n    else:\n        raise ValueError(f\"Invalid note: {note}\")\nreturn beats"}
{"task_id": "HumanEval/18", "completion": "     def how_many_times(string: str, substring: str) -> int:\n        count = 0\n        # your code here\n        for i in range(len(string) - len(substring) + 1):\n            if string[i:i + len(substring)] == substring:\n                count += 1\n        return count"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.split(\" \")\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    return \" \".join([str(x) for x in numbers])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_smaller, closest_larger = None, None\n\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_smaller = numbers[i - 1]\n            closest_larger = numbers[i + 1]\n\n    return closest_smaller, closest_larger\n"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    i = 1\n    while i < n:\n        if n % i == 0:\n            if i > largest_divisor[i - 1]:\n                largest_divisor[i - 1] = i\n        i += 1\n    return largest_divisor[n - 1]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        ascii_code = ord(char)\n        if 97 <= ascii_code <= 122:  # 97 - 122 => 97  100  103  106  109  112  115\n            result += chr(ascii_code - 32)\n        elif ascii_code >= 65 and ascii_code <= 90:  # 65 - 90  =>  65  68  71  74  77  80  83\n            result += chr(ascii_code + 32)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be an even-length list\")\n\n    def bisection(left, right):\n        while right - left > 1e-9:\n            mid = (left + right) / 2\n            if poly(left) * poly(mid) > 0:\n                left = mid\n            else:\n                right = mid\n        return (left + right) / 2\n\n    if xs[-1] > 0:\n        raise ValueError(\"xs must have negative leading coefficient\")\n\n    largest = max(abs(coeff) for coeff in xs)\n    if largest!= xs[-1]:\n        raise ValueError(\"xs must have largest non zero coefficient equal to negative leading coefficient\")\n\n    return bisection(-1, 1)\n"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: x % 3)\n    l[::3] = l[::3][::-1]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count(\"7\") > 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "    l_out = l.copy()\n    for i in range(0, len(l) - 1, 2):\n        l_out[i] = l[i]\n    l_out.sort()\n    for i in range(1, len(l), 2):\n        l_out[i] = l[i]\n    return l_out"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # drop groups with lengths other than 3.\n    groups = [group for group in groups if len(group) == 3]\n    # cycle elements in each group\n    groups = [(group[2:] + group[0:2]) if len(group) == 3 else group for group in groups]\n    # join the groups back together\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "    fib_sequence = [0, 1]\n    while fib_sequence[-1] < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    prime_fib = [fib_seq for fib_seq in fib_sequence if all(fib_seq % i!= 0 for i in range(2, int(fib_seq**0.5) + 1))]\n    return prime_fib[n-1]"}
{"task_id": "HumanEval/40", "completion": "    count = 0\n    slist = []\n\n    for i in l:\n        slist.append(i)\n\n    slist.sort()\n\n    for i in range(len(slist) - 2):\n        left = i + 1\n        right = len(slist) - 1\n\n        while left < right:\n            sum = slist[i] + slist[left] + slist[right]\n\n            if sum == 0:\n                count += 1\n                left += 1\n                right -= 1\n            elif sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return count >= 3\n"}
{"task_id": "HumanEval/41", "completion": "    collisions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i % 2 == 1 and j % 2 == 0:\n                collisions += 1\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/43", "completion": "    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] + l[j] == 0:\n            return True\n        elif l[i] + l[j] > 0:\n            j -= 1\n        else:\n            i += 1\n    return False"}
{"task_id": "HumanEval/44", "completion": "    result = ''\n    while x > 0:\n        rem = x % base\n        result = str(rem) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    fib4 = [0, 0, 2, 0]\n    if n <= 3:\n        return fib4[n]\n    elif n > 3:\n        for _ in range(4, n + 1):\n            fib4.append(fib4[-1] + fib4[-2] + fib4[-3] + fib4[-4])\n    return fib4[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n    Returns:\n        int: The sum of x and y.\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Invalid argument. n must be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    n = len(l)\n    if n <= 1:\n        return True\n\n    for i in range(n - 1):\n        if l[i] > l[i + 1]:\n            return False\n        elif l[i] < l[i + 1]:\n            return True\n\n    return True"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    factors.append(n // i)\n    prime_factors = [factor for factor in factors if all(n % factor!= 0 for factor in factors if factor > 1)]\n    return max(prime_factors)"}
{"task_id": "HumanEval/60", "completion": "    return int((n * (n + 1)) / 2)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    return [i * j for i, j in enumerate(xs[1:], 1)]"}
{"task_id": "HumanEval/63", "completion": "    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        fibfib_n_1 = fibfib(n - 1)\n        fibfib_n_2 = fibfib(n - 2)\n        fibfib_n_3 = fibfib(n - 3)\n        return fibfib_n_1 + fibfib_n_2 + fibfib_n_3"}
{"task_id": "HumanEval/64", "completion": "FIX = \"\"\"\nThe function should ignore case when checking for vowels.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    The function should ignore case when checking for vowels.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiouAEIOUY'\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift >= len(str(x)):\n        shifted_x = str(x)[::-1]\n    else:\n        shifted_x = str(x)[shift:] + str(x)[:shift]\n    return shifted_x"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char) - 64\n    return result"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    num = int(s.split(' ')[0])\n    total = int(s.split(' ')[1])\n    return total - num - 1"}
{"task_id": "HumanEval/68", "completion": "    # Initializing the variables smallest value and its index to None\n    smallest_value = None\n    smallest_index = None\n\n    # Iterating over the array\n    for i in range(len(arr)):\n        # Checking if the current node value is even\n        if arr[i] % 2 == 0:\n            # If the current value is even and None for smallest value and its index, we assign those variables\n            if smallest_value is None or arr[i] < smallest_value:\n                smallest_value = arr[i]\n                smallest_index = i\n\n    # If there is a smallest value, we return the tuple of final values\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    # Else, there are no even values so we return an empty tuple.\n    return []"}
{"task_id": "HumanEval/69", "completion": "    max_count = max([lst.count(i) for i in lst])\n    for i in lst:\n        if lst.count(i) >= max_count and i > 0:\n            return i"}
{"task_id": "HumanEval/70", "completion": "    if lst == []:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    lst.append(min_val)\n    lst.append(max_val)\n    return lst\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    p = (a + b + c) / 2\n    area = round(pow(p * (p - a) * (p - b) * (p - c), 0.5), 2)\n    return area"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    return bool(q == q[::-1] and sum(q) <= w)"}
{"task_id": "HumanEval/73", "completion": "    # Your code goes here\n    if not arr:\n        return 0\n    n = len(arr)\n    # Create a 2D array dp where dp[i][j] is the minimum number of changes required to make the subarray arr[i:j+1] palindromic\n    dp = [[0] * n for _ in range(n)]\n    # Fill in the bottom row of dp\n    for j in range(n):\n        dp[0][j] = j\n    # Fill in the leftmost column of dp\n    for i in range(1, n):\n        dp[i][0] = i\n    # Fill in the rest of the dp array\n    for i in range(1, n):\n        for j in range(1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 2)\n    return dp[n - 1][n - 1]"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # get the total number of characters in lst1\n    total_chars1 = sum(len(x) for x in lst1)\n    # get the total number of characters in lst2\n    total_chars2 = sum(len(x) for x in lst2)\n    # if total_chars1 < total_chars2\n    if total_chars1 < total_chars2:\n        return lst1\n    # elif total_chars1 > total_chars2\n    elif total_chars1 > total_chars2:\n        return lst2\n    # else\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n > 1:\n            for i in range(2, int(n ** 0.5) + 1):\n                if n % i == 0:\n                    return False\n            return True\n        else:\n            return False\n\n    prime_numbers = []\n    for i in range(2, a):\n        if is_prime(i):\n            prime_numbers.append(i)\n\n    for i in prime_numbers:\n        for j in prime_numbers:\n            if i!= j and a % i == 0 and a % j == 0:\n                return False\n\n    return True"}
{"task_id": "HumanEval/76", "completion": "    # Create a variable to store the base raised to the power\n    base_power = n ** int(x)\n\n    # Check if the base raised to the power is equal to the input number x\n    return base_power == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a ** (1. / 3) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for i in range(len(num)):\n        if num[i].isupper():\n            num[i] = num[i].lower()\n        if num[i] in \"0123456789\":\n            continue\n        if is_prime(int(num[i], 16)):\n            prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n\n    consecutive = []\n    for i in range(3):\n        consecutive.append(s[i])\n\n    while len(consecutive) < len(s):\n        consecutive.append(s[i])\n        i += 1\n        if i == len(s):\n            i = 0\n\n    for i in range(len(consecutive) - 1):\n        if consecutive[i] == consecutive[i + 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return [['A+',['4.0'],['3.7',['3.8']]],['A',['4.0','3.7']],['A-',['3.3'],['3.8']],['B+',['3.0','3.5'],['3.9']],['B',['3.0','2.7','3.5','3.9']],['B-',['2.3','2.7'],['2.8','2.9']],['C+',['2.0'],['1.7'],['2.8']],['C',['1.7','2.0'],['1.8','1.9']],['C-',['1.3','1.7'],['1.4','1.6']],['D+',['1.0'],['0.7'],['1.4']],['D',['0.7'],['0.8','0.9'],['1.3']],['D-',['0.0'],['0.7'],['0.8']],['E',['0.0'],['0.0']]]"}
{"task_id": "HumanEval/82", "completion": "    if len(string) <= 1:\n        return False\n\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return sum(1 for i in range(10**(n-1), 10**n) if i//10**(n-1) % 10 == 1 or i % 10 == 1)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(N).count('1')\n"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[0::2] if lst[0]%2!=lst[1]%2 else 0 for i in range(1, len(lst), 2))"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s =''.join(ordered_words)\n    return ordered_s"}
{"task_id": "HumanEval/87", "completion": "    if lst == []:\n        return []\n\n    # Find the index of the row with x in it\n    x_row_index = [i for i, row in enumerate(lst) if x in row]\n    sort_index = sorted(x_row_index, reverse=True)\n\n    # For each row with x in it\n    result = []\n    for row_index in sort_index:\n        # For each column with x in it\n        for col_index, num in enumerate(lst[row_index]):\n            if num == x:\n                result.append((row_index, col_index))\n\n    return result"}
{"task_id": "HumanEval/88", "completion": "    array.sort()\n    if sum(array[0], array[-1]) % 2:\n        array.reverse()\n    return array"}
{"task_id": "HumanEval/89", "completion": "    alfabeto = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for c in s:\n        if c.isalpha():\n            indice = alfabeto.find(c)\n            nueva_posicion = indice + 2*2\n            encrypted += alfabeto[nueva_posicion]\n        else:\n            encrypted += c\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            return lst[i - 1]\n    return None"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    S = S.split('.') + S.split('?') + S.split('!')\n    for i in S:\n        if i.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x,y,z):\n    return bool(x+y == z or y+z == x or x+z == y and isinstance(x,int) and isinstance(y,int) and isinstance(z,int))"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr(ord('a') + vowels.index(char.lower()) + 2)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "def largest_prime_value(lst):\n    from math import sqrt\n    lst = [i for i in lst if i>0]\n    for i in lst:\n        if i < 2:\n            lst.remove(i)\n        elif i > 2:\n            for j in range(2, int(sqrt(i)) + 1):\n                if i % j == 0:\n                    lst.remove(i)\n                    break\n    for i in lst:\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    lst.remove(i)\n                    break\n    largest = max(lst)\n    largest_sum = sum(int(digit) for digit in str(largest))\n    return largest_sum\n"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n\n    all_keys_lower_case = all(key.islower() for key in dict.keys())\n    all_keys_upper_case = all(key.isupper() for key in dict.keys())\n\n    return all_keys_lower_case or all_keys_upper_case"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_up_to(n):\n        result = []\n        for i in range(2, n + 1):\n            if is_prime(i):\n                result.append(i)\n        return result"}
{"task_id": "HumanEval/97", "completion": "    return a%10 * b%10"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    int_value = int(value)\n    diff = abs(int_value - value)\n    if diff == 0:\n        if value >= 0:\n            return int_value + 1\n        else:\n            return int_value - 1\n    return int_value if diff > abs(diff - 1) else int_value + 1"}
{"task_id": "HumanEval/100", "completion": "    return [n, n+1, n+3] if n % 2 == 1 else [n, n+2, n+4]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split(',')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    return bin(int(total/2))[2:]"}
{"task_id": "HumanEval/104", "completion": "    output = []\n    for num in x:\n        split_num = str(num)\n        # Remove any characters except digits\n        num_str = ''.join(e for e in split_num if e.isdigit())\n        # Check if contains an even digit\n        if not any(int(digit) % 2 == 0 for digit in num_str):\n            output.append(num_str)\n    return sorted(output)"}
{"task_id": "HumanEval/105", "completion": "    arr.sort()\n    if 0 <= arr[0] <= 9:\n        result = []\n        while arr[0] <= 9:\n            result.append(digits[arr.pop(0)])\n        return result[::-1]\n    else:\n        return []"}
{"task_id": "HumanEval/106", "completion": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    return len([i for i in range(1, n + 1) if str(i) == str(i)[::-1] and i % 2 == 0]), len([i for i in range(1, n + 1) if str(i) == str(i)[::-1] and i % 2!= 0])"}
{"task_id": "HumanEval/108", "completion": "    def dig_sum(n):\n        return sum(int(digit) for digit in str(abs(n))) if n else 0\n\n    count = sum(1 for num in arr if dig_sum(num) > 0)\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    \n    for i in range(len(arr)):\n        if arr[i] < arr[i + 1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    return \"YES\" if len(even_lst1) == len(lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    result = {}\n    char_list = test.split(\" \")\n    \n    for char in char_list:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    max_count = max(result.values())\n    for key, value in result.items():\n        if value == max_count:\n            if key in result:\n                result[key] += 1\n            else:\n                result[key] = 1\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    result = ''.join(reversed(result))\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst, 1):\n        odd_count = sum(1 for c in s if int(c) % 2!= 0)\n        result.append(\"the number of odd elements {}n the str{} of the {}\".format(odd_count, i, s))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[float('-inf')] * cols for _ in range(rows)]\n    dp[0][0] = grid[0][0]\n\n    for i in range(rows):\n        for j in range(cols):\n            if dp[i][j] == float('-inf'):\n                continue\n            above = i and dp[i-1][j]\n            left = j and dp[i][j-1]\n            dp[i][j] = max(dp[i][j], above, left) + grid[i][j]\n\n    i = rows - 1\n    j = cols - 1\n    steps = 0\n    while i >= 0 and j >= 0:\n        if dp[i][j] == above or dp[i][j] == left:\n            steps += 1\n            dp[i][j] -= 1\n            if dp[i][j] == 0:\n                return steps\n        if dp[i][j] > above:\n            i -= 1\n            steps += 1\n        else:\n            j -= 1\n            steps += 1\n\n    return steps\n"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    for word in words:\n        count = sum(1 for char in word if char.lower() in consonants and char.isalpha())\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    if word == \"\":\n        return \"\"\n    word = word.rstrip(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    word += \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    i = word.find(\"a\")\n    if i == -1:\n        return \"\"\n    while word[i+1] in \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\":\n        i += 1\n    return word[i+1]\n"}
{"task_id": "HumanEval/119", "completion": "    opened_parentheses = []\n    closed_parentheses = []\n\n    for par in lst[0]:\n        if par == '(':\n            opened_parentheses.append(par)\n        elif par == ')':\n            if opened_parentheses and opened_parentheses[-1] == '(':\n                opened_parentheses.pop()\n            else:\n                closed_parentheses.append(par)\n    return 'Yes' if not opened_parentheses else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "Solution:\n    def add_elements(arr, k):\n        summed_elements = sum(int(str(x)) for x in arr[:k])\n        return summed_elements"}
{"task_id": "HumanEval/123", "completion": "    collatz_seq = [n]\n    while collatz_seq[-1]!= 1:\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(collatz_seq[-1] // 2)\n        else:\n            collatz_seq.append(3 * collatz_seq[-1] + 1)\n    return sorted(set(collatz_seq))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    try:\n        year, month, day = map(int, date.split('-'))\n        months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if not date or month < 1 or month > 12 or day < 1 or day > months[month - 1] or year < 1900:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if len(words) == 0:\n        words = txt.split(',')\n    if len(words) == 0:\n        result = 0\n        for char in txt:\n            if ord('a') <= ord(char) <= ord('z') and (ord(char) - ord('a')) % 2!= 0:\n                result += 1\n        return result\n    return words"}
{"task_id": "HumanEval/126", "completion": "    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    # Your code here\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n\n    sign_product = 1\n    sign_sum = 0\n\n    for sign in [1, -1, 0]:\n        if sign == 1:\n            sign_sum += 1\n        elif sign == -1:\n            sign_sum -= 1\n        sign_product *= sign\n\n    return sign_sum * sign_product"}
{"task_id": "HumanEval/129", "completion": "    m, n = len(grid), len(grid[0])\n    def get_neighbors(i, j):\n        neighbors = []\n        if i > 0:\n            neighbors.append((i - 1, j))\n        if i < m - 1:\n            neighbors.append((i + 1, j))\n        if j > 0:\n            neighbors.append((i, j - 1))\n        if j < n - 1:\n            neighbors.append((i, j + 1))\n        return neighbors\n\n    visited = set()\n    min_path = []\n    min_path_value = float('inf')\n\n    def backtrack(i, j, path):\n        nonlocal visited, min_path, min_path_value\n        if i == m - 1 and j == n - 1:\n            value = sum(path)\n            if value < min_path_value:\n                min_path_value = value\n                min_path = path\n            return\n        visited.add((i, j))\n        for neighbor in get_neighbors(i, j):\n            if neighbor not in visited:\n                backtrack(neighbor[0], neighbor[1], path + [grid[i][j]])\n                visited.remove(neighbor)\n\n    backtrack(0, 0, [grid[0][0]])\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "    t = [3]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            t.append(1 + i // 2)\n        else:\n            t.append(t[i - 1] + t[i - 2] + t[i + 1])\n    return t"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "    result = False\n    current_level = 0\n\n    for char in string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n            if current_level < 0:\n                result = True\n\n    return result\n"}
{"task_id": "HumanEval/133", "completion": "def round_up(lst):\n    return [int(ceil(x)) for x in lst]\n\ndef sum_squares(lst):\n    return sum([i**2 for i in round_up(lst)])"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n\n    if txt[-1].isalpha() and not txt[-1] in [\" \", \"\\n\"]:\n        return True\n\n    return False"}
{"task_id": "HumanEval/135", "completion": "    # Check if the array is empty\n    if not arr:\n        return -1\n\n    # Initialize the largest index to -1\n    largest_index = -1\n\n    # Traverse the array\n    for i in range(len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if i!= 0 and arr[i] <= arr[i - 1]:\n            # Update the largest index if a non-greater-than-or-equal element is found\n            largest_index = i\n\n    # Return the largest index found, or -1 if no such element exists\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_count = 0\n    positive_count = 0\n    negative_largest = None\n    positive_smallest = None\n\n    for num in lst:\n        if num > 0:\n            positive_count += 1\n            if positive_smallest is None or num < positive_smallest:\n                positive_smallest = num\n        elif num < 0:\n            negative_count += 1\n            if negative_largest is None or num > negative_largest:\n                negative_largest = num\n\n    if negative_count > 0 and positive_count > 0:\n        return (negative_largest, positive_smallest)\n    elif negative_count > 0:\n        return (negative_largest, None)\n    elif positive_count > 0:\n        return (None, positive_smallest)\n    else:\n        return (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        pass\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    even_sum = []\n    for i in range(2, n, 2):\n        for j in range(2, n - i, 2):\n            for k in range(2, n - i - j, 2):\n                for l in range(2, n - i - j - k, 2):\n                    if i + j + k + l == n:\n                        even_sum.append((i, j, k, l))\n    return even_sum!= []"}
{"task_id": "HumanEval/139", "completion": "    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    result = factorial * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"__\" in text or text.count(\"  \") > 1:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    file_name=file_name.split('.')\n    before_dot=file_name[0]\n    after_dot=file_name[1]\n    if len(file_name)>3 or not after_dot or not before_dot.isalpha():\n        return 'No'\n    elif after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    #Initializing a variable to store the sum\n    total = 0\n    #Iterating through the list\n    for i in lst:\n        #Checking if the index is a multiple of 3\n        if i!= 0 and i%3 == 0:\n            #square the integer entry\n            total += i * i\n        #Checking if the index is a multiple of 4 and not a multiple of 3\n        elif i!= 0 and i%4 == 0 and i%3!= 0:\n            #cube the integer entry\n            total += i * i * i\n    #Returning the sum\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) > 0 and is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)"}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    num = num1 * num2\n    denom = denom1 * denom2\n    gcd_denom = gcd(denom1, denom2)\n    if denom / gcd_denom == num / gcd_denom:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        res = 0\n        while(n!=0):\n            res += n % 10\n            n //= 10\n        return res  \n\n    nums.sort(key=lambda x: (digit_sum(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0 and nums[0] % 2!= 0 and num % 10!= 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    # Check if planet1 and planet2 are correct planet names\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    # Find the index of planet1 and planet2 in the planets list\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    # Sort the planets between planet1 and planet2 by proximity to the sun\n    planets_sorted = planets[planet1_index + 1:planet2_index]\n    return tuple(planets_sorted)"}
{"task_id": "HumanEval/149", "completion": "    lst.sort(key=lambda x: (len(x), x))\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2!= 0 and n > 1:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2!= 0:\n                result += num ** 2\n    return(result)"}
{"task_id": "HumanEval/152", "completion": "    differences = []\n    for i in range(len(game)):\n        differences.append(abs(game[i]-guess[i]))\n    return differences"}
{"task_id": "HumanEval/153", "completion": "    extensions.sort(key=lambda x: (len(x) - sum(1 for c in x if c.isupper()), x))\n    return f\"{class_name}.{extensions[0]}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if b in a or b in a + a or b in a + a + a:\n        return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "    roman_numeral_values = [1000, 900,  500, 400,  100,  90, 50, 40,  10,   9,  5,   4,   1]\n    roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    num_dict = {roman_numerals[i]: roman_numeral_values[i] for i in range(0, 13)}\n\n    def int_to_roman_helper(num):\n        roman_numeral = \"\"\n        while(num >= 1000):\n            roman_numeral += \"m\"\n            num -= 1000\n        for key, value in num_dict.items():\n            while(num >= value):\n                roman_numeral += key\n                num -= value\n        return roman_numeral\n\n    return int_to_roman_helper(number).lower()\n"}
{"task_id": "HumanEval/157", "completion": "    if a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    max_word = \"\"\n\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        need -= remaining\n        return [number + need, 0]\n    else:\n        return [number + need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    # Your code here\n    result = operand[0]\n    for i in range(1, len(operand)):\n        op = operator[i - 1]\n        num = operand[i]\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if 'a' <= s[i] <= 'z' or 'A' <= s[i] <= 'Z':\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    if a > b:\n        return []\n    for i in range(a, b + 1):\n        num_str = str(i)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n    result.sort()\n    return result"}
