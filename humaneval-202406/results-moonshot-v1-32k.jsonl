{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    groups = []\n    for char in paren_string:\n        if char == \"(\":\n            if not stack:\n                groups.append(char)\n            else:\n                groups[-1] += char\n            stack.append(char)\n        else:\n            groups[-1] += char\n            stack.pop()\n            if not stack:\n                groups[-1] = groups[-1][1:]\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers, delimeter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split(' ')\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)\n        for i in numbers:\n            return (i * sum_product(numbers[1:]))"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers):\n    max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        max_list.append(current_max)\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join([str(i) for i in range(n + 1)])"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    music_string = music_string.replace(' ', '')  # Remove spaces\n    notes = music_string.split('o')  # Split by 'o'\n    beats = []\n    for note in notes:\n        if note == '':\n            beats.append(4)  # Whole note\n        elif note == '|':\n            beats.append(2)  # Half note\n        elif note == '.|':\n            beats.append(1)  # Quarter note\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(' '), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < closest_pair[1] - closest_pair[0]:\n            closest_pair = (numbers[i - 1], numbers[i])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers):\n    seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    return -xs[1] / xs[0]"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    third_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = third[third_index]\n            third_index += 1\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return [l[i] if i % 2 else sorted([l[i for i in range(len(l)) if i % 2 == 0]])[i // 2] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        e = a + b + c + d\n        a, b, c, d = b, c, d, e\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all([i < t for i in l])"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    return l == sorted(l) or l == sorted(l, key=int, reverse=True)"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        d = a + b + c\n        a, b, c = b, c, d\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    for i in s.lower():\n        if i in 'aeiou':\n            count += 1\n    if s.lower()[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    n = len(s)\n    shift = shift % n\n    return s[shift:] + s[:shift] if shift != 0 else s[::-1]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n\treturn sum((ord(c) for c in s if c.isupper()))"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    return n - eval(s.replace('apples', '1').replace('oranges', '1').replace(' and ', '+'))"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_val = float('inf')\n    min_idx = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_idx = i\n    return [min_val, min_idx] if min_val < float('inf') else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    lst = Counter(lst)\n    return max((k for (k, v) in lst.items() if k <= v), default=-1)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    i = 0\n    j = len(lst) - 1\n    result = []\n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n            result.append(lst[j])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    count = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return lst1 if sum((len(x) for x in lst1)) <= sum((len(x) for x in lst2)) else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    from math import sqrt\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 3:\n                return False\n    return count == 3"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    for i in range(100):\n        if n ** i == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    return round(a ** (1. / 3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n\tprime_hex = ['2', '3', '5', '7', 'B', 'D']\n\treturn sum([1 for i in num if i in prime_hex])"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and len(set(s[i: i + 3])) == 3 for i in range(len(s) - 2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return [\"A+\" if g >= 4.0 else \"A\" if g > 3.7 else \"A-\" if g > 3.3 else \"B+\" if g > 3.0 else \"B\" if g > 2.7 else \"B-\" if g > 2.3 else \"C+\" if g > 2.0 else \"C\" if g > 1.7 else \"C-\" if g > 1.3 else \"D+\" if g > 1.0 else \"D\" if g > 0.7 else \"D-\" if g > 0.0 else \"E\" for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return 2 * (10 ** (n - 1) - 1)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum([int(i) for i in str(N)]))[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(sorted(word, key=lambda c: ord(c)) for word in s.split(' '))"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for (i, row) in enumerate(lst) for j in range(len(row) - 1, -1, -1) if row[j] == x], key=lambda t: (t[0], -t[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) < 2:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return s.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'cdefghijklmnopqrstuvwxyzab'))"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    lst = set(lst)\n    lst = list(lst)\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    boredom_count = 0\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += vowels[(vowels.index(char) + 2) % 5].upper()\n        elif char.lower() in vowels:\n            new_message += vowels[(vowels.index(char.lower()) + 2) % 5]\n        else:\n            new_message += char.swapcase()\n    return new_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    return sum(map(int, str(max(filter(is_prime, lst)))))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    return bool(d) and all((type(k) == str and (k.islower() for k in d.keys())) or (type(k) != str for k in d.keys()))"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for possiblePrime in range(2,n):\n        for num in range(2, possiblePrime):\n            if possiblePrime % num == 0:\n                break\n        else:\n            primes.append(possiblePrime)\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a % 10 * b % 10"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    return int(value + (value >= 0))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(result[i-1] + 2)\n        else:\n            result.append(result[i-1] + 2)\n    return result"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [x.strip() for x in s.replace(',', ' ').split(' ') if x]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return '0b' + bin(avg)[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([i for i in x if not any([j % 2 == 0 for j in str(i)])])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    numbers = [str(n) for n in sorted(set(arr)) if 0 < n < 10]\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][:: -1][:len(numbers)] if numbers else []"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(i):\n        result = 1\n        for j in range(1, i + 1):\n            result *= j\n        return result\n\n    def sum_to_i(i):\n        return sum(range(1, i + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if str(num)[0] == '-':\n            num = -int(str(num)[1:])\n            if sum([int(i) for i in str(num)]) > 0:\n                count += 1\n        else:\n            if sum([int(i) for i in str(num)]) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            if sorted(arr) == arr[i + 1:] + arr[:i + 1]:\n                return True\n            else:\n                return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd1 = [i for i in lst1 if i % 2 != 0]\n    even2 = [i for i in lst2 if i % 2 == 0]\n    if len(odd1) > len(even2):\n        return 'NO'\n    return 'YES'"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    count = {}\n    for i in test.split():\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    max = 0\n    for i in count:\n        if count[i] > max:\n            max = count[i]\n    result = {}\n    for i in count:\n        if count[i] == max:\n            result[i] = max\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n\ts = ''.join([i for i in s if i not in c])\n\trev = s[::-1]\n\treturn (s, s == rev)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for c in s if int(c) % 2), sum(1 for c in s if int(c) % 2), sum(1 for c in s if int(c) % 2), sum(1 for c in s if int(c) % 2)) for s in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = nums[0]\n    current_sum = nums[0]\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    return sum([sum(i) for i in grid]) // capacity"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n\treturn sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    a = lst[0].count('(')\n    b = lst[0].count(')')\n    c = lst[1].count('(')\n    d = lst[1].count(')')\n    if a + c == b + d and a - b <= c - d:\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0])"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if x < 100])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        return 1 <= day <= 31\n    if month in (4, 6, 9, 11):\n        return 1 <= day <= 30\n    if month == 2:\n        return 1 <= day <= 29\n    return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n            if ord(i) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return sorted(lst) == sorted(set(lst)) == lst"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        if num < 0:\n            product *= -1\n        elif num == 0:\n            return 0\n    return product * sum([abs(num) for num in arr])"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    visited = set()\n    pq = [(grid[0][0], 0, 0, [grid[0][0]])]\n    while pq:\n        (val, i, j, path) = heappop(pq)\n        if len(path) == k:\n            return path\n        for (ni, nj) in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= ni < N and 0 <= nj < N and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                heappush(pq, (grid[ni][nj], ni, nj, path + [grid[ni][nj]]))\n    return []"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    trib = [0, 1, 3]\n    for i in range(3, n + 2):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    return trib"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n\tstack = []\n\tfor char in string:\n\t\tif char == '[':\n\t\t\tstack.append(char)\n\t\telif char == ']':\n\t\t\tif len(stack) > 0:\n\t\t\t\tstack.pop()\n\t\t\telse:\n\t\t\t\treturn False\n\treturn len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum((el + 1) ** 2 - 1 for el in map(lambda x: int(x + 1) - 1, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == '':\n        return False\n    elif txt[-1].isalpha() and txt[-2] == ' ':\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest = None\n    smallest = None\n    for i in lst:\n        if i < 0:\n            if largest is None or i > largest:\n                largest = i\n        elif i > 0:\n            if smallest is None or i < smallest:\n                smallest = i\n    return (largest, smallest)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = float(a) if isinstance(a, str) else a\n    b = float(b) if isinstance(b, str) else b\n    if a > b:\n        return a if isinstance(a, (int, float)) else str(a)\n    elif b > a:\n        return b if isinstance(b, (int, float)) else str(b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n > 6"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i ** i\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return ' '.join(['_' * (x == ' ') or x for x in text.split()]).replace('__', '-')"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    pattern = re.compile(r'^[A-Za-z](\\D*?)(\\d{0,3})(\\.exe|.txt|.dll)$')\n    return 'Yes' if pattern.match(file_name) else 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum((n**2 if i % 3 == 0 else n**3 if i % 4 == 0 else n for (i, n) in enumerate(lst)))"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    return Fraction(x) * Fraction(n).denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) // 10 % 2 == 1 and abs(num) % 10 % 2 == 1 and num > 10:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    try:\n        i1, i2 = planets.index(planet1), planets.index(planet2)\n    except:\n        return ()\n    if i1 > i2:\n        i1, i2 = i2, i1\n    return planets[i1 + 1:i2]"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum([x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1])"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n\treturn [abs(a - b) for (a, b) in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest = extensions[0]\n    max_strength = -100\n    for ext in extensions:\n        strength = ext.upper().count('A') - ext.lower().count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest = ext\n    return class_name + '.' + strongest"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return b in a + a"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=lambda w: (len(set(w)), w))"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    carrots = number + need\n    if carrots > remaining:\n        carrots = number + remaining\n    return [carrots, remaining - (carrots - number)]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i + 1])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n\ts = list(s)\n\tif any((c.isalpha() for c in s)):\n\t\tfor i in range(len(s)):\n\t\t\tif s[i].isalpha():\n\t\t\t\ts[i] = s[i].upper() if s[i].islower() else s[i].lower()\n\t\treturn ''.join(s)\n\telse:\n\t\treturn ''.join(reversed(s))"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]"}
