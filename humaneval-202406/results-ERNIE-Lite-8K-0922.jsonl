{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    parentheses_stack = []  # \u7528\u4e8e\u8ffd\u8e2a\u6240\u6709\u5f00\u653e\u7684\u62ec\u53f7\n    group_strings = []  # \u5b58\u50a8\u5206\u89e3\u540e\u7684\u5b57\u7b26\u4e32\u5217\u8868\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            parentheses_stack.append(char)\n        elif char == ')':\n            if len(parentheses_stack) > 0:\n                # \u5982\u679c\u5f53\u524d\u62ec\u53f7\u4e0e\u6808\u9876\u7684\u62ec\u53f7\u5339\u914d\uff0c\u5219\u5c06\u5f53\u524d\u7ec4\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\uff0c\u5e76\u79fb\u9664\u6808\u9876\u7684\u62ec\u53f7\n                current_group += char\n                group_strings.append(current_group)\n                parentheses_stack.pop()\n            else:\n                # \u5982\u679c\u5f53\u524d\u62ec\u53f7\u4e0d\u5339\u914d\u6808\u9876\u7684\u62ec\u53f7\uff0c\u5219\u8bf4\u660e\u5b58\u5728\u4e0d\u5e73\u8861\u7684\u62ec\u53f7\uff0c\u8fd4\u56de\u9519\u8bef\n                return \"\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5305\u542b\u4e0d\u5e73\u8861\u7684\u62ec\u53f7\"\n        elif char == ' ':  # \u5ffd\u7565\u7a7a\u683c\n            continue\n        else:\n            # \u5176\u4ed6\u5b57\u7b26\u76f4\u63a5\u6dfb\u52a0\u5230\u5f53\u524d\u7ec4\u4e2d\n            current_group += char\n\n    # \u5904\u7406\u5269\u4f59\u7684\u62ec\u53f7\uff0c\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n    while len(parentheses_stack) > 0:\n        current_group += parentheses_stack.pop()\n        group_strings.append(current_group)\n        current_group = ''\n\n    return group_strings"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)  # Convert the number to an integer\n    decimal_part = number - integer_part  # Subtract the integer part from the number\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        if operation == 1:  # Deposit operation\n            balance += operation\n        elif operation == -1:  # Withdrawal operation\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "numbers = [1.0, 2.0, 3.0, 4.0]\nmean_absolute_deviation_score = mean_absolute_deviation(numbers)\nprint(mean_absolute_deviation_score)  # \u8f93\u51fa\uff1a1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])  # \u6dfb\u52a0\u5f53\u524d\u5143\u7d20\u5230\u7ed3\u679c\u5217\u8868\n        if i < len(numbers) - 1:  # \u5982\u679c\u4e0d\u662f\u5217\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n            result.append(delimeter)  # \u5728\u5f53\u524d\u5143\u7d20\u4e0e\u4e0b\u4e00\u4e2a\u5143\u7d20\u4e4b\u95f4\u63d2\u5165delimeter\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []  # \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u62ec\u53f7\u7ec4\u7684\u6df1\u5ea6\n    current_depth = 0  # \u5f53\u524d\u62ec\u53f7\u7ec4\u7684\u6df1\u5ea6\n    open_parentheses = 0  # \u8bb0\u5f55\u5df2\u6253\u5f00\u7684\u62ec\u53f7\u6570\u91cf\n\n    for char in paren_string:\n        if char == \"(\":\n            current_depth += 1\n            open_parentheses += 1\n            depths.append(current_depth)\n        elif char == \")\":\n            open_parentheses -= 1\n            if open_parentheses == 0:\n                current_depth -= 1\n                depths.pop()\n        if current_depth > len(depths):\n            depths.append(current_depth)\n\n    return depths"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # \u521d\u59cb\u5316\u4e24\u4e2a\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u548c\u4e0e\u79ef\n    sum_val = 0\n    product_val = 1\n\n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n\n    # \u8fd4\u56de\u5305\u542b\u548c\u4e0e\u79ef\u7684\u5143\u7ec4\n    return (sum_val, product_val)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:  # \u68c0\u67e5\u8f93\u5165\u5217\u8868\u662f\u5426\u4e3a\u7a7a\n        return []\n\n    result = []  # \u521d\u59cb\u5316\u7ed3\u679c\u5217\u8868\n    n = len(numbers)  # \u83b7\u53d6\u5217\u8868\u957f\u5ea6\n    window_size = n // 2  # \u8bbe\u7f6e\u7a97\u53e3\u5927\u5c0f\u4e3a\u5217\u8868\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u6ce8\u610f\u662f\u5411\u4e0b\u53d6\u6574\n    if n % 2 != 0:  # \u68c0\u67e5\u7a97\u53e3\u5927\u5c0f\u662f\u5426\u4e3a\u5076\u6570\n        return result  # \u4e0d\u662f\u5076\u6570\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u7ed3\u679c\n\n    # \u5f00\u59cb\u904d\u5386\u5217\u8868\u5e76\u66f4\u65b0\u7ed3\u679c\u5217\u8868\n    for i in range(window_size):  # \u5faa\u73af\u5230\u5217\u8868\u4e2d\u95f4\u4f4d\u7f6e\n        max_val = numbers[i]  # \u521d\u59cb\u5316\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\n        for j in range(i + 1, min(i + window_size + 1, n)):  # \u4ece\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u5411\u524d\u904d\u5386\n            max_val = max(max_val, numbers[j])  # \u5982\u679c\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u5f53\u524d\u7a97\u53e3\u7684\u6700\u5927\u503c\uff0c\u66f4\u65b0\u6700\u5927\u503c\n            result.append(max_val)  # \u5c06\u6700\u5927\u503c\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    - Check if the result is a palindrome.\n    \"\"\"\n    # Step 1: Find the longest postfix that is a palindrome\n    palindrome_postfix = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == string[len(string) - i - 1]:\n            palindrome_postfix += string[i]\n        else:\n            break\n\n    # Step 2: Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    result = palindrome_postfix + string[::-1]\n\n    # Step 3: Check if the result is a palindrome\n    return result == result[::-1] and len(result) < len(string) or string"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    xor_result = ''\n    for i in range(len(a)):\n        xor_result += str(int(a[i]) ^ int(b[i]))\n    return xor_result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\u8fd4\u56de\u4e24\u4e2a\u6574\u6570\u7684\u6700\u5927\u516c\u7ea6\u6570\n\n    \u53c2\u6570:\n        a -- \u7b2c\u4e00\u4e2a\u6574\u6570\n        b -- \u7b2c\u4e8c\u4e2a\u6574\u6570\n\n    \u8fd4\u56de:\n        \u4e24\u4e2a\u6574\u6570a\u548cb\u7684\u6700\u5927\u516c\u7ea6\u6570\n\n    \u793a\u4f8b:\n        >>> greatest_common_divisor(3, 5)\n        1\n        >>> greatest_common_divisor(25, 15)\n        5\n    \"\"\""}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u6765\u5b58\u50a8\u6240\u6709\u7684\u524d\u7f00\n    prefixes = []\n\n    # \u4f7f\u7528\u5faa\u73af\u6765\u5c1d\u8bd5\u6dfb\u52a0\u5b57\u7b26\u5230\u524d\u7f00\u4e2d\n    for i in range(len(string)):\n        # \u5c06\u5f53\u524d\u5b57\u7b26\u6dfb\u52a0\u5230\u524d\u7f00\u5217\u8868\u4e2d\n        prefixes.append(string[:i+1])\n\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u6765\u5b58\u50a8\u6570\u5b57\n    result = \"\"\n    \n    # \u4ece0\u5230n\uff08\u5305\u62ecn\uff09\u5faa\u73af\uff0c\u6bcf\u6b21\u5faa\u73af\u6dfb\u52a0\u4e00\u4e2a\u6570\u5b57\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    \n    # \u53bb\u9664\u6700\u540e\u4e00\u4e2a\u7a7a\u683c\n    result = result[:-1]\n    \n    return result"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of.\n\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    \n    # Initialize a set to store distinct characters\n    distinct_characters = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # Convert the character to lowercase if it's uppercase\n        if char.isupper():\n            char = char.lower()\n        # Add the character to the set if it's not already there\n        if char not in distinct_characters:\n            distinct_characters.add(char)\n\n    # Return the number of distinct characters in the string\n    return len(distinct_characters)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_lengths = {}\n    beats = 0\n    notes = music_string.split()\n\n    for note in notes:\n        if note == 'o':\n            note_lengths[note] = 4\n            beats += 4\n        elif note == 'o|':\n            note_lengths[note] = 2\n            beats += 2\n        elif note == '.|':\n            note_lengths[note] = 1\n            beats += 1\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Count the number of occurrences of a substring in a given string. \n    Include overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    return ' '.join(sorted(numbers))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    min_distance = float('inf')\n\n    for i in range(1, len(numbers)):\n        distance = abs(numbers[i] - numbers[i-1])\n        if distance < min_distance:\n            min_distance = distance\n            closest_pair = (numbers[i-1], numbers[i])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [0 if num < min(numbers) else (num - min(numbers)) / (max(numbers) - min(numbers)) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\""}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for divisor in range(1, n):\n        if n % divisor == 0:\n            return divisor\n    return n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    \"\"\"\n    # Initialize a list to store the factors and a counter to keep track of how many times each factor appears\n    factors = [1] * (n // 2)  # pre-allocate space for the factors list to save memory\n    factor_count = [0] * (n // 2)  # Initialize the factor count list with zeros\n\n    # Generate the factors by iterating from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            # If i is a factor, increment its count and add it to the factors list if it hasn't been added yet\n            factor_count[i] += 1\n            if factor_count[i] < n//i:  # If i is a prime factor, add it to the factors list more than once\n                factors[factor_count[i]] = i\n            n = n // i  # Remove i from the original number n\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\"\"\"\n    \n    # \u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e3a\u7a7a\n    if not strings:\n        return ''\n    \n    # \u5c06\u5b57\u7b26\u4e32\u5217\u8868\u8fde\u63a5\u6210\u4e00\u4e2a\u5355\u4e00\u7684\u5b57\u7b26\u4e32\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    if not strings:\n        return []\n    if not prefix:\n        return []\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Check if a given number is prime.\"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" Finds zero point of polynomial.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs)%2 != 0 or max(xs) <= 0:\n        raise ValueError(\"List must have even number of coefficients and largest coefficient must be positive.\")\n    \n    x = None\n    for i in range(len(xs)-1, -1, -1):\n        coef = xs[i]\n        if x is None or coef != 0:\n            if x is None:\n                x = coef / xs[i+1]\n            else:\n                if math.isnan(x):  # This case will only happen when x=coef=0. However it doesn't seem to be part of the question.\n                    raise ValueError(\"Polynomial has no solution.\")\n                else:\n                    return x\n    return None  # If polynomial has no solution, return None."}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5143\u7ec4\u5217\u8868\uff0c\u4ee5\u4fbf\u4e8e\u5feb\u901f\u67e5\u627e\u548c\u6392\u5e8f\n    tuples = [(i, l[i]) for i in range(len(l)) if i % 3 != 0]\n    tuples.sort()  # \u5bf9\u5143\u7ec4\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n    sorted_indices = [i for i, _ in tuples]  # \u5c06\u6392\u5e8f\u540e\u7684\u5143\u7ec4\u7d22\u5f15\u8f6c\u6362\u56de\u5217\u8868\u7d22\u5f15\n\n    # \u5bf9\u5217\u8868\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u4ea4\u6362\n    for i in range(len(l)):\n        if i in sorted_indices:\n            # \u5982\u679c\u5f53\u524d\u7d22\u5f15\u662f\u5df2\u6392\u5e8f\u7684\u7d22\u5f15\u4e4b\u4e00\uff0c\u5219\u4ea4\u6362\u76f8\u5e94\u5143\u7d20\n            l[i], l[sorted_indices[i]] = l[sorted_indices[i]], l[i]\n\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u7528\u4e8e\u5b58\u50a8\u552f\u4e00\u5143\u7d20\n    unique_elements = []\n    \n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for element in l:\n        # \u5982\u679c\u5143\u7d20\u4e0d\u5728unique_elements\u5217\u8868\u4e2d\uff0c\u5219\u6dfb\u52a0\u5230unique_elements\u4e2d\n        if element not in unique_elements:\n            unique_elements.append(element)\n    \n    # \u8fd4\u56de\u552f\u4e00\u5143\u7d20\u7684\u5217\u8868\n    return sorted(unique_elements)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    if not l:  # \u68c0\u67e5\u5217\u8868\u662f\u5426\u4e3a\u7a7a\n        return None\n    else:\n        return max(l)  # \u4f7f\u7528\u5185\u7f6e\u51fd\u6570max\u6765\u627e\u5230\u6700\u5927\u503c"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u6765\u5b58\u50a8\u6570\u5b57\n    numbers = []\n\n    # \u904d\u5386\u4ece1\u5230n\u7684\u6240\u6709\u6574\u6570\n    for i in range(1, n+1):\n        # \u68c0\u67e5\u6570\u5b57\u662f\u5426\u53ef\u4ee5\u88ab11\u621613\u6574\u9664\n        if i % 11 == 0 or i % 13 == 0:\n            # \u5c06\u6570\u5b57\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n            numbers.append(i)\n\n    # \u8ba1\u7b97\u6570\u5b57\u5217\u8868\u4e2d\u6570\u5b577\u51fa\u73b0\u7684\u6b21\u6570\n    count = sum(i == 7 for i in numbers)\n\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    # sort odd indices and concatenate with even indices\n    # list comprehension to make the job simple\n    sorted_list = sorted(l[::2]) + sorted(l[1::2])\n    return sorted_list"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # decode groups of three characters using the original encoding\n    decoded_s = \"\"\n    for group in s:\n        if len(group) == 3:\n            decoded_s += group * 3\n        else:\n            decoded_s += group\n    return decoded_s"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    if n < 1:\n        raise ValueError(\"Invalid input. n must be a positive integer.\")\n\n    # Check if n is prime\n    if is_prime(n):\n        # Calculate the nth Fibonacci number\n        fib_num = fibonacci(n)\n        return fib_num\n    else:\n        return None\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for num in l:\n        # \u904d\u5386\u5217\u8868\u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\n        for i in range(len(l) - 1):\n            # \u68c0\u67e5\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f\u5426\u4e3a\u8d1f\u6570\uff0c\u5982\u679c\u4e3a\u8d1f\u6570\uff0c\u5219\u9700\u8981\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n            # \u624d\u80fd\u6ee1\u8db3\u548c\u4e3a\u96f6\u7684\u6761\u4ef6\n            if num == -l[i] or num == -l[i] - l[i + 1]:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    \u8ba1\u7b97\u6c7d\u8f66\u6bd4\u8d5b\u4e2d\u7684\u78b0\u649e\u6b21\u6570\n\n    \u53c2\u6570:\n        n (int): \u6c7d\u8f66\u7684\u6570\u91cf\n\n    \u8fd4\u56de:\n        int: \u78b0\u649e\u6b21\u6570\n    \"\"\"\n    collision_count = 0  # \u521d\u59cb\u5316\u78b0\u649e\u6b21\u6570\u4e3a0\n\n    # \u5047\u8bbe\u6bcf\u8f86\u6c7d\u8f66\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u884c\u9a76\n    speed = 1  # \u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u8d77\u89c1\uff0c\u5047\u8bbe\u6240\u6709\u6c7d\u8f66\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u884c\u9a76\n\n    # \u8ba1\u7b97\u4ece\u4e24\u8fb9\u6765\u7684\u6c7d\u8f66\u4e4b\u95f4\u7684\u8ddd\u79bb\u5dee\uff08\u5355\u4f4d\uff1a\u6c7d\u8f66\u4e4b\u95f4\u7684\u8ddd\u79bb\uff09\n    distance_difference = n / 2 * speed  # \u8ddd\u79bb\u5dee = n/2 * \u901f\u5ea6\n\n    # \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8d77\u59cb\u4f4d\u7f6e\u5dee\uff08\u5355\u4f4d\uff1a\u6c7d\u8f66\u4e4b\u95f4\u7684\u8ddd\u79bb\uff09\n    for start_difference in range(-distance_difference, distance_difference + 1):\n        # \u5982\u679c\u8d77\u59cb\u4f4d\u7f6e\u5dee\u5c0f\u4e8e0\uff0c\u90a3\u4e48\u8fd9\u662f\u4ece\u53f3\u8fb9\u6765\u7684\u6c7d\u8f66\uff1b\u5426\u5219\uff0c\u8fd9\u662f\u4ece\u5de6\u8fb9\u6765\u7684\u6c7d\u8f66\n        car_type = \"left\" if start_difference < 0 else \"right\"\n\n        # \u8ba1\u7b97\u6bcf\u8f86\u6c7d\u8f66\u884c\u9a76\u7684\u8ddd\u79bb\uff08\u5355\u4f4d\uff1a\u6c7d\u8f66\u4e4b\u95f4\u7684\u8ddd\u79bb\uff09\n        distance = speed * n  # \u6240\u6709\u6c7d\u8f66\u884c\u9a76\u7684\u603b\u8ddd\u79bb = n * \u901f\u5ea6\n\n        # \u5982\u679c\u4ece\u4e24\u8fb9\u6765\u7684\u6c7d\u8f66\u5728\u67d0\u4e00\u65f6\u523b\u76f8\u9047\uff0c\u90a3\u4e48\u5b83\u4eec\u53d1\u751f\u4e86\u78b0\u649e\n        if abs(start_difference) < distance:\n            collision_count += 1\n\n    return collision_count"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that sum to zero,\n    and False otherwise.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct elements in the list that sum to zero, False otherwise.\n\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    return len(set(l)) == len(l) - sum(l)"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36\")\n\n    # Convert x to string representation\n    x_str = str(x)\n\n    # Calculate the result using the given base\n    result = \"\"\n    for digit in x_str:\n        result += base_convert(digit, base)\n\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    # Calculate the area of the triangle using Heron's formula\n    # a = base length\n    # h = height\n    # s = semi-perimeter\n    s = (a + h) / 2\n    area = (s * (s - a) * (s - h) / 2)\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b = 0, 2\n        for _ in range(n - 4):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    # \u786e\u4fdd\u5217\u8868\u4e0d\u4e3a\u7a7a\n    if len(l) == 0:\n        return None\n\n    # \u5c06\u5217\u8868\u6392\u5e8f\n    l.sort()\n\n    # \u8ba1\u7b97\u4e2d\u4f4d\u6570\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5e76\u53bb\u9664\u7a7a\u683c\n    text = text.lower().replace(\" \", \"\")\n    # \u5c06\u5b57\u7b26\u4e32\u53cd\u8f6c\n    reversed_text = text[::-1]\n    # \u6bd4\u8f83\u539f\u5b57\u7b26\u4e32\u548c\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\n    return text == reversed_text"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    # \u8ba1\u7b972^n\u5bf9p\u53d6\u6a21\u7684\u7ed3\u679c\n    result = pow(2, n, p) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    if not s:\n        raise ValueError(\"Input string cannot be empty\")\n    # ... \u5176\u4ed6\u4ee3\u7801 ..."}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    Remove vowels from the given text and return the result.\n    \n    Args:\n        text (str): The input string to be processed.\n        \n    Returns:\n        str: The processed string without vowels.\n    \"\"\"\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num > t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n\n    Args:\n        s0 (str): The first string to be checked.\n        s1 (str): The second string to be checked.\n\n    Returns:\n        bool: True if both strings contain the same characters, False otherwise.\n    \"\"\"\n    # \u83b7\u53d6\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u5217\u8868\n    chars0 = list(s0)\n    chars1 = list(s1)\n\n    # \u68c0\u67e5\u4e24\u4e2a\u5b57\u7b26\u5217\u8868\u662f\u5426\u76f8\u540c\n    if chars0 == chars1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"Invalid input. n must be a positive integer.\")\n\n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    # \u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for i in range(len(brackets)):\n        # \u68c0\u67e5\u5f53\u524d\u5b57\u7b26\u662f\u5426\u662f\u5de6\u62ec\u53f7\n        if brackets[i] == '<':\n            # \u67e5\u627e\u4e0b\u4e00\u4e2a\u53f3\u62ec\u53f7\n            j = i + 1\n            while j < len(brackets) and brackets[j] != '>':\n                j += 1\n            # \u5982\u679c\u53f3\u62ec\u53f7\u5b58\u5728\u4e14\u4e0e\u5de6\u62ec\u53f7\u914d\u5bf9\uff0c\u5219\u8fd4\u56deTrue\n            if j < len(brackets) and j - i == 2:\n                return True\n    # \u5982\u679c\u904d\u5386\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32\u4ecd\u672a\u627e\u5230\u6b63\u786e\u7684\u914d\u5bf9\uff0c\u5219\u8fd4\u56deFalse\n    return False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for i in range(1, len(l)):\n        # \u68c0\u67e5\u5f53\u524d\u5143\u7d20\u662f\u5426\u6bd4\u524d\u4e00\u4e2a\u5143\u7d20\u5927\uff08\u9012\u589e\uff09\u6216\u5c0f\uff08\u9012\u51cf\uff09\n        if l[i] > l[i-1]:\n            return True\n        elif l[i] < l[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\u5408\u7528\u4e8e\u5b58\u50a8\u5171\u540c\u5143\u7d20\n    common_elements = set()\n\n    # \u904d\u5386\u5217\u8868 l1 \u548c l2\n    for item in l1:\n        # \u5982\u679c\u5143\u7d20\u5b58\u5728\u4e8e\u96c6\u5408\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u5171\u540c\u5143\u7d20\u96c6\u5408\u4e2d\n        if item not in common_elements:\n            common_elements.add(item)\n\n    # \u904d\u5386\u5217\u8868 l2 \u7684\u5269\u4f59\u5143\u7d20\n    for item in l2:\n        # \u5982\u679c\u5143\u7d20\u5b58\u5728\u4e8e\u96c6\u5408\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u5171\u540c\u5143\u7d20\u96c6\u5408\u4e2d\n        if item not in common_elements and item not in l1:\n            common_elements.add(item)\n\n    # \u5bf9\u5171\u540c\u5143\u7d20\u96c6\u5408\u8fdb\u884c\u6392\u5e8f\u5e76\u8fd4\u56de\u7ed3\u679c\n    return sorted(common_elements)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\n    Args:\n        n (int): An integer to find its largest prime factor.\n\n    Returns:\n        int: The largest prime factor of n.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"Input must be greater than 1\")\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"\n    This function calculates the sum of numbers from 1 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(True)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x**2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative_list = []\n    for term in xs:\n        derivative_list.append(term * (x))  # \u5728\u8fd9\u91cc\u6dfb\u52a0 x \u7684\u4e58\u6cd5\u64cd\u4f5c\n    return derivative_list"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sum = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        return fib_sum\n\nprint(f\"fibfib({n}) = {fibfib(n)}\")"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u4ee5\u4fbf\u8fdb\u884c\u5faa\u73af\u79fb\u4f4d\u64cd\u4f5c\n    x_str = str(x)\n    # \u79fb\u4f4d\u64cd\u4f5c\n    shifted_str = x_str[::-shift] + x_str[:-shift:-1]\n    # \u5982\u679c\u79fb\u4f4d\u540e\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e\u539f\u6765\u7684\u6570\u5b57\u4f4d\u6570\uff0c\u5219\u5c06\u5176\u53cd\u8f6c\n    if len(shifted_str) < len(x_str):\n        shifted_str = reversed(shifted_str)\n    return shifted_str"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    upper_chars = ''.join(c for c in s if c.isupper())\n    return sum(ord(c) for c in upper_chars)"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # \u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u5217\u8868\n    apples, oranges = map(int, s.split(\"and\"))\n    total_fruits = n\n\n    # \u8ba1\u7b97\u8292\u679c\u7684\u6570\u91cf\n    mango_fruits = total_fruits - apples - oranges\n\n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # \u521d\u59cb\u5316\u7ed3\u679c\u5217\u8868\u548c\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u7d22\u5f15\n    result = []\n    smallest_value = float('inf')\n    smallest_index = -1\n\n    # \u68c0\u67e5\u6570\u7ec4\u662f\u5426\u4e3a\u7a7a\n    if not arr:\n        return result\n\n    # \u904d\u5386\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for i, node in enumerate(arr):\n        # \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u503c\u662f\u5076\u6570\u4e14\u5c0f\u4e8e\u5f53\u524d\u6700\u5c0f\u503c\uff0c\u66f4\u65b0\u6700\u5c0f\u503c\u548c\u7d22\u5f15\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n\n    # \u5c06\u7ed3\u679c\u5217\u8868\u548c\u6700\u5c0f\u503c\u548c\u7d22\u5f15\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n    result = [smallest_value, smallest_index]\n\n    return result"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    result = -1\n    for num, freq in freq_dict.items():\n        if freq >= num and num > result:\n            result = num\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    # \u786e\u4fdd\u8f93\u5165\u5217\u8868\u4e0d\u4e3a\u7a7a\n    if not lst:\n        return []\n\n    # \u521d\u59cb\u5316\u7ed3\u679c\u5217\u8868\n    result = []\n\n    # \u4ece\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6309\u7167\u89c4\u5b9a\u7684\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f\n    for i in range(len(lst) - 1, 0, -1):\n        # \u5c06\u5f53\u524d\u5143\u7d20\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        result.append(lst[i])\n        # \u66f4\u65b0\u5269\u4f59\u5143\u7d20\u7684\u5217\u8868\uff0c\u4ece\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\n        lst = lst[:i] + lst[i+1:]\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    if not is_palindrome(q):\n        return False\n\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    total_weight = sum(q)\n    if total_weight > w:\n        return False\n\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        changes = []\n        for i in range(n):\n            reverse_arr = arr[n-i-1::-1]\n            if arr != reverse_arr:\n                changes.append((i, n-i-1))\n        return min(changes)"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # \u68c0\u67e5\u4e24\u4e2a\u5217\u8868\u7684\u957f\u5ea6\u662f\u5426\u76f8\u7b49\n    if len(lst1) != len(lst2):\n        return lst1 if len(lst1) < len(lst2) else lst2\n\n    # \u83b7\u53d6\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u91cf\n    count_lst1 = len([s for s in lst1 if len(s) > 0])\n    count_lst2 = len([s for s in lst2 if len(s) > 0])\n\n    # \u8fd4\u56de\u5177\u6709\u66f4\u5c0f\u5b57\u7b26\u4e32\u6570\u91cf\u7684\u5217\u8868\n    if count_lst1 < count_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        # Check if a is divisible by any prime number\n        for num in range(2, int(a**0.5) + 1):\n            if a % num == 0:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        return True\n    else:\n        for i in range(1, int(a**0.5) + 1):\n            if a == i**3:\n                return True\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_digits = set(num)\n    prime_digits = {2, 3, 5, 7, 11, 13}\n    count = len([digit for digit in hex_digits if digit in prime_digits])\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    # Initialize a counter to keep track of the number of distinct characters\n    counter = 0\n    # Initialize a list to keep track of the characters in the string\n    chars = []\n\n    # Iterate through each character in the string\n    for char in s:\n        # If the character is not in the list, increment the counter\n        if char not in chars:\n            counter += 1\n        # If the character is in the list, check if it is the third consecutive character\n        elif len(chars) == counter + 2:\n            # If it is, increment the counter again\n            counter += 1\n        # Otherwise, reset the counter to 0\n        else:\n            counter = 0\n\n        # Add the character to the list\n        chars.append(char)\n\n    # Check if the counter is greater than or equal to 3\n    return counter >= 3"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['A+' if grade >= 3.7 else (grade >= 3.3 and grade < 3.7) * 'A-' + (grade >= 2.7 and grade < 3.3) * 'B+' + (grade >= 2.3 and grade < 2.7) * 'B' + (grade >= 1.7 and grade < 2.3) * 'C+' + (grade >= 1.3 and grade < 1.7) * 'C' + (grade >= 0.7 and grade < 1.3) * 'D+' else 'E' for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Check if the length of a string is a prime number or not.\"\"\"\n    \n    # Check if the length of the string is an integer\n    if not isinstance(len(string), int):\n        return False\n    \n    # Check if the length of the string is a prime number\n    for num in range(2, len(string) + 1):\n        if string % num == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10 ** n + 1):\n        if str(i) == str(i)[::-1] + '1' or str(i) == '1' + str(i)[::-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = 0\n    while N > 0:\n        digit = N % 2\n        binary_sum += digit\n        N //= 2\n    return str(binary_sum)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:  # \u5224\u65ad\u7d22\u5f15\u662f\u5426\u4e3a\u5947\u6570\n            if lst[i] % 2 == 0:  # \u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u4e3a\u5076\u6570\n                sum += lst[i]  # \u5c06\u5076\u6570\u5143\u7d20\u52a0\u5165\u603b\u548c\n    return sum"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # \u5c06\u5b57\u7b26\u4e32\u6309\u7a7a\u683c\u5206\u5272\u6210\u5355\u8bcd\u5217\u8868\n    words = s.split()\n\n    # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5355\u8bcd\uff0c\u6bcf\u4e2a\u5355\u8bcd\u4e2d\u7684\u5b57\u7b26\u6309ASCII\u503c\u5347\u5e8f\u6392\u5217\n    new_words = [word.translate({ord(i): ord(j) for i, j in zip(sorted(word), range(ord('a'), ord('z')+1)}) for word in words]\n\n    # \u5c06\u5355\u8bcd\u5217\u8868\u91cd\u65b0\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\n    result = ' '.join(new_words)\n\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u6765\u5b58\u50a8\u5750\u6807\n    coordinates = []\n\n    # \u904d\u5386\u4e8c\u7ef4\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\n    for row in lst:\n        # \u68c0\u67e5\u5f53\u524d\u884c\u662f\u5426\u5305\u542b\u8981\u67e5\u627e\u7684\u6574\u6570x\n        if x in row:\n            # \u83b7\u53d6\u884c\u548c\u5217\u7684\u7d22\u5f15\n            row_index = lst.index(row)\n            col_index = row.index(x)\n            # \u5c06\u5750\u6807\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\uff0c\u5e76\u6309\u884c\u548c\u5217\u8fdb\u884c\u6392\u5e8f\n            coordinates.append((row_index, col_index))\n\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    rotated_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_index = 26\n    result = \"\"\n\n    for char in s:\n        if char.isalpha():\n            index = rotated_alphabet.index(char)\n            rotated_index -= 2\n            result += rotated_alphabet[rotated_index + index]\n        else:\n            result += char\n\n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    # \u521d\u59cb\u5316\u6700\u5c0f\u503c\u548c\u5f53\u524d\u6700\u5c0f\u503c\n    smallest = float('inf')\n    current_smallest = None\n\n    # \u904d\u5386\u5217\u8868\uff0c\u627e\u5230\u6700\u5c0f\u503c\u548c\u5f53\u524d\u6700\u5c0f\u503c\n    for num in lst:\n        if num < smallest:\n            current_smallest = num\n        smallest = min(smallest, num)\n\n    # \u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u8fd4\u56deNone\n    if not lst:\n        return None\n\n    # \u5982\u679c\u5f53\u524d\u6700\u5c0f\u503c\u4e0d\u662f\u6700\u5c0f\u503c\uff0c\u8fd4\u56de\u5f53\u524d\u6700\u5c0f\u503c\uff0c\u5426\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u6700\u5c0f\u503c\n    if current_smallest is None:\n        return smallest\n    else:\n        return current_smallest if smallest > current_smallest else smallest + 1"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    for sentence in S.split('.?!'):  # \u4f7f\u7528\u53e5\u70b9\u3001\u95ee\u53f7\u6216\u611f\u53f9\u53f7\u5c06\u53e5\u5b50\u5206\u5272\u6210\u5355\u72ec\u7684\u5355\u8bcd\n        if sentence.startswith('I'):  # \u68c0\u67e5\u53e5\u5b50\u662f\u5426\u4ee5\"I\"\u5f00\u5934\n            count += 1  # \u5982\u679c\u4ee5\"I\"\u5f00\u5934\uff0c\u5219\u8ba1\u6570\u5668\u52a0\u4e00\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Args:\n    x: The first number\n    y: The second number\n    z: The third number\n    \n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two and all numbers are integers, False otherwise.\n    \n    Examples:\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    elif x + y == z:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Split the message into individual characters\n    message_chars = message.split()\n\n    # Initialize an empty list to store encoded message\n    encoded_message = []\n\n    for char in message_chars:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Convert the character to lowercase or uppercase based on the condition\n            if char.islower():\n                encoded_char = chr(ord(char) + 32)\n            elif char.isupper():\n                encoded_char = chr(ord(char) - 32)\n            \n            # If the character is a vowel, replace it with the next letter in the alphabet\n            if encoded_char == 'a' or encoded_char == 'e' or encoded_char == 'i' or encoded_char == 'o' or encoded_char == 'u':\n                encoded_char = chr((ord(char) + ord('aeiou') + 2) % 26 + ord('a'))\n\n            # Append the encoded character to the encoded message list\n            encoded_message.append(encoded_char)\n        else:\n            # If the character is not a letter, append it to the encoded message list as is\n            encoded_message.append(char)\n\n    # Join the encoded characters into a single string and return it\n    return ' '.join(encoded_message)"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    Function to find the largest prime value in a list of integers and return the sum of its digits\n    \"\"\"\n    \n    # \u521d\u59cb\u5316\u7ed3\u679c\u53d8\u91cf\n    max_prime = 0\n    sum_of_digits = 0\n    \n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for num in lst:\n        # \u68c0\u67e5\u662f\u5426\u4e3a\u8d28\u6570\n        if is_prime(num):\n            # \u5982\u679c\u662f\u8d28\u6570\uff0c\u5219\u66f4\u65b0\u6700\u5927\u503c\u548c\u6570\u5b57\u603b\u548c\n            if num > max_prime:\n                max_prime = num\n            sum_of_digits += sum(str(num))  # \u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5e76\u6c42\u548c\n            \n    # \u8fd4\u56de\u7ed3\u679c\n    return sum_of_digits\n\n# \u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u67e5\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u8d28\u6570\ndef is_prime(num):\n    if num < 2:  # \u5c0f\u4e8e2\u7684\u6570\u90fd\u4e0d\u662f\u8d28\u6570\n        return False\n    for i in range(2, int(num ** 0.5) + 1):  # \u4ece2\u5f00\u59cb\u904d\u5386\u5230\u8be5\u6570\u7684\u5e73\u65b9\u6839\n        if num % i == 0:  # \u5982\u679c\u80fd\u6574\u9664\uff0c\u5219\u4e0d\u662f\u8d28\u6570\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if key.lower() != key or key.upper() != key:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_numbers = [2, 3]\n    for number in range(5, n):\n        is_prime = True\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(number)\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # \u63d0\u53d6\u6570\u5b57\u7684\u4e2a\u4f4d\u6570\n    a_digit = a % 10\n    b_digit = b % 10\n\n    # \u8fd4\u56de\u4e24\u4e2a\u6570\u5b57\u4e2a\u4f4d\u6570\u7684\u4e58\u79ef\n    return a_digit * b_digit"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        num = float(value)\n    except ValueError:\n        raise ValueError(\"Input must be a number\")\n\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num + (num - int(num)) * (abs(int(num) - 0.5) - abs(num - int(num) - 0.5)))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        pile.append(n - 1 if i % 2 == 0 else n + (i % 2))\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    words = s.split()  # \u4f7f\u7528\u7a7a\u683c\u5206\u5272\u5b57\u7b26\u4e32\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Check if x and y are positive integers\n    if not (isinstance(x, int) and isinstance(y, int)):\n        return \"Error: Both inputs must be positive integers.\"\n    \n    # Check if x is less than or equal to y\n    if x > y:\n        return \"Error: x must be less than or equal to y.\"\n\n    # Check if there is an even number in the range [x, y]\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    \n    # If no even number is found in the range, return -1\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n    \n    rounded_sum = round(sum)\n    binary_sum = bin(rounded_sum)\n    \n    return binary_sum"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    digits = sorted(set(str(x)))  # \u83b7\u53d6\u6240\u6709\u6570\u5b57\u7684\u96c6\u5408\uff0c\u5e76\u6392\u5e8f\n    for digit in digits:\n        if '2' not in str(digit):  # \u68c0\u67e5\u6570\u5b57\u662f\u5426\u6ca1\u6709\u5076\u6570\u4f4d\n            result.append(int(digit))\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # \u5224\u65ad\u8f93\u5165\u6570\u7ec4\u662f\u5426\u4e3a\u7a7a\n    if not arr:\n        return []\n\n    # \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sorted_arr = sorted(arr)\n\n    # \u5224\u65ad\u662f\u5426\u6709\u975e1-9\u7684\u6570\u5b57\uff0c\u5982\u679c\u6709\u5219\u5ffd\u7565\n    for num in sorted_arr:\n        if num < 1 or num > 9:\n            return ['One']\n\n    # \u6570\u7ec4\u4e2d\u5269\u4f59\u7684\u5143\u7d20\u57281-9\u4e4b\u95f4\uff0c\u6392\u5e8f\u540e\u7ffb\u8f6c\u6570\u7ec4\n    sorted_arr.reverse()\n\n    # \u6839\u636e\u6570\u5b57\u540d\u79f0\u8fdb\u884c\u8f6c\u6362\u5e76\u8fd4\u56de\u7ed3\u679c\n    result = []\n    for num in sorted_arr:\n        digit = num // 10 + 1  # \u83b7\u53d6\u6570\u5b57\u5bf9\u5e94\u7684\u540d\u79f0\n        result.append(digit)\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [0] * n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result[i - 1] = i * (i - 1) * (i - 2) * ...  # Factorial of i\n        else:\n            result[i - 1] = sum(range(1, i + 1))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        # Check if the number is palindrome\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            # If the number is negative, we only count the negative digits\n            # and ignore the positive digits\n            negative_digits = abs(num) // 10 ** (-len(str(num)) - 1)\n            count += negative_digits\n        else:\n            # If the number is positive, we count all digits\n            count += len(str(num))\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    # \u68c0\u67e5\u6570\u7ec4\u662f\u5426\u4e3a\u7a7a\n    if len(arr) == 0:\n        return True\n    \n    # \u5c1d\u8bd5\u8fdb\u884c\u53f3\u79fb\u64cd\u4f5c\n    while True:\n        # \u5c1d\u8bd5\u5c06\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\n        new_arr = arr[1:] + [arr[0]]\n        \n        # \u68c0\u67e5\u65b0\u6570\u7ec4\u662f\u5426\u6ee1\u8db3\u975e\u964d\u5e8f\u6761\u4ef6\n        if sorted(new_arr) == new_arr:\n            return True\n        \n        # \u5982\u679c\u65b0\u6570\u7ec4\u4ecd\u7136\u4e0d\u6ee1\u8db3\u975e\u964d\u5e8f\u6761\u4ef6\uff0c\u5219\u5c1d\u8bd5\u8fdb\u884c\u66f4\u591a\u7684\u53f3\u79fb\u64cd\u4f5c\n        arr = right_shift(arr)\n        \ndef right_shift(arr):\n    \"\"\"\u6a21\u62df\u53f3\u79fb\u64cd\u4f5c\u7684\u51fd\u6570\"\"\"\n    # \u7b80\u5355\u7684\u53f3\u79fb\u64cd\u4f5c\uff0c\u79fb\u52a8\u6240\u6709\u5143\u7d20\u4e00\u4e2a\u4f4d\u7f6e\u7684\u53f3\u65b9\n    return [arr[i+1] for i in range(len(arr)-1)] + [arr[-1]]"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    lst1 = list(set(lst1))  # Remove duplicates\n    lst2 = list(set(lst2))  # Remove duplicates\n\n    # Check if lst1 contains only even numbers\n    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n\n    # If lst1 contains only even numbers, return \"YES\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # \u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u6309\u7a7a\u683c\u5206\u5272\u6210\u5355\u8bcd\u5217\u8868\n    words = test.split()\n    \n    # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5b57\u5178\u6765\u5b58\u50a8\u7ed3\u679c\n    result = {}\n    \n    # \u904d\u5386\u5355\u8bcd\u5217\u8868\uff0c\u5bf9\u6bcf\u4e2a\u5355\u8bcd\u8fdb\u884c\u8ba1\u6570\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n            \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u6765\u5b58\u50a8\u5220\u9664\u540e\u7684\u7ed3\u679c\n    result = \"\"\n    \n    # \u904d\u5386\u5b57\u7b26\u4e32s\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for char in s:\n        # \u5982\u679c\u5b57\u7b26\u4e0d\u5728c\u4e2d\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d\n        if char not in c:\n            result += char\n    \n    # \u68c0\u67e5\u5220\u9664\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u56de\u6587\n    is_palindrome = is_palindrome_check(result)\n    \n    return (result, is_palindrome)\n\ndef is_palindrome_check(s):\n    # \u53cd\u8f6c\u5b57\u7b26\u4e32s\n    s = s[::-1]\n    # \u6bd4\u8f83\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\u4e0e\u539f\u59cb\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\n    return s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    output = []\n    for str_num in lst:\n        odd_count_str = ''\n        for digit in str_num:\n            if int(digit) % 2 != 0:\n                odd_count_str += f\" {str(int(digit))}n\"\n        output.append(f\"the number of odd elements {odd_count_str} in the str{len(lst)-1+1}ng {len(lst)-1+str_num} of the 1nput.\")\n    return output"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:  # \u8f93\u5165\u4e3a\u7a7a\u5217\u8868\uff0c\u8fd4\u56de0\n        return 0\n    \n    min_sum = nums[0]  # \u521d\u59cb\u5047\u8bbe\u6240\u6709\u5143\u7d20\u90fd\u5728\u4e00\u8d77\u5f62\u6210\u4e00\u4e2a\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u548c\n    current_sum = nums[0]  # \u7528\u4e8e\u8ffd\u8e2a\u5f53\u524d\u5df2\u7ecf\u8003\u8651\u8fc7\u7684\u5b50\u6570\u7ec4\u7684\u548c\n    start = 0  # \u7528\u4e8e\u8ffd\u8e2a\u5f53\u524d\u8003\u8651\u7684\u5b50\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\n    \n    for end in range(len(nums)):\n        current_sum += nums[end]  # \u5f53\u524d\u8003\u8651\u7684\u5b50\u6570\u7ec4\u7684\u548c\n        while current_sum < 0 and start < len(nums):  # \u5982\u679c\u5f53\u524d\u548c\u5c0f\u4e8e0\uff0c\u5c1d\u8bd5\u5728\u8d77\u59cb\u4f4d\u7f6e\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n            current_sum += nums[start]\n            start += 1\n        if current_sum >= 0:  # \u5982\u679c\u5f53\u524d\u548c\u5927\u4e8e\u7b49\u4e8e0\uff0c\u90a3\u4e48\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u5b50\u6570\u7ec4\n            min_sum = min(min_sum, current_sum)\n        else:  # \u5982\u679c\u5f53\u524d\u548c\u5c0f\u4e8e0\uff0c\u90a3\u4e48\u8bf4\u660e\u524d\u9762\u7684\u6240\u6709\u5143\u7d20\u90fd\u6ca1\u6709\u5728\u4efb\u4f55\u5b50\u6570\u7ec4\u4e2d\u51fa\u73b0\u8fc7\n            break\n    return min_sum if min_sum != 0 else -1  # \u5982\u679c\u6700\u5c0f\u548c\u4e3a0\uff0c\u8bf4\u660e\u6240\u6709\u5143\u7d20\u90fd\u5728\u4e00\u4e2a\u5b50\u6570\u7ec4\u4e2d\u51fa\u73b0\u8fc7\uff0c\u8fd4\u56de-1"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178\u6765\u5b58\u50a8\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u9700\u8981\u586b\u5145\u7684\u6b21\u6570\n    bucket_count = {}\n    \n    # \u904d\u5386\u6bcf\u4e2a\u4f4d\u7f6e\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                # \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u9700\u8981\u586b\u5145\uff0c\u90a3\u4e48\u5c31\u586b\u5145\u5230bucket_count\u4e2d\u5bf9\u5e94\u7684\u503c\u4e0a\n                bucket_count[(i, j)] = max(bucket_count.get((i, j), 0), capacity - 1)\n    \n    # \u8fd4\u56de\u9700\u8981\u586b\u5145\u7684\u6b21\u6570\n    return len(bucket_count)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # \u5c06\u6570\u7ec4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4f7f\u7528''.join()\u65b9\u6cd5\u8fde\u63a5\u5b83\u4eec\n    str_arr = ''.join(str(num) for num in arr)\n    # \u4f7f\u7528sorted()\u51fd\u6570\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6392\u5e8f\n    sorted_arr = sorted(str_arr, key=int, reverse=False)\n    # \u5c06\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u56de\u6574\u6570\u6570\u7ec4\n    sorted_arr = [int(num) for num in sorted_arr]\n    return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    # \u63d0\u53d6\u6240\u6709\u5355\u8bcd\n    words = s.split()\n    \n    # \u521d\u59cb\u5316\u7ed3\u679c\u5217\u8868\n    result = []\n    \n    # \u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\n    for word in words:\n        # \u68c0\u67e5\u5355\u8bcd\u4e2d\u7684\u8f85\u97f3\u5b57\u6bcd\u6570\u91cf\u662f\u5426\u4e0en\u5339\u914d\n        consonants = 0\n        for letter in word:\n            if letter.isalpha() and letter.lower() in 'bcdfghjklmnpqrstvwxz':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    # \u53bb\u9664\u9996\u5c3e\u5b57\u7b26\n    word = word[:-1]\n    \n    # \u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\uff0c\u627e\u5230\u53f3\u4fa7\u7684\u7b2c\u4e00\u4e2a\u5143\u97f3\u5b57\u6bcd\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    \"\"\"\n    Check if it is possible to concatenate the two strings in some order\n    that the resulting string will be good.\n    \"\"\"\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    arr.sort()\n    \n    # \u83b7\u53d6\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\n    max_val = max(arr)\n    second_max_val = max(arr, key=lambda x: x if x == max_val else 1)\n    \n    # \u8fd4\u56de\u957f\u5ea6\u4e3ak\u7684\u5df2\u6392\u5e8f\u5217\u8868\n    return sorted(arr[:k]) + [max_val] + sorted(arr[k:k+1]) + [second_max_val]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0 and num % 2 == 1:  # \u68c0\u67e5\u662f\u5426\u4e3a\u5076\u6570\u4f4d\u7f6e\u7684\u5947\u6570\n            odd_sum += num\n    return odd_sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868\u7528\u4e8e\u5b58\u50a8\u524dk\u4e2a\u5143\u7d20\u7684\u548c\n    sum_arr = [0] * k\n    \n    # \u904d\u5386arr\u7684\u524dk\u4e2a\u5143\u7d20\uff0c\u5c06\u5b83\u4eec\u7d2f\u52a0\u5230sum_arr\u4e2d\n    for i in range(k):\n        sum_arr[i] += arr[i]\n    \n    # \u904d\u5386arr\u7684\u5269\u4f59\u5143\u7d20\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u4e0e\u524dk\u4e2a\u5143\u7d20\u7684\u548c\u76f8\u5dee\u4e0d\u8d85\u8fc72\u4f4d\u6570\u5b57\uff0c\u5219\u5c06\u5176\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n    result = sum(x for x in arr[k:] if sum(map(int, str(x))) - sum_arr[-k:] <= 2)\n    \n    return result"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 0:  # \u5982\u679c\u5f53\u524d\u6570\u5b57\u662f\u5076\u6570\n            odd_numbers.append(n // 2)  # \u5c06\u5f53\u524d\u6570\u5b57\u9664\u4ee52\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n        else:\n            odd_numbers.append(3 * n + 1)  # \u5c06\u5f53\u524d\u6570\u5b57\u4e58\u4ee53\u52a01\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n        n = odd_numbers[-1]  # \u5c06\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9n\uff0c\u4ee5\u4fbf\u4e0b\u4e00\u6b21\u8fed\u4ee3\n    return sorted(odd_numbers)  # \u8fd4\u56de\u6309\u5347\u5e8f\u6392\u5e8f\u7684\u5947\u6570\u5217\u8868"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # \u63d0\u53d6\u65e5\u671f\u5b57\u7b26\u4e32\u7684\u5404\u4e2a\u90e8\u5206\n    mm, dd, yyyy = map(int, date.split('-'))\n\n    # \u68c0\u67e5\u65e5\u671f\u662f\u5426\u7b26\u5408\u89c4\u5219\n    if not date:  # \u8f93\u5165\u4e3a\u7a7a\u5b57\u7b26\u4e32\u65f6\u8fd4\u56deFalse\n        return False\n    if mm < 1 or mm > 12:  # \u6708\u4efd\u5e94\u8be5\u57281\u523012\u4e4b\u95f4\n        return False\n    if (mm == 2 and (dd < 1 or dd > 28)) or (mm != 2 and (dd < 1 or dd > 31)):  # \u6839\u636e\u6708\u4efd\u786e\u5b9a\u65e5\u671f\u662f\u5426\u5408\u6cd5\n        return False\n    if mm == 4 or mm == 6 or mm == 9 or mm == 11:  # \u6839\u636e\u6708\u4efd\u786e\u5b9a\u5929\u6570\u662f\u5426\u5408\u6cd5\n        if yyyy < date_start(mm) or yyyy > date_end(mm):\n            return False\n    else:\n        if yyyy < date_start(mm, dd) or yyyy > date_end(mm, dd):\n            return False\n    return True\n\n# \u8f85\u52a9\u51fd\u6570\uff0c\u8fd4\u56de\u6307\u5b9a\u6708\u4efd\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65e5\u671f\ndef date_start(month, day=1):\n    return f\"{month}-{day}-01\"\n\ndef date_end(month, day=31):\n    return f\"{month}-{day}-{31}\""}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # \u53bb\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n    txt = txt.replace(\" \", \"\")\n    # \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u7a7a\u683c\uff0c\u5219\u4f7f\u7528\u9017\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\n    if not txt:\n        return txt.split(',')\n    # \u5426\u5219\uff0c\u7edf\u8ba1\u5e76\u8fd4\u56de\u5355\u8bcd\u4e2d\u4e0d\u540c\u5b57\u6bcd\u7684\u4e2a\u6570\uff08\u6ce8\u610f\u9700\u8981\u8f6c\u5316\u4e3aASCII\u7801\u540e\u6c42\u548c\uff09\n    else:\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\n        odd_order_letters = sum(ord(c) % 2 != 0 for c in txt)\n        return odd_order_letters"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] <= lst[i-1]:\n                return False\n        return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end1 or start2 > end2:\n        return \"NO\"  # intervals don't intersect\n\n    length = abs(end1 - end2)  # calculate the length of the intersection\n    if length == 1:\n        return \"NO\"  # length is 1, not a prime number\n    elif is_prime(length):\n        return \"YES\"  # length is a prime number\n    else:\n        return \"NO\"  # length is not prime and doesn't intersect\n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    # \u521d\u59cb\u5316\u7ed3\u679c\u4e3a0\n    result = 0\n    \n    # \u904d\u5386\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\n    for num in arr:\n        # \u8ba1\u7b97\u6570\u5b57\u7684\u4e58\u79ef\u7684\u7b26\u53f7\u548c\u4e58\u79ef\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        product = num * sign\n        \n        # \u5c06\u4e58\u79ef\u76f8\u52a0\u5230\u7ed3\u679c\u4e2d\n        result += abs(product)\n    \n    return result"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # \u83b7\u53d6\u7f51\u683c\u7684\u884c\u6570\u548c\u5217\u6570\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # \u521b\u5efa\u4e00\u4e2a\u5217\u8868\u6765\u4fdd\u5b58\u6700\u5c0f\u8def\u5f84\u4e0a\u7684\u503c\n    min_path = []\n\n    # \u904d\u5386\u7f51\u683c\u4e2d\u7684\u6bcf\u4e2a\u5355\u5143\u683c\n    for i in range(rows):\n        for j in range(cols):\n            # \u5982\u679c\u5f53\u524d\u5355\u5143\u683c\u7684\u503c\u5c0f\u4e8ek\uff0c\u5219\u8df3\u8fc7\u8be5\u5355\u5143\u683c\n            if grid[i][j] < k:\n                continue\n\n            # \u521b\u5efa\u4e00\u4e2a\u5b50\u5217\u8868\u6765\u4fdd\u5b58\u5230\u8fbe\u5f53\u524d\u5355\u5143\u683c\u7684\u6700\u5c0f\u8def\u5f84\u4e0a\u7684\u503c\n            sub_path = []\n\n            # \u5c1d\u8bd5\u4ece\u5f53\u524d\u5355\u5143\u683c\u5411\u6bcf\u4e2a\u76f8\u90bb\u5355\u5143\u683c\u79fb\u52a8\uff0c\u76f4\u5230\u5230\u8fbe\u8fb9\u754c\u6216\u627e\u5230\u6700\u5c0f\u8def\u5f84\n            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # \u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if x >= 0 and x < rows and y >= 0 and y < cols and grid[x][y] <= grid[i][j]:\n                    sub_path.append(grid[x][y])\n                    # \u5982\u679c\u627e\u5230\u4e86\u6700\u5c0f\u8def\u5f84\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u4e3b\u8def\u5f84\u4e2d\n                    if len(sub_path) > len(min_path):\n                        min_path = sub_path.copy()\n\n            # \u5c06\u5f53\u524d\u5355\u5143\u683c\u7684\u503c\u6dfb\u52a0\u5230\u6700\u5c0f\u8def\u5f84\u4e2d\n            min_path.append(grid[i][j])\n\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci = [3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i / 2)\n        else:\n            tribonacci.extend([tri(i - 1) + tri(i - 2) + tri(i + 1)])\n    return tribonacci"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    # \u786e\u4fdd\u8f93\u5165\u4e3a\u6b63\u6574\u6570\n    if not isinstance(n, int) or n < 0:\n        return 0\n\n    # \u521d\u59cb\u5316\u7ed3\u679c\u4e3a1\n    product = 1\n\n    # \u4ece\u53f3\u5f80\u5de6\u904d\u5386\u6bcf\u4e00\u4f4d\u6570\u5b57\n    for digit in str(n):\n        # \u53ea\u8003\u8651\u5947\u6570\u4f4d\u7684\u6570\u5b57\n        if int(digit) % 2 != 0:\n            # \u5c06\u5f53\u524d\u5947\u6570\u4f4d\u7684\u6570\u5b57\u4e58\u4ee5\u524d\u9762\u7684\u7ed3\u679c\n            product *= int(digit)\n\n    # \u5982\u679c\u6240\u6709\u6570\u5b57\u90fd\u662f\u5076\u6570\u4f4d\uff0c\u8fd4\u56de0\n    if product == 0:\n        return 0\n    else:\n        return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    nested_brackets = False\n    current_level = 0\n\n    for char in string:\n        if char == '[':\n            current_level += 1\n        elif char == ']':\n            if current_level > 0:\n                current_level -= 1\n                if current_level == 0:\n                    nested_brackets = True\n            else:\n                print(\"Error: Unexpected ']'\")\n                return False\n    return nested_brackets"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    result = sum(int(x) ** 2 for x in lst)\n    return int(result)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n    if not txt:\n        return False\n\n    # \u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n    last_char = txt[-1]\n\n    # \u5224\u65ad\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u5b57\u6bcd\u4e14\u4e0d\u662f\u5355\u8bcd\u7684\u4e00\u90e8\u5206\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # \u786e\u4fdd\u8f93\u5165\u6570\u7ec4\u4e0d\u4e3a\u7a7a\n    if not arr:\n        return -1\n\n    # \u521d\u59cb\u5316\u6700\u5927\u7d22\u5f15\u4e3a\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\n    max_index = 0\n\n    # \u904d\u5386\u6570\u7ec4\n    for i in range(1, len(arr)):\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u6216\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u5f53\u524d\u5143\u7d20\u7684\u7d22\u5f15\u5c0f\u4e8e\u6700\u5927\u7d22\u5f15\n        if arr[i] > arr[i-1] or (arr[i] == arr[i-1] and i > max_index):\n            max_index = i\n\n    # \u8fd4\u56de\u6700\u5927\u7d22\u5f15\u6216-1\uff08\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff09\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return None, None\n\n    # \u5148\u68c0\u67e5\u5217\u8868\u4e2d\u662f\u5426\u6709\u8d1f\u6570\n    negative_numbers = [num for num in lst if num < 0]\n    largest_negative = max(negative_numbers) if negative_numbers else None\n\n    # \u518d\u68c0\u67e5\u5217\u8868\u4e2d\u662f\u5426\u6709\u6b63\u6570\n    positive_numbers = [num for num in lst if num >= 0]\n    smallest_positive = min(positive_numbers) if positive_numbers else None\n\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        return float(a) if float(a) > float(b) else b\n    elif isinstance(a, str) and isinstance(b, float):\n        return b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    # \u5224\u65ad\u662f\u5426\u4e3a\u6b63\u6574\u6570\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    # \u521d\u59cb\u5316\u4e24\u4e2a\u5217\u8868\uff0c\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u5947\u6570\uff0c\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u5076\u6570\n    odd_numbers = [i for i in range(n) if i % 2 != 0]\n    even_numbers = [i for i in range(n) if i % 2 == 0]\n\n    # \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5305\u542b\u4e86\u56db\u4e2a\u5947\u6570\u6216\u56db\u4e2a\u5076\u6570\n    if len(odd_numbers) < 4 or len(even_numbers) < 4:\n        return False\n\n    # \u5224\u65ad\u5947\u6570\u5217\u8868\u548c\u5076\u6570\u5217\u8868\u7684\u5143\u7d20\u662f\u5426\u4e00\u4e00\u5bf9\u5e94\n    if len(odd_numbers) != len(even_numbers):\n        return False\n\n    # \u5c06\u5947\u6570\u5217\u8868\u548c\u5076\u6570\u5217\u8868\u62fc\u63a5\u8d77\u6765\uff0c\u518d\u6c42\u548c\n    sum_of_numbers = sum(odd_numbers + even_numbers)\n\n    # \u5982\u679c\u7b49\u4e8en\uff0c\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\n    return sum_of_numbers == n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with '-' \n    \n    Input:\n        text (str): The input string\n        \n    Output:\n        str: The fixed string with spaces replaced with underscores or '-'\n        \n    \"\"\"\n    # \u521d\u59cb\u5316\u7ed3\u679c\u5b57\u7b26\u4e32\n    result = \"\"\n    \n    # \u904d\u5386\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for char in text:\n        # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u7a7a\u683c\u5e76\u4e14\u524d\u4e00\u4e2a\u5b57\u7b26\u4e5f\u662f\u7a7a\u683c\uff0c\u5219\u5c06\u5f53\u524d\u7a7a\u683c\u66ff\u6362\u4e3a'-'\n        if char == \" \" and result[-1] == \" \":\n            result = result[:-1] + \"-\"\n        # \u5426\u5219\uff0c\u5c06\u5f53\u524d\u7a7a\u683c\u66ff\u6362\u4e3a'_'\n        elif char == \" \":\n            result += \"_\"\n        # \u5426\u5219\uff0c\u5c06\u5f53\u524d\u5b57\u7b26\u6dfb\u52a0\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\n        else:\n            result += char\n            \n    return result"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # \u68c0\u67e5\u6587\u4ef6\u540d\u662f\u5426\u5305\u542b\u8d85\u8fc7\u4e09\u4e2a\u6570\u5b57\n    if '0' <= file_name[0] <= '9' and len(file_name) > 3:\n        return 'No'\n\n    # \u68c0\u67e5\u6587\u4ef6\u540d\u662f\u5426\u53ea\u6709\u4e00\u4e2a\u70b9\n    if '.' not in file_name:\n        return 'No'\n\n    # \u68c0\u67e5\u70b9\u4e4b\u524d\u7684\u90e8\u5206\u662f\u5426\u7b26\u5408\u8981\u6c42\n    dot_index = file_name.index('.')\n    before_dot = file_name[:dot_index]\n    if not before_dot.isalpha() or before_dot.isspace():\n        return 'No'\n\n    # \u68c0\u67e5\u70b9\u4e4b\u540e\u7684\u90e8\u5206\u662f\u5426\u7b26\u5408\u8981\u6c42\n    after_dot = file_name[dot_index+1:]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum_of_squares = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            if lst[i] % 4 == 0:\n                sum_of_squares += lst[i] ** 2\n            else:\n                sum_of_squares += lst[i] ** 3\n        else:\n            sum_of_squares += lst[i]\n    return sum_of_squares"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    # \u79fb\u9664\u7a7a\u683c\u5e76\u5c06\u5355\u8bcd\u8f6c\u4e3a\u5c0f\u5199\n    words = sentence.replace(\" \", \"\").lower()\n    \n    # \u68c0\u67e5\u6bcf\u4e2a\u5355\u8bcd\u662f\u5426\u4e3a\u8d28\u6570\n    prime_words = [word for word in words if len(word) == 1 and all(2 > num > 1 for num in string.digits(word))]\n    \n    # \u5982\u679c\u8fd8\u6709\u5269\u4f59\u7684\u975e\u8d28\u6570\u5355\u8bcd\uff0c\u76f4\u63a5\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n    remaining_words = set(words) - set(prime_words)\n    prime_words.extend(remaining_words)\n    \n    # \u8fd4\u56de\u7ed3\u679c\u5b57\u7b26\u4e32\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator = int(x.split(\"/\")[0])\n    denominator = int(x.split(\"/\")[1])\n    num_den = int(n.split(\"/\")[0])\n    den_frac = int(n.split(\"/\")[1])\n\n    if numerator == num_den and denominator % den_frac == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868\u7528\u4e8e\u5b58\u50a8\u6392\u5e8f\u540e\u7684\u7ed3\u679c\n    sorted_nums = []\n\n    # \u904d\u5386\u539f\u59cb\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for num in nums:\n        # \u8ba1\u7b97\u5f53\u524d\u6570\u5b57\u7684\u4f4d\u6570\u4e4b\u548c\n        digit_sum = sum(int(digit) for digit in str(num))\n\n        # \u5982\u679c\u5f53\u524d\u6570\u5b57\u7684\u4f4d\u6570\u4e4b\u548c\u5c0f\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u4e4b\u548c\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        if digit_sum <= sorted_nums[-1][-1]:\n            sorted_nums.append((num, digit_sum))\n        else:\n            # \u5982\u679c\u5f53\u524d\u6570\u5b57\u7684\u4f4d\u6570\u4e4b\u548c\u5927\u4e8e\u524d\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u6570\u4e4b\u548c\uff0c\u5219\u5c06\u5176\u63d2\u5165\u5230\u7ed3\u679c\u5217\u8868\u4e2d\u7684\u9002\u5f53\u4f4d\u7f6e\n            sorted_nums.insert(len(sorted_nums) - 1, (num, digit_sum))\n\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    odd_first_digit = 0\n    odd_last_digit = 0\n\n    for num in nums:\n        if num > 10 and (str(num)[0] % 2 != 0 or str(num)[-1] % 2 != 0):\n            count += 1\n            if str(num)[0] % 2 != 0:\n                odd_first_digit += 1\n            if str(num)[-1] % 2 != 0:\n                odd_last_digit += 1\n\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    triples = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n    return len(triples)"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # \u68c0\u67e5\u8f93\u5165\u7684\u884c\u661f\u540d\u79f0\u662f\u5426\u6709\u6548\n    if not planet1.isalpha() or not planet2.isalpha():\n        return ()  # \u8fd4\u56de\u7a7a\u5143\u7ec4\uff0c\u8868\u793a\u8f93\u5165\u7684\u884c\u661f\u540d\u79f0\u65e0\u6548\n\n    planets = (\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    )\n    # \u83b7\u53d6\u884c\u661f\u5217\u8868\n    orbit_range = (int(planet1), int(planet2))\n    valid_planets = [p for p in planets if p in orbit_range]\n    # \u6839\u636e\u8ddd\u79bb\u592a\u9633\u7684\u8fdc\u8fd1\u5bf9\u884c\u661f\u8fdb\u884c\u6392\u5e8f\n    valid_planets.sort(key=lambda x: (distance(x, \"Sun\"), x))\n    return tuple(valid_planets)\n\n\ndef distance(planet, reference):\n    # \u5047\u8bbe\u884c\u661f\u8ddd\u79bb\u592a\u9633\u7684\u8ddd\u79bb\u662f\u4ee5\u5730\u7403\u5230\u592a\u9633\u7684\u8ddd\u79bb\u4e3a\u57fa\u51c6\u8fdb\u884c\u8ba1\u7b97\u7684\n    # \u5b9e\u9645\u8ba1\u7b97\u4e2d\u9700\u8981\u8003\u8651\u5230\u5176\u4ed6\u56e0\u7d20\u7684\u5f71\u54cd\uff0c\u8fd9\u91cc\u4e3a\u4e86\u7b80\u5316\u793a\u4f8b\u7701\u7565\u4e86\u8ba1\u7b97\u8fc7\u7a0b\n    return (reference - int(planet)) / (3600 * 14)  # \u5355\u4f4d\u4e3a\u79d2"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # \u5220\u9664\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u5b57\u7b26\u4e32\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # \u6309\u957f\u5ea6\u6392\u5e8f\u5e76\u5220\u9664\u91cd\u590d\u9879\n    lst.sort(key=lambda x: len(x), reverse=False)\n    # \u8fd4\u56de\u6392\u5e8f\u540e\u7684\u5217\u8868\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:  # \u5982\u679c\u8f93\u5165\u5217\u8868\u4e3a\u7a7a\uff0c\u8fd4\u56de0\n        return 0\n    \n    # \u8fc7\u6ee4\u8d1f\u6570\u548c\u4e0d\u662f\u6574\u6570\u7684\u6570\u5b57\n    numbers = [num for num in lst if num >= 0 and isinstance(num, int)]\n    \n    odd_numbers = [num for num in numbers if num % 2 != 0]  # \u627e\u51fa\u5947\u6570\u6570\u5b57\n    squared_odd_numbers = [num ** 2 for num in odd_numbers]  # \u5c06\u5947\u6570\u6570\u5b57\u5e73\u65b9\n    \n    return sum(squared_odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    # \u786e\u4fdd\u8f93\u5165\u6570\u7ec4\u957f\u5ea6\u76f8\u7b49\n    if len(game) != len(guess):\n        raise ValueError(\"\u8f93\u5165\u6570\u7ec4\u957f\u5ea6\u5fc5\u987b\u76f8\u7b49\")\n\n    # \u521d\u59cb\u5316\u8fd4\u56de\u6570\u7ec4\n    result = [0] * len(game)\n\n    # \u904d\u5386\u6bcf\u4e2a\u5339\u914d\u7ed3\u679c\n    for i in range(len(game)):\n        # \u8ba1\u7b97\u731c\u6d4b\u4e0e\u5b9e\u9645\u5f97\u5206\u7684\u7edd\u5bf9\u5dee\u5f02\n        diff = abs(game[i] - guess[i])\n        # \u5c06\u5dee\u5f02\u503c\u6dfb\u52a0\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        result[i] = diff\n\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    for extension in extensions:\n        # \u8ba1\u7b97\u6269\u5c55\u540d\u7684\u5f3a\u5ea6\u5206\u6570\n        strength = count_uppercase_letters(extension) - count_lowercase_letters(extension)\n        \n        # \u5982\u679c\u5f53\u524d\u6269\u5c55\u540d\u7684\u5f3a\u5ea6\u5927\u4e8e\u5f53\u524d\u6700\u5f3a\u6269\u5c55\u540d\u7684\u5f3a\u5ea6\uff0c\u5219\u66f4\u65b0\u6700\u5f3a\u6269\u5c55\u540d\n        if strongest_extension is None or strength > strength_of(strongest_extension):\n            strongest_extension = extension\n\n    # \u683c\u5f0f\u5316\u8f93\u51fa\u7ed3\u679c\n    return f\"{class_name}.{strongest_extension}\"\n\n\ndef count_uppercase_letters(name):\n    return sum(c.isupper() for c in name)\n\n\ndef count_lowercase_letters(name):\n    return sum(c.islower() for c in name)\n\n\ndef strength_of(extension):\n    return count_uppercase_letters(extension) - count_lowercase_letters(extension)"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return any(b in word or word in b for word in a)"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    # \u904d\u5386\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\n    for digit in str(num):\n        # \u5982\u679c\u5f53\u524d\u4f4d\u662f\u5076\u6570\uff0c\u589e\u52a0\u5076\u6570\u8ba1\u6570\u5668\n        if int(digit) % 2 == 0:\n            even_count += 1\n        # \u5982\u679c\u5f53\u524d\u4f4d\u662f\u5947\u6570\uff0c\u589e\u52a0\u5947\u6570\u8ba1\u6570\u5668\n        else:\n            odd_count += 1\n\n    # \u8fd4\u56de\u5305\u542b\u5076\u6570\u548c\u5947\u6570\u6570\u5b57\u7684\u5143\u7ec4\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: ['I', 'X', 'C', 'M'],\n        5: ['V', 'L', 'D'],\n        2: ['II', 'A'],\n        3: ['III', 'M'],\n        4: ['IV'],\n        9: ['IX'],\n        16: ['XVI'],\n        33: ['XXXIII'],\n        47: ['XLVII'],\n    }\n\n    roman_numeral = ''\n    for key, value in roman_numerals.items():\n        while number >= key:\n            number -= key\n            roman_numeral += value[0]\n            if number >= 5:\n                roman_numeral += value[1]\n                number -= 5\n            else:\n                break\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # \u68c0\u67e5\u4e09\u4e2a\u8fb9\u957f\u662f\u5426\u6ee1\u8db3\u52fe\u80a1\u5b9a\u7406\n    if (a**2 + b**2) == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > len(max_unique_chars):\n            max_unique_chars = set(word)\n    return max(words) if max_unique_chars == \"\" else max_unique_chars"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    A hungry rabbit is given a certain number of carrots to eat,\n    but they need to eat more carrots to complete the day's meals.\n    Returns an array of [ total number of carrots eaten after meals,\n                         the number of carrots remaining after meals ]\n    \"\"\"\n    if remaining < need:\n        need = remaining\n    total_eaten = number + need\n    remaining = remaining - total_eaten\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    # \u68c0\u67e5\u64cd\u4f5c\u7b26\u5217\u8868\u548c\u64cd\u4f5c\u6570\u5217\u8868\u7684\u957f\u5ea6\u662f\u5426\u7b26\u5408\u8981\u6c42\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Length of operator list is not equal to length of operand list minus one.\")\n    \n    # \u6784\u5efa\u8868\u8fbe\u5f0f\u5e76\u8ba1\u7b97\u7ed3\u679c\n    result = \"\"\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            result += str(operand[i])\n        elif operator[i] == \"-\":\n            result += str(operand[i]) + \" - \"\n        elif operator[i] == \"*\":\n            result += str(operand[i]) + \" * \"\n        elif operator[i] == \"//\":\n            result += str(int(operand[i])) + \" // \"\n        elif operator[i] == \"**\":\n            result += str(int(operand[i])) + \" ** \"\n        else:\n            raise ValueError(\"Invalid operator in operator list.\")\n    \n    # \u53bb\u9664\u7ed3\u679c\u672b\u5c3e\u7684\u7a7a\u683c\u548c\u591a\u4f59\u7684\u7b26\u53f7\n    result = result.strip()\n    result = result[:-2] if result.endswith(\") \") else result[:-1]\n    return eval(result)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5e76\u68c0\u67e5\u662f\u5426\u4e3a\u7a7a\n    s = s.lower()\n    if not s:\n        return s\n\n    # \u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for i in range(len(s)):\n        # \u68c0\u67e5\u5b57\u7b26\u662f\u5426\u4e3a\u5b57\u6bcd\n        if s[i].isalpha():\n            # \u5982\u679c\u662f\u5b57\u6bcd\uff0c\u5219\u6839\u636e\u60c5\u51b5\u8f6c\u6362\u5927\u5c0f\u5199\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n            else:\n                s = s[:i+1] + s[i].lower() + s[i+1:]\n        else:\n            # \u5982\u679c\u4e0d\u662f\u5b57\u6bcd\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8\n            pass\n\n    return s"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode())\n    md5_string = md5_hash.hexdigest()\n    \n    return md5_string"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [4, 6, 8]\n    generate_integers(10, 14) => []\n\n    :param a: the lower bound of the range\n    :param b: the upper bound of the range\n    :return: an ascending list of even digits between a and b\n    \"\"\"\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
