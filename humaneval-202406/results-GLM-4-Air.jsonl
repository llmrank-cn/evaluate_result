{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Example usage:\n# print(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Should return False\n# print(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Should return True"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    balance = 0\n    group = \"\"\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            group += char\n        elif char == ')':\n            balance -= 1\n            group += char\n        if balance == 0 and group:\n            groups.append(group)\n            group = \"\"\n    return groups\n\n# Example usage:\n# print(separate_paren_groups('( ) (( )) (( )( ))'))  # Should return ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Example usage:\n# print(truncate_number(3.5))  # Output should be 0.5"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Example usage:\n# print(below_zero([1, 2, 3]))  # Should print False\n# print(below_zero([1, 2, -4, 5]))  # Should print True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # First, calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    # Then, calculate the sum of the absolute differences from the mean\n    mad = sum(abs(x - mean) for x in numbers)\n    # Finally, divide by the number of elements to get the average\n    return mad / len(numbers)\n\n# Example usage:\n# result = mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# print(result)  # Should output 1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, number in enumerate(numbers):\n        result.append(number)\n        if i < len(numbers) - 1:  # Check if it's not the last element\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                depth = max(depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(depth)\n    \n    return max_depths\n\n# Example usage:\n# Should print [2, 3, 1, 3]\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n# Example usage:\n# filtered_list = filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# print(filtered_list)  # Output should be ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return (total_sum, total_product)\n\n# Example usage:\n# print(sum_product([1, 2, 3, 4]))  # Output should be (10, 24)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    rolling_max_list = [numbers[0]]\n    current_max = numbers[0]\n\n    for number in numbers[1:]:\n        current_max = max(current_max, number)\n        rolling_max_list.append(current_max)\n\n    return rolling_max_list\n\n# Example usage:\n# print(rolling_max([1, 2, 3, 2, 3, 4, 2]))\n# Output would be: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    for i in range(len(string)):\n        # Check if the prefix is a palindrome\n        prefix = string[:i+1]\n        if is_palindrome(prefix):\n            # If it is, then append the reversed prefix to the original string\n            return string + prefix[::-1]\n    # If no palindrome prefix is found, return the original string appended to its reverse\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    # Ensure that both strings are of equal length\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    return result\n\n# Example usage:\n# print(string_xor('010', '110'))  # Should return '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))\n\n# Example usage:\n# print(longest([]))  # Should return None\n# print(longest(['a', 'b', 'c']))  # Should return 'a'\n# print(longest(['a', 'bb', 'ccc']))  # Should return 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Example usage:\n# Should return 1\nprint(greatest_common_divisor(3, 5))\n# Should return 5\nprint(greatest_common_divisor(25, 15))"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n# Example usage:\n# prefixes = all_prefixes('abc')\n# print(prefixes)  # Output should be: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n# Example usage (uncomment to test):\n# print(count_distinct_characters('xyzXYZ'))  # Should print 3\n# print(count_distinct_characters('Jerry'))   # Should print 4"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_dict = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beats_list = [notes_dict[note] for note in notes]\n    return beats_list\n\n# Example usage:\n# parse_music('o o| .| o| o| .| .| .| .| o o')"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    sub_len = len(substring)\n    for i in range(len(string) - sub_len + 1):\n        if string[i:i+sub_len] == substring:\n            count += 1\n    return count\n\n# Example usage:\n# print(how_many_times('', 'a'))  # Output: 0\n# print(how_many_times('aaa', 'a'))  # Output: 3\n# print(how_many_times('aaaa', 'aa'))  # Output: 3"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    int_to_numberals = {v: k for k, v in numberals_to_int.items()}\n    \n    # Convert the input string to a list of integers\n    numbers_list = [numberals_to_int[num] for num in numbers.split()]\n    \n    # Sort the list of integers\n    sorted_numbers_list = sorted(numbers_list)\n    \n    # Convert the sorted integers back to their string representations\n    sorted_numbers_string = ' '.join([int_to_numberals[num] for num in sorted_numbers_list])\n    \n    return sorted_numbers_string\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output should be 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n\n# Example usage:\n# Should return (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n\n# Should return (2.0, 2.0)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n# Example usage:\n# print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n# Example usage:\n# print(filter_integers(['a', 3.14, 5]))  # Output: [5]\n# print(filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    largest_div = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_div = i\n    return largest_div\n\n# Example usage:\n# print(largest_divisor(15))  # Should return 5"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n# Example usage:\n# print(factorize(8))  # Output: [2, 2, 2]\n# print(factorize(25)) # Output: [5, 5]\n# print(factorize(70)) # Output: [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n# Example usage:\n# print(flip_case('Hello'))  # Output should be 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n# Example usage:\n# print(concatenate([]))       # Output: ''\n# print(concatenate(['a', 'b', 'c']))  # Output: 'abc'"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases to validate the function\nprint(is_prime(6))      # False\nprint(is_prime(101))     # True\nprint(is_prime(11))      # True\nprint(is_prime(13441))   # True\nprint(is_prime(61))      # True\nprint(is_prime(4))       # False\nprint(is_prime(1))       # False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    # Define the range for the bisection method.\n    # For the purpose of this example, we'll use [-100, 100].\n    # This range might need adjustment depending on the expected roots.\n    a, b = -100, 100\n    tolerance = 1e-7  # Define the tolerance level for convergence.\n\n    # Check if there is a sign change between a and b\n    fa = poly(xs, a)\n    fb = poly(xs, b)\n    if fa * fb >= 0:\n        raise ValueError(\"Function does not change sign on the interval.\")\n\n    while (b - a) / 2.0 > tolerance:\n        x_mid = (a + b) / 2.0\n        f_mid = poly(xs, x_mid)\n\n        if f_mid == 0:\n            return x_mid\n        elif f_mid * fa < 0:\n            b = x_mid\n        else:\n            a = x_mid\n\n    return (a + b) / 2.0  # Return the midpoint of the final interval as the root."}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    third_indices_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    third_indices_elements.sort()\n    \n    # Create a new list to store the result\n    sorted_list = []\n    third_index = 0  # This will keep track of the sorted third elements\n    \n    # Iterate through the original list\n    for i in range(len(l)):\n        if i % 3 == 0:\n            # If the index is divisible by 3, use the next sorted element\n            sorted_list.append(third_indices_elements[third_index])\n            third_index += 1\n        else:\n            # Otherwise, keep the original element\n            sorted_list.append(l[i])\n    \n    return sorted_list\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # Should return [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Should return [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n\n# Example usage:\n# print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    # Initialize the maximum element to the first element of the list\n    max_elem = l[0]\n    # Iterate through the list to find the maximum element\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n\n# Example usage:\n# print(max_element([1, 2, 3]))  # Should return 3\n# print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Should return 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Example usage:\n# print(fizz_buzz(50))  # Expected output: 0\n# print(fizz_buzz(78))  # Expected output: 2\n# print(fizz_buzz(79))  # Expected output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    # Extract values at even indices and sort them\n    even_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    \n    # Create a new list to store the result\n    sorted_list = []\n    \n    # Iterate through the original list and insert sorted even values\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list.append(even_values.pop(0))  # Pop from the sorted list of even indices\n        else:\n            sorted_list.append(l[i])  # Keep the original value from the odd index\n\n    return sorted_list"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    prev, curr = 1, 2\n    count = 2  # Starting count with 2 because we already have the first two prime Fibonacci numbers.\n    \n    while count < n:\n        prev, curr = curr, prev + curr\n        if is_prime(curr):\n            count += 1\n            \n    return curr\n\n# Example usage:\n# print(prime_fib(1))  # Output: 2\n# print(prime_fib(2))  # Output: 3\n# print(prime_fib(3))  # Output: 5\n# print(prime_fib(4))  # Output: 13\n# print(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    # The list needs to have at least 3 elements to form a triple\n    if len(l) < 3:\n        return False\n\n    # Sort the list to make it easier to find a triple\n    l.sort()\n\n    # Check every combination of triplets\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n\n# Test cases to validate the function\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left, each pair\n    of cars will meet exactly once. This function calculates the total number\n    of such meetings (or \"collisions\").\n    \"\"\"\n    # Each car moving left to right will meet each car moving right to left exactly once.\n    return n * (n - 1)\n\n# Example usage:\nprint(car_race_collision(5))  # Output will be 20"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]\n\n# Example usage:\n# print(incr_list([1, 2, 3]))  # Output: [2, 3, 4]\n# print(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(digits[::-1])\n\n# Example usage:\n# print(change_base(8, 3))  # Should return '22'\n# print(change_base(8, 2))  # Should return '1000'\n# print(change_base(7, 2))  # Should return '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(3, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n# Example usage:\n# print(fib4(5))  # Should return 4\n# print(fib4(6))  # Should return 8\n# print(fib4(7))  # Should return 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]\n\n# Test cases to validate the function\nassert is_palindrome('') == True\nassert is_palindrome('aba') == True\nassert is_palindrome('aaaaa') == True\nassert is_palindrome('zbcd') == False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)\n\n# Example usage:\n# print(modp(3, 5))  # Should return 3\n# print(modp(1101, 101))  # Should return 2\n# print(modp(0, 101))  # Should return 1\n# print(modp(3, 11))  # Should return 8\n# print(modp(100, 101))  # Should return 1"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)\n\n# Test cases to verify the function\nprint(below_threshold([1, 2, 4, 10], 100))  # Should return True\nprint(below_threshold([1, 20, 4, 10], 5))   # Should return False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n\n# Test cases\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\nassert same_chars('abcd', 'dddddddabc') == True\nassert same_chars('dddddddabc', 'abcd') == True\nassert same_chars('eabcd', 'dddddddabc') == False\nassert same_chars('abcd', 'dddddddabce') == False\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n# You can uncomment the following lines to test the function\n# print(fib(10))  # Should return 55\n# print(fib(1))   # Should return 1\n# print(fib(8))   # Should return 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"<\"))       # False\nprint(correct_bracketing(\"<>\"))      # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))    # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = None\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            if increasing is False:\n                return False\n            increasing = True\n        elif l[i] < l[i - 1]:\n            if increasing is True:\n                return False\n            increasing = False\n\n    return True\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # Should return True\nprint(monotonic([1, 20, 4, 10]))  # Should return False\nprint(monotonic([4, 1, 0, -10]))  # Should return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Use set to find unique common elements and then convert to sorted list\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Start with the largest possible factor, which is n itself\n    largest_factor = None\n\n    # Divide n by 2 until it's no longer divisible by 2\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n\n    # Now n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    # Starting with 3, check only odd numbers for factors\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n        i += 2\n\n    # If n is a prime number greater than 2 at the end, then it's the largest factor\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor\n\n# Examples to test the function\nprint(largest_prime_factor(13195))  # Should return 29\nprint(largest_prime_factor(2048))   # Should return 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))\n\n# Example usage:\n# print(sum_to_n(30))  # Should return 465\n# print(sum_to_n(100)) # Should return 5050"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases to verify the implementation\nprint(correct_bracketing(\"(\"))       # False\nprint(correct_bracketing(\"()\"))      # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))    # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    # The derivative of a polynomial is computed by multiplying each coefficient by its respective power\n    # and then reducing the power by one. The result is a new list of coefficients.\n    # For example, for the term 'a * x^n', the derivative is 'n * a * x^(n-1)'.\n    # We can construct the derivative list by using a list comprehension that iterates over the input list\n    # (excluding the first element which corresponds to the constant term) and multiplies each coefficient\n    # by its respective index (which corresponds to the power of x).\n    # Note that the list comprehension starts from index 1 (xs[1]) since the derivative of the constant term\n    # (xs[0]) is 0 and does not contribute to the resulting polynomial.\n\n    return [\u7cfb\u6570 * \u6307\u6570 for \u6307\u6570, \u7cfb\u6570 in enumerate(xs[1:], start=1)]\n\n# Example usage:\n# Should print [1, 4, 12, 20]\nprint(derivative([3, 1, 2, 4, 5]))\n\n# Should print [2, 6]\nprint(derivative([1, 2, 3]))"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    a, b, c = 0, 0, 1\n    for i in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n# Example usage:\n# print(fibfib(1))  # Output should be 0\n# print(fibfib(5))  # Output should be 4\n# print(fibfib(8))  # Output should be 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n\n    # Check if 'y' is at the end of the string and if so, count it as a vowel\n    if s[-1].lower() == 'y':\n        count += 1\n    \n    # Count the vowels in the string\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n\n    return count\n\n# Additional test cases\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\nassert vowels_count(\"rhythm\") == 0\nassert vowels_count(\"encyclopedia\") == 5\nassert vowels_count(\"yttrium\") == 2  # 'y' at the end is counted as a vowel\nassert vowels_count(\"sky\") == 1     # 'y' at the end is counted as a vowel\nassert vowels_count(\"aEiOuy\") == 5  # All vowels including 'y' at the end"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift = shift % num_digits  # To handle shifts greater than the number of digits\n    if shift == 0:\n        return x_str\n    elif shift > num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract numbers from the string using split and list comprehension\n    # Then convert them to integers\n    fruits = [int(num) for num in s.split() if num.isdigit()]\n    # Subtract the sum of apples and oranges from the total number of fruits\n    return n - sum(fruits)"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    # Iterate over the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n    \n    # Return the smallest even value and its index in a list, or an empty list if not found\n    return [smallest_even, smallest_index] if smallest_even != float('inf') else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency = {}\n    for num in lst:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    for num in sorted(frequency.keys(), reverse=True):\n        if frequency[num] >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Add min value\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Add max value\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1\n\n# Example usage:\n# print(triangle_area(3, 4, 5))  # Should print 6.00\n# print(triangle_area(1, 2, 10)) # Should print -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Initialize the number of changes to 0\n    changes = 0\n    \n    # Calculate the length of the array\n    length = len(arr)\n    \n    # Iterate over the first half of the array\n    for i in range(length // 2):\n        # If the elements at the current position and its symmetric counterpart are not equal,\n        # increment the changes counter\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n            \n    # Return the total number of changes needed to make the array palindromic\n    return changes\n\n# Example usage:\n# print(smallest_change([1,2,3,5,4,7,9,6])) # Output: 4\n# print(smallest_change([1, 2, 3, 4, 3, 2, 2])) # Output: 1\n# print(smallest_change([1, 2, 3, 2, 1])) # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    sum1 = sum(len(word) for word in lst1)\n    sum2 = sum(len(word) for word in lst2)\n    return lst1 if sum1 <= sum2 else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    prime_factors = []\n    for i in range(2, a):\n        while is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a //= i\n            if len(prime_factors) > 2:  # More than 3 prime factors\n                return False\n    return len(prime_factors) == 3 and is_prime(a)  # Check if the last factor is prime\n\n# Examples:\nprint(is_multiply_prime(30))  # Should return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of 'a'\n    cube_root = round(abs(a) ** (1/3))\n    # Return True if the cube of the cube root equals 'a', otherwise False\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(digit in prime_hex_digits for digit in num)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage:\n# print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n# Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\n# Examples\nprint(prime_length('Hello'))    # == True\nprint(prime_length('abcdcba'))   # == True\nprint(prime_length('kittens'))   # == True\nprint(prime_length('orange'))    # == False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 2  # Both 1 and 10 are counted (starting or ending with 1)\n    \n    # Numbers starting or ending with 1 for n-digits\n    # There are 9 possible tens digits (2-9) and 10 possible units digits (0-9)\n    # for n-digit numbers where n > 1\n    return 2 * (10**(n-1) - 1)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary_representation = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary representation\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    \n    # Convert the sum back to binary\n    return bin(sum_of_digits)[2:]\n\n# Example usage:\n# print(solve(1000))  # Output should be \"1\"\n# print(solve(150))   # Output should be \"110\"\n# print(solve(147))   # Output should be \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)\n\n# Example usage:\n# result = add([4, 2, 6, 7])\n# print(result)  # Output should be 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    ordered_words = [\"\".join(sorted(word)) for word in words]\n    return \" \".join(ordered_words)\n\n# Test cases to verify the function works as expected\nprint(anti_shuffle('Hi'))  # Should return 'Hi'\nprint(anti_shuffle('hello'))  # Should return 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Should return 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # First sort by row, then sort each row's columns in descending order\n    coordinates.sort(key=lambda c: (c[0], -c[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # Create a copy of the input array to avoid modifying the original\n    sorted_array = array.copy()\n    \n    # Check if the sum of the first and last elements is odd or even\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        # Sort in descending order if the sum is even\n        sorted_array.sort(reverse=True)\n    else:\n        # Sort in ascending order if the sum is odd\n        sorted_array.sort()\n    \n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    def shift_char(c, shift):\n        if c.isalpha():\n            base = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - base + shift) % 26 + base)\n        return c\n\n    shift_value = 2 * 2\n    return ''.join(shift_char(char, shift_value) for char in s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    # First we check if the list has at least two distinct elements\n    if len(set(lst)) < 2:\n        return None\n    \n    # We initialize two variables to hold the smallest and second smallest values\n    # We use float('inf') which acts as positive infinity, ensuring any number in the list will be smaller\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    # Loop through the list to find the smallest and second smallest elements\n    for num in lst:\n        if num < smallest:\n            # Update both smallest and second smallest\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            # Update second smallest only\n            second_smallest = num\n    \n    # If second_smallest is still infinity, that means we didn't find a second smallest element\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Should return 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Should return 2\nprint(next_smallest([]))               # Should return None\nprint(next_smallest([1, 1]))           # Should return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences using the delimiters '.', '?', or '!'\n    sentences = []\n    start = 0\n    for delimiter in '.?!':\n        parts = S.split(delimiter)\n        for part in parts:\n            if start < len(part):\n                sentences.append(part.strip())\n            start = len(part) + len(delimiter)\n\n    # Count sentences that start with 'I'\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Check if all inputs are integers\n    if all(isinstance(i, int) for i in (x, y, z)):\n        # Check if any number is the sum of the other two\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = alphabet.index(char.lower()) + 2\n                encoded_char = alphabet[index] if index < 26 else alphabet[index - 26]\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    \n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = max([x for x in lst if is_prime(x)])\n    return sum(int(digit) for digit in str(largest_prime))\n\n# Examples\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output should be 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))            # Output should be 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))   # Output should be 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))                # Output should be 11\nprint(skjkasdkd([0,81,12,3,1,21]))                                        # Output should be 3\nprint(skjkasdkd([0,8,1,2,1,7]))                                           # Output should be 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(input_dict):\n    if not input_dict:\n        return False\n    \n    is_lower = None\n    for key in input_dict:\n        if not isinstance(key, str):\n            return False\n        if is_lower is None:\n            is_lower = key.islower()\n        elif (key.islower() != is_lower) and (key.isupper() != is_lower):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n# Examples\nprint(count_up_to(5))  # => [2,3]\nprint(count_up_to(11)) # => [2,3,5,7]\nprint(count_up_to(0))  # => []\nprint(count_up_to(20)) # => [2,3,5,7,11,13,17,19]\nprint(count_up_to(1))  # => []\nprint(count_up_to(18)) # => [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    uppercase_vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):  # Iterate over even indices\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the string to a float\n    num = float(value)\n    # Find the nearest integers\n    lower_int = int(num)\n    upper_int = lower_int if num >= 0 else lower_int - 1\n    upper_int = upper_int + 1 if num < 0 else upper_int\n    \n    # Calculate the distance to the lower and upper integers\n    lower_dist = abs(num - lower_int)\n    upper_dist = abs(num - upper_int)\n    \n    # Return the closest integer, rounding away from zero if equidistant\n    if lower_dist < upper_dist:\n        return lower_int\n    else:\n        return upper_int if num > 0 or (num < 0 and lower_dist == upper_dist) else lower_int\n\n# Examples\nprint(closest_integer(\"10\"))    # Should return 10\nprint(closest_integer(\"15.3\"))  # Should return 15\n# Additional test cases\nprint(closest_integer(\"14.5\"))  # Should return 15\nprint(closest_integer(\"-14.5\")) # Should return -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = [n]  # Start with the first level\n    current_stones = n\n\n    for i in range(1, n):  # Start from the second level\n        if current_stones % 2 == 0:\n            # If current number of stones is even, add the next even number\n            current_stones += 2\n        else:\n            # If current number of stones is odd, add the next odd number\n            current_stones += 2\n        stones.append(current_stones)\n\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces\n    s = s.replace(',', ' ')\n    # Split the string by spaces to get words\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Ensure the range is valid\n    if x > y:\n        return -1\n    \n    # Start from the maximum number in the range that is even\n    # If y is odd, decrease it by 1 to make it even\n    max_even = y if y % 2 == 0 else y - 1\n    \n    # Iterate backwards to find the largest even number\n    while max_even >= x:\n        if max_even % 2 == 0:\n            return max_even\n        max_even -= 2  # Decrease by 2 to skip odd numbers\n    \n    # If no even number is found, return -1\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m + 1)) / (m - n + 1))\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n    \n    return sorted([num for num in x if not has_even_digit(num)])\n\n# Example usage:\n# print(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\n# print(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter the array to include only integers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    # Map each digit to its corresponding name\n    digit_to_name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    # Replace each digit with its name\n    named_arr = [digit_to_name[num - 1] for num in reversed_arr]\n    return named_arr"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    # Find the index of the first element in the original array in the sorted array\n    index_in_sorted = sorted_arr.index(arr[0])\n    \n    # Check if the array from the found index to the end is sorted and\n    # the beginning of the array up to the found index is sorted\n    return arr[index_in_sorted:] + arr[:index_in_sorted] == sorted_arr"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Count the odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    # Count the even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    # Check if there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Split the string into words and initialize a dictionary to count occurrences\n    counts = {}\n    words = test.split()\n    \n    # Count the frequency of each letter\n    for word in words:\n        for letter in word:\n            if letter in counts:\n                counts[letter] += 1\n            else:\n                counts[letter] = 1\n\n    # Find the maximum occurrence\n    max_count = max(counts.values()) if counts else 0\n    \n    # Create a dictionary with letters that have the maximum occurrence\n    max_letters = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return max_letters"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Create a set of characters to be deleted for faster lookup\n    delete_chars = set(c)\n    # Filter the string s by removing characters that are in delete_chars\n    filtered_string = ''.join([char for char in s if char not in delete_chars])\n    # Check if the filtered string is a palindrome\n    is_palindrome = filtered_string == filtered_string[::-1]\n    # Return the result as a tuple\n    return (filtered_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_digits = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    # Initialize the minimum sum with the first element of the array\n    min_sum = nums[0]\n    # Initialize the current sum with the first element of the array\n    current_sum = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        # If the current sum is negative, reset it to the current number\n        # because a negative sum will not contribute to a minimum subarray sum\n        current_sum = min(num, current_sum + num)\n        # Update the minimum sum if the current sum is less than the minimum sum\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Example usage:\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output should be 1\nprint(minSubArraySum([-1, -2, -3]))        # Output should be -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_fills = 0\n    for row in grid:\n        row_sum = sum(row)\n        total_fills += math.ceil(row_sum / capacity)\n    return total_fills"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Define a custom key function that counts the number of ones in the binary\n    # representation of an integer, and uses the integer itself as a secondary sort key.\n    def count_ones(x):\n        return bin(x).count('1'), x\n\n    # Use the sorted function with the custom key.\n    return sorted(arr, key=count_ones)\n\n# Example usage:\n# print(sort_array([1, 5, 2, 3, 4]))  # Output should be [1, 2, 3, 4, 5]\n# print(sort_array([1, 0, 2, 3, 4]))  # Output should be [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\n# Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word_reversed = word[::-1]\n    for i in range(1, len(word_reversed) - 1):\n        if word_reversed[i] in vowels and word_reversed[i - 1] not in vowels and word_reversed[i + 1] not in vowels:\n            return word_reversed[i]\n    return \"\"\n\n# Example usage:\n# print(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\n# print(get_closest_vowel(\"FULL\"))    # Output: \"U\"\n# print(get_closest_vowel(\"quick\"))   # Output: \"\"\n# print(get_closest_vowel(\"ab\"))      # Output: \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Function to check if a single string has balanced parentheses\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Check if concatenating in any order results in a balanced string\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'\n\n# Example usage:\nprint(match_parens(['()(', ')']))  # Should return 'Yes'\nprint(match_parens([')', ')']))    # Should return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in descending order and return the first k elements\n    # which are the k largest elements, then sort those k elements in ascending order\n    return sorted(arr[:k], reverse=True)[:k][::-1]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n    \n# Examples\nprint(solution([5, 8, 7, 1]))  # ==> 12\nprint(solution([3, 3, 3, 3, 3]))  # ==> 9\nprint(solution([30, 13, 24, 321]))  # ==> 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Initialize the sum\n    sum_elements = 0\n    \n    # Iterate over the first k elements\n    for i in range(k):\n        # Check if the element has at most two digits\n        if 10 <= abs(arr[i]) <= 99:\n            sum_elements += arr[i]\n    \n    return sum_elements\n\n# Example usage:\n# arr = [111,21,3,4000,5,6,7,8,9]\n# k = 4\n# print(add_elements(arr, k))  # Output should be 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Split the date string by '-' and check if it is in the correct format mm-dd-yyyy\n    try:\n        month, day, year = date.split('-')\n        if len(year) != 4 or not (1 <= int(month) <= 12) or not (1 <= int(day) <= 31):\n            return False\n    except ValueError:\n        return False\n\n    # Define the number of days in each month\n    month_days = {\n        '01': 31, '03': 31, '05': 31, '07': 31, '08': 31, '10': 31, '12': 31,\n        '04': 30, '06': 30, '09': 30, '11': 30,\n        '02': 29 if (int(year) % 4 == 0 and int(year) % 100 != 0) or (int(year) % 400 == 0) else 28\n    }\n\n    # Check if the day is valid for the month\n    if int(day) > month_days.get(month, 0):\n        return False\n\n    return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check if there are whitespaces\n    if ' ' in txt:\n        return txt.split()\n    # Check if there are commas\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count lower-case letters with odd order in the alphabet\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    # Check if the list is empty or has one element\n    if len(lst) <= 1:\n        return True\n    \n    # Check for duplicates and if the list is sorted\n    seen = set()\n    for num in lst:\n        if num in seen:  # More than one occurrence of the same number\n            return False\n        seen.add(num)\n        if num > lst[lst.index(num) + 1]:  # Compare current number with the next one\n            return False\n            \n    return True\n\n# Examples\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n\n    if start_max > end_min:\n        return \"NO\"\n    intersection_length = end_min - start_max + 1\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\n\n# Samples\nprint(intersection((1, 2), (2, 3)))  # ==> \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # ==> \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # ==> \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        product_of_signs *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    min_heap = []\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n\n    # Helper function to get neighbors\n    def get_neighbors(x, y):\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                yield nx, ny\n\n    # Initialize the heap with all possible starting points\n    for i in range(N):\n        for j in range(N):\n            heappush(min_heap, (grid[i][j], i, j, [grid[i][j]]))\n\n    # Process the heap until we find the minimum path of length k\n    while min_heap:\n        current_val, x, y, path = heappop(min_heap)\n        if len(path) == k:\n            return path\n        for nx, ny in get_neighbors(x, y):\n            new_path = path + [grid[nx][ny]]\n            heappush(min_heap, (new_path[-1], nx, ny, new_path))\n\n# Example usage:\n# print(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\n# print(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    # Initialize the sequence with the first number\n    sequence = [3]\n    \n    # Special case when n is 0\n    if n == 0:\n        return sequence\n    \n    # Start the sequence with the second number\n    if n >= 1:\n        sequence.append(1 + 1 / 2)  # tri(1) = 1 + 1/2\n    \n    # Compute the rest of the sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # If i is even\n            sequence.append(1 + i / 2)\n        else:  # If i is odd\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    \n    # The sequence needs the tri(n + 1)th number, adjust the range\n    if n > 1:\n        sequence[n] = sequence[n - 2] + sequence[n - 1] + sequence[n + 1]\n    \n    return sequence\n\n# Example usage\nprint(tri(3))  # Output should be [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    # Check if there's at least one bracket that has been opened and not closed yet\n    return any(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        # Check if the character before the last one is a space or it's the first character\n        return (len(txt) == 1 or txt[-2] == ' ')\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # Start from the second element and iterate through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is smaller than the previous one\n        if arr[i] < arr[i - 1]:\n            # Return the index of the current element\n            return i - 1\n    # If no such element is found, return -1\n    return -1\n\n# Examples:\nprint(can_arrange([1,2,4,3,5]))  # Should return 3\nprint(can_arrange([1,2,3]))      # Should return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    # Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate through the list to find the required integers\n    for num in lst:\n        if num < 0:\n            # Update the largest_negative if the current number is larger than the current largest_negative\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            # Update the smallest_positive if the current number is smaller than the current smallest_positive\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    # Return the result as a tuple\n    return (largest_negative, smallest_positive)\n\n# Examples\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Expected output: (None, 1)\nprint(largest_smallest_integers([]))                  # Expected output: (None, None)\nprint(largest_smallest_integers([0]))                 # Expected output: (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Function to handle string representations of numbers with commas\n    def parse_number(s):\n        return float(s.replace(',', '.')) if ',' in s else float(s)\n\n    # Convert to float if either is a string that represents a number\n    a_p = parse_number(a) if isinstance(a, str) and a.replace('.', '', 1).replace(',', '', 1).isdigit() else a\n    b_p = parse_number(b) if isinstance(b, str) and b.replace('.', '', 1).replace(',', '', 1).isdigit() else b\n\n    # Compare the values\n    if a_p == b_p:\n        return None\n    else:\n        # Return the larger value in its original type\n        if isinstance(a, str) and isinstance(b, str):\n            return a if a_p > b_p else b\n        elif isinstance(a, str):\n            return a\n        elif isinstance(b, str):\n            return b\n        else:\n            return max(a_p, b_p)\n\n# Test cases\nprint(compare_one(1, 2.5))         # \u279e 2.5\nprint(compare_one(1, \"2,3\"))       # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))     # \u279e \"6\"\nprint(compare_one(\"1\", 1))         # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    # If n is odd or less than 8, it cannot be written as the sum of 4 even numbers\n    if n % 2 != 0 or n < 8:\n        return False\n    # Subtract 4 (the smallest even number) from n and check if the result is even\n    # This ensures that the remaining sum can be made up of three even numbers\n    return (n - 4) % 2 == 0\n\n# Example usage:\n# is_equal_to_sum_even(4) == False\n# is_equal_to_sum_even(6) == False\n# is_equal_to_sum_even(8) == True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace sequences of underscores with a single hyphen\n    # This accounts for more than 2 consecutive spaces originally\n    return text.replace('__', '-')\n\n# Example usage:\n# print(fix_spaces(\"Example\"))        # \"Example\"\n# print(fix_spaces(\"Example 1\"))       # \"Example_1\"\n# print(fix_spaces(\" Example 2\"))      # \"_Example_2\"\n# print(fix_spaces(\" Example   3\"))    # \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if the file name starts with a letter\n    if not file_name[0].isalpha():\n        return 'No'\n    \n    # Split the file name into two parts, name and extension\n    parts = file_name.split('.')\n    \n    # Check if there is exactly one dot and the extension is one of the allowed types\n    if len(parts) != 2 or parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if the name part contains no more than three digits\n    digits = sum(c.isdigit() for c in parts[0])\n    if digits > 3:\n        return 'No'\n    \n    # If all conditions are met, return 'Yes'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n        else:\n            total_sum += value\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        \"\"\"Check if a number is a prime number.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert the string representations to Fraction objects\n    fraction_x = Fraction(x)\n    fraction_n = Fraction(n)\n    \n    # Multiply the two fractions\n    result = fraction_x * fraction_n\n    \n    # Check if the result is a whole number (integer)\n    return result.denominator == 1\n\n# Example usage:\nprint(simplify(\"1/5\", \"5/1\"))  # Should return True\nprint(simplify(\"1/6\", \"2/1\"))  # Should return False\nprint(simplify(\"7/10\", \"10/2\"))  # Should return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Use the helper function to create a list of tuples (number, sum_of_digits)\n    # which will be used for sorting\n    nums_with_sums = [(num, sum_of_digits(num)) for num in nums]\n\n    # Sort the list of tuples based on the sum_of_digits, and in case of a tie,\n    # the original index of the number in the list\n    sorted_nums = sorted(nums_with_sums, key=lambda x: (x[1], nums.index(x[0])))\n\n    # Extract the sorted numbers from the list of tuples\n    sorted_nums_only = [num for num, _ in sorted_nums]\n\n    return sorted_nums_only"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_first_last_odd(n):\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 == 1 and int(str_n[-1]) % 2 == 1\n\n    return len([num for num in nums if num > 10 and is_first_last_odd(num)])"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Create the integer array a with the formula given\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize a counter for valid triples\n    count = 0\n    \n    # Loop through all possible triples\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # Check if the sum of the elements is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n# Example usage:\n# n = 5\n# print(get_max_triples(n)) # Output: 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    order = planets.index(planet1), planets.index(planet2)\n    if order[0] > order[1]:  # Ensure planet1 is closer to the sun than planet2\n        order = order[1], order[0]\n    # Slice the list to get the planets between planet1 and planet2\n    return tuple(planets[order[0]+1:order[1]])\n\n# Examples\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # ==> (\"Venus\",)\nprint(bf(\"Mercury\", \"Uranus\"))   # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by the length of the strings, and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    return x if is_prime(n) else y\n\n# Examples:\nprint(x_or_y(7, 34, 12))  # Should return 34\nprint(x_or_y(15, 8, 5))   # Should return 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    # Filter out non-integers and negative numbers, then square the odd numbers\n    squared_odds = [x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0]\n    # Return the sum of these squared numbers, doubled\n    return sum(squared_odds) * 2\n\n# Examples\nprint(double_the_difference([1, 3, 2, 0]))  # Should return 10\nprint(double_the_difference([-1, -2, 0]))   # Should return 0\nprint(double_the_difference([9, -2]))       # Should return 81\nprint(double_the_difference([0]))           # Should return 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for s, g in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # If the length of the second word is greater than the first, it cannot be a substring\n    if len(a) < len(b):\n        return False\n    \n    # Concatenate 'a' with itself to allow for rotation checking\n    a_double = a + a\n    \n    # Check if 'b' or any of its rotations is a substring of 'a_double'\n    for i in range(len(b)):\n        # Create a rotation of 'b' by slicing\n        rotation = b[i:] + b[:i]\n        if rotation in a_double:\n            return True\n            \n    return False\n\n# Test cases as provided\nassert cycpattern_check(\"abcd\",\"abd\") == False\nassert cycpattern_check(\"hello\",\"ell\") == True\nassert cycpattern_check(\"whassup\",\"psus\") == False\nassert cycpattern_check(\"abab\",\"baa\") == True\nassert cycpattern_check(\"efef\",\"eeff\") == False\nassert cycpattern_check(\"himenss\",\"simen\") == True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_pairs = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, symbol in roman_pairs:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral\n\n# Examples\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # First, sort the sides so that the largest side is last\n    sides = sorted([a, b, c])\n    # Now, sides[2] is the hypotenuse, and sides[0] and sides[1] are the other two sides\n    # Check if the sum of squares of the smaller sides equals the square of the largest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    return max_word\n\n# Example usage:\n# print(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\n# print(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\n# print(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))  # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots\n    total_eaten = number + min(need, remaining)\n    # Calculate the number of carrots left\n    left = max(0, remaining - need)\n    # Return the result as an array\n    return [total_eaten, left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, val in zip(operator, operand[1:]):\n        expression += f' {op} {val}'\n    return eval(expression)\n\n# Example usage:\n# operators = ['+', '*', '-']\n# operands = [2, 3, 4, 5]\n# result = do_algebra(operators, operands)\n# print(result)  # Output would be 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Check if the string contains any letters\n    contains_letters = any(c.isalpha() for c in s)\n    \n    # If there are no letters, reverse the whole string\n    if not contains_letters:\n        return s[::-1]\n    \n    # Otherwise, reverse the case of each letter and keep other characters the same\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n# Example usage:\n# print(string_to_md5('Hello world'))  # Should print '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Create an empty list to store even digits\n    even_digits = []\n    \n    # Use the min and max functions to handle both a < b and a > b cases\n    start = min(a, b)\n    end = max(a, b) + 1  # +1 to include 'b' in the range if 'b' has even digits\n    \n    # Loop through the range from start to end\n    for num in range(start, end):\n        # Loop through each digit in the number converted to a string\n        for digit in str(num):\n            # Check if the digit is even and not already in the list\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    \n    # Remove duplicates and sort the list of even digits\n    even_digits = sorted(list(set(even_digits)))\n    \n    return even_digits\n\n# Examples given in the docstring\nprint(generate_integers(2, 8))  # => [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # => [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # => []"}
