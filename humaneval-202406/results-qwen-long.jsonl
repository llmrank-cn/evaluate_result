{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Test cases\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Output: False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Output: True"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(numbers)\n    return mad\n\n\n# Test case provided by the user\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        count = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                max_depth = max(max_depth, count)\n            elif char == ')':\n                count -= 1\n        result.append(max_depth)\n    return result\n\n# Test case\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = [s for s in strings if substring in s]\n    return result"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n    \n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n        \n    return result\n\n# Test case\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\"\"\"\n    # Find the longest palindrome suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            break\n\n    # Append the reversed prefix to the end of the string\n    prefix = string[:i]\n    return string + prefix[::-1]\n\n# Test cases\nprint(make_palindrome(''))\nprint(make_palindrome('cat'))\nprint(make_palindrome('cata'))"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n# Test case\nprint(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'c'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n# Test cases\nprint(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    result = \" \".join(str(i) for i in range(n + 1))\n    return result"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    \n    # Create a set to store unique characters\n    unique_chars = set(string)\n    \n    # Return the length of the set, which is the number of distinct characters\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    parsed_notes = []\n    for note in music_string.split():\n        parsed_notes.append(note_dict[note])\n    return parsed_notes\n\n\n# Test case\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += len(substring)\n    return count\n\n# Test cases\nprint(how_many_times('', 'a'))  # Output: 0\nprint(how_many_times('aaa', 'a'))  # Output: 3\nprint(how_many_times('aaaa', 'aa'))  # Output: 3"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    number_list = [num_map[n] for n in numbers.split()]\n    sorted_numbers = [str(n) for n in sorted(number_list)]\n    return ' '.join(sorted_numbers)\n\n# Test case\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = None\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n                \n    # Ensure the pair is sorted in ascending order\n    return (min(closest_pair), max(closest_pair))\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    return [((num - min_num) / (max_num - min_num)) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = n - 1\n    while i > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test cases\nprint(factorize(8))  # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers\n\n# Test case\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    n = len(xs)\n    assert n % 2 == 0, \"Number of coefficients should be even\"\n    assert xs[n//2] != 0, \"The largest non-zero coefficient cannot be zero\"\n\n    # Coefficients are ordered from highest degree to lowest, so we need to reverse them\n    xs.reverse()\n\n    # Calculate the initial interval based on the roots of the highest degree and second-degree terms\n    a = -abs(xs[1] / xs[0])\n    b = 0 if xs[1] > 0 else 2 * abs(xs[1] / xs[0])\n\n    # Bisection method\n    epsilon = 1e-9\n    while b - a > epsilon:\n        c = (a + b) / 2\n        if poly(xs, c) < 0:\n            a = c\n        else:\n            b = c\n\n    return round(c, 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # Collect elements at indices divisible by 3 into a separate list\n    thirds = [l[i] for i in range(0, len(l), 3)]\n    \n    # Sort the collected elements\n    thirds.sort()\n    \n    # Create a new list with the sorted elements at the appropriate indices\n    new_l = l.copy()\n    for i in range(0, len(l), 3):\n        new_l[i] = thirds.pop(0)\n    \n    return new_l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))\n\n# Test case\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n\n# Test cases\nprint(max_element([1, 2, 3]))  # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count('7')\n    return count\n\n# Test cases\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    \n    new_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l.append(even_indices.pop(0))\n        else:\n            new_l.append(l[i])\n    \n    return new_l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements back in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    fib_num = 2  # Start with the first Fibonacci number after 1 (which is already a prime)\n    \n    while count < n:\n        if is_prime(fib_num):\n            count += 1\n        fib_num = fib(fib_num + 1)\n    \n    return fib_num - 1  # Subtract 1 because we incremented fib_num after checking the last prime Fibonacci number\n\n# Test cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    # Create a set to store unique elements\n    unique_elements = set(l)\n    \n    # Iterate through each element in the list\n    for elem1 in unique_elements:\n        # Subtract the first element from zero\n        target = -elem1\n        # Create a tuple with the current element removed\n        filtered_list = tuple(filter(lambda x: x != elem1, l))\n        \n        # Use a two pointers approach to find the other two elements\n        left, right = 0, len(filtered_list) - 1\n        while left < right:\n            elem2, elem3 = filtered_list[left], filtered_list[right]\n            \n            # Check if the sum of three elements is zero\n            if elem2 + elem3 == target:\n                return True\n            # Adjust pointers based on the sum being less or greater than the target\n            elif elem2 + elem3 < target:\n                left += 1\n            else:\n                right -= 1\n                \n    # If no triple sums to zero, return False\n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))   # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))   # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))             # False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    # Create two lists representing the cars moving left and right\n    left_cars = [-i for i in range(1, n+1)]\n    right_cars = [i for i in range(1, n+1)]\n\n    # Initialize the collision count\n    collisions = 0\n\n    # Iterate through each car on the left\n    for left_car in left_cars:\n        # Iterate through each car on the right\n        for right_car in right_cars:\n            # If the absolute difference between the positions is 1, a collision occurs\n            if abs(left_car - right_car) == 1:\n                collisions += 1\n                # Remove both cars from consideration to avoid double-counting\n                right_cars.remove(right_car)\n                break\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    unique_elements = set(l)\n    for num in unique_elements:\n        if -num in unique_elements and num != -num:\n            return True\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # Output: False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # Output: False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # Output: False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # Output: True\nprint(pairs_sum_to_zero([1]))  # Output: False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    digits = \"0123456789\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x = x // base\n    return result\n\n# Test cases\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (1 / 2) * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_sequence = [0, 0, 2, 0] + [0] * (n - 3)\n    \n    for i in range(4, n + 1):\n        fib_sequence[i] = sum(fib_sequence[i - j] for j in range(1, min(i, 5)))\n    \n    return fib_sequence[n]\n\n# Test cases\nprint(fib4(5)) # Output: 4\nprint(fib4(6)) # Output: 8\nprint(fib4(7)) # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    length = len(l)\n    mid = length // 2\n\n    if length % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n\n    return result"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    char_count = [0] * 26  # Assuming only lowercase letters are considered\n\n    for char in s0:\n        char_count[ord(char) - ord('a')] += 1\n\n    for char in s1:\n        char_count[ord(char) - ord('a')] -= 1\n        if char_count[ord(char) - ord('a')] < 0:\n            return False\n\n    return all(count == 0 for count in char_count)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))   # Output: False\nprint(correct_bracketing(\"<>\"))  # Output: True\nprint(correct_bracketing(\"<<><>>\"))  # Output: True\nprint(correct_bracketing(\"><<>\"))  # Output: False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n\n        if not increasing and not decreasing:\n            return False\n\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases\nprint(largest_prime_factor(13195)) # Output: 29\nprint(largest_prime_factor(2048)) # Output: 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"(\"))  # Output: False\nprint(correct_bracketing(\"()\"))  # Output: True\nprint(correct_bracketing(\"(()())\"))  # Output: True\nprint(correct_bracketing(\")(()\"))  # Output: False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative_coeffs = []\n    for index, coeff in enumerate(xs):\n        if index == 0:\n            derivative_coeffs.append(0)\n        else:\n            derivative_coeffs.append(index * coeff)\n    return derivative_coeffs\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    # Initialize a list to store fibfib numbers\n    fibfib_seq = [0, 0, 1] + [0] * (n - 2)\n    \n    for i in range(3, n + 1):\n        fibfib_seq[i] = fibfib_seq[i - 1] + fibfib_seq[i - 2] + fibfib_seq[i - 3]\n    \n    return fibfib_seq[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    count = sum(1 for char in s if char in vowels)\n    if s[-1] == 'y':\n        count += 1\n    return count\n\n# Test cases\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\nassert vowels_count(\"fly\") == 1\nassert vowels_count(\"sky\") == 2\nassert vowels_count(\"vowelcount\") == 5\nassert vowels_count(\"consonant\") == 0\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    digits = [int(d) for d in str(abs(x))]\n    num_digits = len(digits)\n    \n    if shift >= num_digits:\n        return ''.join(map(str, digits[::-1]))\n    else:\n        shifted_digits = digits[shift:] + digits[:shift]\n        return ''.join(map(str, shifted_digits))"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = s.split(\" \")\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = None\n    index = -1\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                index = i\n                \n    if smallest_even is None:\n        return []\n    else:\n        return [smallest_even, index]\n\n# Test cases\nprint(pluck([4,2,3]))  # Output: [2, 1]\nprint(pluck([1,2,3]))  # Output: [2, 1]\nprint(pluck([]))       # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    for key, value in freq.items():\n        if value >= key and key > 0:\n            return key\n    \n    return -1\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1])) # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Output: 3\nprint(search([5, 5, 4, 4, 4])) # Output: -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n            \n    return result\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4])) # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5])) # Output: [5, 5, 5, 5]\nprint(strange_sort_list([])) # Output: []"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        semi_perimeter = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    left = 0\n    right = n - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            count += abs(arr[left] - arr[right])\n            left += 1\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n            \n    return count\n\n# Test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6])) # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1])) # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def count_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    if count_chars(lst1) < count_chars(lst2):\n        return lst1\n    elif count_chars(lst1) > count_chars(lst2):\n        return lst2\n    else:\n        return lst1\n\n# Test cases\nprint(total_match([], [])) # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi'])) # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])) # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])) # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5'])) # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a = a / prime\n    return len(factors) == 3 and a == 1\n\n# Test case\nprint(is_multiply_prime(30))  # Should print: True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:  # Special case: 1 is a simple power of any non-zero number\n        return n != 0\n    for i in range(1, int(x ** 0.5) + 1):  # Check possible values of n**int\n        if x == i ** n:\n            return True\n    return False\n\n# Test cases\nprint(is_simple_power(1, 4))  # => True\nprint(is_simple_power(2, 2))  # => True\nprint(is_simple_power(8, 2))  # => True\nprint(is_simple_power(3, 2))  # => False\nprint(is_simple_power(3, 1))  # => False\nprint(is_simple_power(5, 3))  # => False"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    # Find the cube root of the input number\n    cube_root = round(a ** (1/3))\n    \n    # Check if the cube of the rounded cube root is equal to the input number\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = set('2357BDF')\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' prefix\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s) - 2):\n        triplet = s[i:i+3]\n        if len(set(triplet)) != 3:\n            return False\n        if triplet in seen:\n            return False\n        seen.add(triplet)\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    # Initialize count variable\n    count = 0\n    \n    # Count numbers starting with 1\n    for i in range(1, 10**(n-1) + 1):\n        num_str = str(i)\n        if num_str[0] == '1':\n            count += 1\n            \n    # Count numbers ending with 1\n    for i in range(10**(n-1), 10**n):\n        num_str = str(i)\n        if num_str[-1] == '1':\n            count += 1\n            \n    # Return the total count\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = bin(sum(int(digit) for digit in str(N))).replace(\"0b\", \"\")\n    return binary_sum.zfill(len(str(N)))\n\n# Test cases from the example\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n\n# Example\nresult = add([4, 2, 6, 7])\nprint(result)  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [word[::-1] for word in words]\n    result = ' '.join(sorted_word[::-1] for sorted_word in sorted_words)\n    return result\n\n# Test cases\nprint(anti_shuffle('Hi'))  # Output: 'Hi'\nprint(anti_shuffle('hello'))  # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                coordinates.append((i, j))\n                \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Test cases\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # Expected: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1)) # Expected: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3)) # Expected: [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n    \n    if sum(array[:2]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n        \n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n\n# Test cases\nprint(encrypt('hi'))  # Should return 'lm'\nprint(encrypt('asdfghjkl'))  # Should return 'ewhjklnop'\nprint(encrypt('gf'))  # Should return 'kj'\nprint(encrypt('et'))  # Should return 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique_lst = list(set(lst))  # Remove duplicates\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # == 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # == 2\nprint(next_smallest([]))  # == None\nprint(next_smallest([1, 1]))  # == None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.replace('.', ' ').replace('!', ' ').replace('?', ' ').split()\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    return boredom_count\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases\nprint(any_int(5, 2, 7)) # \u279e True\nprint(any_int(3, 2, 2)) # \u279e False\nprint(any_int(3, -2, 1)) # \u279e True\nprint(any_int(3.6, -2.2, 2)) # \u279e False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.islower():\n            if char in 'aeiou':\n                encoded_message += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_message += char.upper()\n        elif char.isupper():\n            if char in 'AEIOU':\n                encoded_message += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                encoded_message += char.lower()\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n    if max_prime is None:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21])) # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7])) # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict: # check if the dictionary is empty\n        return False\n\n    case = None # initialize the case variable to None\n    for key in dict:\n        if not isinstance(key, str): # check if the key is not a string\n            return False\n        if case is None: # first iteration, set the case\n            case = key.islower()\n        elif case != key.islower(): # if the current key's case doesn't match the stored case\n            return False\n    \n    return True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    upper_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):  # iterate over even indices\n        if s[i] in upper_vowels:\n            count += 1\n    return count\n\n# Test cases\nprint(count_upper('aBCdEf'))  # returns 1\nprint(count_upper('abcdefg'))  # returns 0\nprint(count_upper('dBBE'))  # returns 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    number = float(value)\n    if number >= 0:\n        return int(number) if number - int(number) < 0.5 else int(number) + 1\n    else:\n        return int(number) if int(number) - number < 0.5 else int(number) - 1\n\n# Test cases\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(result[-1] + 2)\n        else:\n            result.append(result[-1] + 1)\n        n -= 1\n    return result\n\n# Test cases\nprint(make_a_pile(3))  # Output: [3, 5, 7]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.replace(',', ' ').split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Check if y is less than x, if so, swap their values\n    if y < x:\n        x, y = y, x\n    \n    # Iterate from y down to x and find the first even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found, return -1\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    valid_numbers = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in sorted(arr) if 1 <= num <= 9]\n    reversed_arr = filtered_arr[::-1]\n    result = [valid_numbers[num] for num in reversed_arr]\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(i):\n    if i == 0 or i == 1:\n        return 1\n    else:\n        return i * factorial(i-1)"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # check if the number is a palindrome\n            if i % 2 == 0:  # check if the number is even\n                even_count += 1\n            else:  # check if the number is odd\n                odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12))  # Output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)\n\n# Test cases\nprint(count_nums([])) # Output: 0\nprint(count_nums([-1, 11, -11])) # Output: 1\nprint(count_nums([1, 1, 2])) # Output: 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n\n    # Create a copy of the array and sort it\n    sorted_arr = sorted(arr)\n\n    # Check if a right shift will make the arrays equal\n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n\n    return False\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Output: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Output: False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    available_evens = sum(1 for num in lst2 if num % 2 == 0)\n    \n    if odd_count <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letter_count = {}\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n            \n    max_count = max(letter_count.values()) if letter_count else None\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = [char for char in s if char not in c]\n    return ''.join(result), result == result[::-1]\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        count = sum(int(digit) % 2 != 0 for digit in s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))\nprint(odd_count(['3', \"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    current_sum = nums[0]\n    min_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n        \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    total_water = 0\n    for row in grid:\n        total_water += row.count(1)\n\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonants_count = 0\n        for letter in word:\n            if letter.lower() not in 'aeiou':\n                consonants_count += 1\n        if consonants_count == n:\n            result.append(word)\n    \n    return result\n\n# Test cases\nprint(select_words(\"Mary had a little lamb\", 4)) #==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3)) #==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2)) #==> []\nprint(select_words(\"Hello world\", 4)) #==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3)) #==> [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"AEIOUaeiou\")\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\")) #==> \"u\"\nprint(get_closest_vowel(\"FULL\"))    #==> \"U\"\nprint(get_closest_vowel(\"quick\"))   #==> \"\"\nprint(get_closest_vowel(\"ab\"))      #==> \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    open_paren_count = 0\n\n    for char in s1 + s2:\n        if char == '(':\n            open_paren_count += 1\n        else:\n            if open_paren_count == 0:\n                return 'No'\n            open_paren_count -= 1\n\n    return 'Yes' if open_paren_count == 0 else 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Should print: 'Yes'\nprint(match_parens([')', ')']))  # Should print: 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    max_nums = []\n    for num in sorted(arr, reverse=True):\n        if len(max_nums) < k:\n            max_nums.append(num)\n    return max_nums\n\n# Test cases\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(0, len(lst), 2):  # iterate over even indices\n        if lst[i] % 2 != 0:  # check if element is odd\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_two_digits = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum_two_digits += arr[i]\n    return sum_two_digits\n\n# Test case\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([num for num in sequence if num % 2 != 0])\n\n# Test cases\nprint(get_odd_collatz(5))  # Output: [1, 5]"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        # Parse the date string in the given format\n        parsed_date = datetime.strptime(date, '%m-%d-%Y')\n        \n        # Check if the month is valid (between 1 and 12)\n        if parsed_date.month < 1 or parsed_date.month > 12:\n            return False\n        \n        # Check the number of days based on the month\n        if parsed_date.month in [1, 3, 5, 7, 8, 10, 12] and parsed_date.day < 1 or parsed_date.day > 31:\n            return False\n        elif parsed_date.month in [4, 6, 9, 11] and parsed_date.day < 1 or parsed_date.day > 30:\n            return False\n        elif parsed_date.month == 2:\n            # Check for leap year\n            if parsed_date.year % 4 != 0:\n                max_days_in_feb = 28\n            elif parsed_date.year % 100 != 0:\n                max_days_in_feb = 29\n            else:\n                if parsed_date.year % 400 != 0:\n                    max_days_in_feb = 28\n                else:\n                    max_days_in_feb = 29\n            if parsed_date.day < 1 or parsed_date.day > max_days_in_feb:\n                return False\n        \n        return True\n    \n    except ValueError:\n        # If the date string doesn't match the format or is empty\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for c in txt if ord(c.lower()) % 2 != 0)\n        return count\n\n# Test cases\nprint(split_words(\"Hello world!\")) # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\")) # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\")) # == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n# Test cases\nprint(is_sorted([5])) # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5])) # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5])) # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # \u279e False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            return 0\n        sign_product *= (num // abs(num))\n        magnitude_sum += abs(num)\n\n    return sign_product * magnitude_sum\n\n# Test cases\nprint(prod_signs([1, 2, 2, -4])) # Output: -9\nprint(prod_signs([0, 1])) # Output: 0\nprint(prod_signs([])) # Output: None"}
{"task_id": "HumanEval/129", "completion": "from collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    \n    def neighbors(i, j):\n        for dx, dy in directions:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < N and 0 <= nj < N:\n                yield ni, nj\n    \n    q = deque()\n    visited = set()\n    ans = []\n    \n    for i in range(N):\n        for j in range(N):\n            q.append((i, j))\n            visited.add((i, j))\n            \n    while q and len(ans) < k:\n        mi, mj = q.popleft()\n        ans.append(grid[mi][mj])\n        \n        for ni, nj in neighbors(mi, mj):\n            if (ni, nj) not in visited:\n                visited.add((ni, nj))\n                q.append((ni, nj))\n                \n    return ans[:k]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    trib = [1] * (n + 1)\n    trib[0], trib[1], trib[2] = 3, 3, 2\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib[i] = 1 + i // 2\n        else:\n            trib[i] = trib[i - 1] + trib[i - 2] + trib[i + 1]\n    return trib[:n + 1]\n\n# Test cases\nprint(tri(3))  # Output: [3, 3, 2, 8]\nprint(tri(0))  # Output: [3]\nprint(tri(1))  # Output: [3, 3]\nprint(tri(4))  # Output: [3, 3, 2, 8, 12]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        last_digit = n % 10\n        if last_digit % 2 != 0:\n            product *= last_digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\" and stack:\n            stack.pop()\n        else:\n            continue\n            \n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))         # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))         # \u279e False\nprint(is_nested('[]'))          # \u279e False\nprint(is_nested('[[][]]'))       # \u279e True\nprint(is_nested('[[]][['))       # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # If the string is empty\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char != txt[-2] if txt[-2] != ' ' else True:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n\n# Test cases\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))         # Output: -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n                \n    return (largest_negative, smallest_positive)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7])) # Output: (None, 1)\nprint(largest_smallest_integers([])) # Output: (None, None)\nprint(largest_smallest_integers([0])) # Output: (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = float(a.replace(\",\", \".\"))\n    b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    else:\n        return max(a, b)\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e 2.3\nprint(compare_one(\"5,1\", \"6\"))  # \u279e 6\nprint(compare_one(\"1\", 1))  # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    else:\n        return n // 2 == 4\n\n# Test cases\nprint(is_equal_to_sum_even(4)) # False\nprint(is_equal_to_sum_even(6)) # False\nprint(is_equal_to_sum_even(8)) # True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '__' in text:\n        text = text.replace('__', '-')\n    return text\n\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    parts = file_name.split('.')\n    \n    if len(parts) != 2 or not parts[0] or not parts[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if not parts[0].istitle() or sum(c.isdigit() for c in parts[0]) > 3:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n        else:\n            result += num\n    return result"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(\" \")\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n    result = frac_x * frac_n\n    return result.denominator == 1\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # Output: True\nprint(simplify(\"1/6\", \"2/1\"))  # Output: False\nprint(simplify(\"7/10\", \"10/2\"))  # Output: False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_sums = sorted(enumerate(nums), key=lambda x: (sum_digits(x[1]), x[0]))\n    return [num for _, num in nums_with_sums]\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in ['1', '3', '5', '7', '9'] and str(abs(num))[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1 \nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    count_dict = {0: 0, 1: 0, 2: 0}\n    \n    for num in a:\n        remainder = num % 3\n        count_dict[remainder] += 1\n        \n        if remainder == 0:\n            count += count_dict[0] * (count_dict[0] - 1) // 2  # All zeros\n            count += count_dict[1] * count_dict[2]  # One of each: 1, 2, 0 or 2, 1, 0\n        \n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1+1:index2])\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # Output: (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))      # Output: (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))     # Output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Delete strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst\n\n# Test cases\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n    return result * 2\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 20\nprint(double_the_difference([-1, -2, 0]))  # Output: 0\nprint(double_the_difference([9, -2]))       # Output: 162\nprint(double_the_difference([0]))           # Output: 0\nprint(double_the_difference([]))            # Output: 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - gg) for g, gg in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_ext = \"\"\n    max_strength = float('-inf')\n    \n    for ext in extensions:\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = str(abs(num))  # Convert to absolute value and string for counting digits\n    for digit in num:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))   # Output: (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman_numeral = ''\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the largest side squared is equal to the sum of the squares of the other two sides\n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n            \n    return max_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"])) # Should print \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"])) # Should print \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"])) # Should print \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need - number, remaining)\n    carrots_left = remaining - (need - number if total_eaten < need else 0)\n    return [total_eaten, carrots_left]\n\n# Test cases\nprint(eat(5, 6, 10))  # Output: [11, 4]\nprint(eat(4, 8, 9))   # Output: [12, 1]\nprint(eat(1, 10, 10))  # Output: [11, 0]\nprint(eat(2, 11, 5))   # Output: [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n\n# Test case from the example\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nprint(do_algebra(operator, operand))  # Output: 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            break\n    \n    if has_letter:\n        result = \"\"\n        for char in s:\n            if char.islower():\n                result += char.upper()\n            elif char.isupper():\n                result += char.lower()\n            else:\n                result += char\n    else:\n        result = s[::-1]\n    \n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode('utf-8'))\n        return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for num in range(min(a, b), max(a, b) + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result\n\n# Test cases\nprint(generate_integers(2, 8)) # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2)) # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # Output: []"}
