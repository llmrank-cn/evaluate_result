{"task_id": "HumanEval/0", "completion": "\n    for idx, elem in enumerate(numbers):\n        for other_elem in numbers[idx + 1:]:\n            if abs(elem - other_elem) <= threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "result = []\ncurrent_group = \"\"\nstack = []\nfor c in paren_string:\n    if c == '(':\n        stack.append(current_group)\n        current_group = \"\"\n    elif c == ')':\n        if stack:\n            current_group = stack.pop() + \"(\" + current_group + \")\"\n        result.append(current_group)\n        current_group = \"\"\n    elif c!= ':\n        current_group += c\nif current_group:\n    result.append(current_group)\nreturn result"}
{"task_id": "HumanEval/2", "completion": "return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "return any(sum(operations[:i]) < 0 for i in range(len(operations) + 1))"}
{"task_id": "HumanEval/4", "completion": "mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "return [numbers[i] if i == 0 else delimeter for i in range(len(numbers) + 1)]"}
{"task_id": "HumanEval/6", "completion": "result = []\n    current_depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n    \n    result.append(max_depth)\n    \n    return result"}
{"task_id": "HumanEval/7", "completion": "return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n    else:\n        sums = 0\n        products = 1\n        for num in numbers:\n            sums += num\n            products *= num\n        return sums, products\n"}
{"task_id": "HumanEval/9", "completion": "return [max(numbers[:i + 1]) for i in range(len(numbers))]"}
{"task_id": "HumanEval/10", "completion": "\n    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])"}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None\n    max_length = 0\n    longest_string = None\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "\n    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "\nreturn string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "return '.join(sorted(numbers.split(), key=lambda x: ['zero', 'one', 'two', 'three', 'four', 'five', 'ix', 'even', 'eight', 'nine'].index(x)))"}
{"task_id": "HumanEval/20", "completion": "numbers.sort()\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_elements = (numbers[i], numbers[i+1])\n    return closest_elements"}
{"task_id": "HumanEval/21", "completion": "return [(num - min(numbers)) / (max(numbers) - min(numbers)) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "return [v for v in values if isinstance(v, int)]"}
{"task_id": "HumanEval/23", "completion": "return len(string)"}
{"task_id": "HumanEval/24", "completion": "\n    def largest_divisor(n: int) -> int:\n        for i in range(n - 1, 1, -1):\n            if n % i == 0:\n                return i\n        return 1\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "return [n for i, n in enumerate(numbers) if n not in numbers[:i]]"}
{"task_id": "HumanEval/27", "completion": "\nreturn string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "\n    result = ''\n    for string in strings:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2!= 0:\n        raise ValueError('xs must have even number of coefficients')\n    if xs[-1]!= max(xs, key=abs):\n        raise ValueError('largest non zero coefficient must be the last one')\n    \n    n = len(xs) - 1\n    a = xs[:-1]  #Coefficients of even degree terms\n    b = xs[-1:] + [0] * (n // 2 - 1)  #Coefficients of odd degree terms\n    \n    def f(x):\n        return poly(a + [0] + b[::-1], x)\n    \n    #Initial guess for Newton-Raphson method\n    x0 = 0.0\n    #Iterations to find the root\n    for _ in range(100):\n        x1 = x0 - f(x0) / poly(xs, x0)\n        if abs(x1 - x0) < 1e-10:\n            return x1\n        x0 = x1\n    return None\n"}
{"task_id": "HumanEval/33", "completion": "return [l[i] if i%3!= 0 else sorted(l)[i//3] for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "return max(l)"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "return [l[i] if i % 2 else sorted(l)[i // 2] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "return encode_cyclic(encode_cyclic(s))"}
{"task_id": "HumanEval/39", "completion": "\ndef prime_fib(n: int):\n    a, b = 0, 1\n    count = 0\n\n    while count < n:\n        if is_prime(a) and is_fibonacci(a):\n            count += 1\n        a, b = b, a + b\n\n    return a\n\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\n\ndef is_fibonacci(num: int) -> bool:\n    a, b = 0, 1\n    while b < num:\n        a, b = b, a + b\n\n    return b == num\n\n\nif __name__ == '__main__':\n    for i in range(1, 6):\n        print(prime_fib(i))"}
{"task_id": "HumanEval/40", "completion": "\n\nreturn any(sum(triple) == 0 for triple in itertools.combinations(l, 3))"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    # Each car has 1 collision, and there are n cars in each direction\n    return n * 2"}
{"task_id": "HumanEval/42", "completion": "return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "\n\npairs_sum_to_zero = lambda l: len([(x, y) for x in l for y in l if x!= y and x + y == 0]) > 0"}
{"task_id": "HumanEval/44", "completion": "\n\nresult = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "return a * h / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2-1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "\nreturn pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "return ''.join(character for character in text if character.lower() not in 'aeiou')"}
{"task_id": "HumanEval/52", "completion": "return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "return x + y"}
{"task_id": "HumanEval/54", "completion": "return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "\n\ndef correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        elif l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "return len([bracket for bracket in brackets if bracket == '(']) == len([bracket for bracket in brackets if bracket == ')']) and brackets[0]!= ')' and brackets[-1]!='('"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str"}
{"task_id": "HumanEval/66", "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "return n - s.count('apples') - s.count('oranges')"}
{"task_id": "HumanEval/68", "completion": "\nif not arr:\n        return []\n    even_values = [node for node in arr if node % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    return [min_even_value, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    lst_sorted = sorted(lst, reverse=True)\n    for i in lst_sorted:\n        if lst.count(i) >= i:\n            return i\n    return -1"}
{"task_id": "HumanEval/70", "completion": "\n    return [lst[i // 2] if i % 2 == 0 else lst[-(i // 2 + 1)] for i in range(len(lst))]\n"}
{"task_id": "HumanEval/71", "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q,w):\n    return len(q) == q.count(q[0]) and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "return sum(arr[i]!=arr[~i] for i in range(len(arr)//2))"}
{"task_id": "HumanEval/74", "completion": "\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a >= 100:\n        return \"The number must be less than 100.\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a // i):\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "if n == 1:\n        return x == 1\n    elif n < 1:\n        return False\n    else:\n        for i in range(x):\n            if n ** i == x:\n                return True\n        return False"}
{"task_id": "HumanEval/77", "completion": "\nreturn round(a ** (1. / 3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    primes = '2357BD'\n    return sum(1 for char in num if char.upper() in primes)\n"}
{"task_id": "HumanEval/79", "completion": "\n    # here is your code\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    length = len(string)\n    if length == 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "\nn = int(input(\"Enter a number: \"))\ncount = 0\n\nfor i in range(10**(n-1), 10**n):\n    if i % 10 == 1 or i // 10**(n-1) == 1:\n        count += 1\n\nprint(count)"}
{"task_id": "HumanEval/84", "completion": "\nif N == 0:\n            result = '0'\n        else:\n            result = ''\n            while N > 0:\n                result = str(N % 2) + result\n                N //= 2\n        return result"}
{"task_id": "HumanEval/85", "completion": "\n    result = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    ordered_string = '.join(ordered_words)\n    return ordered_string\n"}
{"task_id": "HumanEval/87", "completion": "return [(i, j) for i, row in enumerate(lst) for j, col in enumerate(row) if col == x]"}
{"task_id": "HumanEval/88", "completion": "return sorted(array, reverse=sum(array[:: len(array) - 1]) % 2 == 0)"}
{"task_id": "HumanEval/89", "completion": "new_str = \"\"\n    for letter in s:\n        new_str += chr((ord(letter) - 0x61 + 4) % 26 + 0x61)\n    return new_str"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    if not lst or len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return None\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "return \"\".join([chr(ord(c) + 2).upper() if c in \"aeiouAEIOU\" else c.swapcase() for c in message])"}
{"task_id": "HumanEval/94", "completion": "\nmax_prime = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                if num > max_prime:\n                    max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = True\n    all_upper = True\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            all_upper = False\n        elif key.isupper():\n            all_lower = False\n        else:\n            return False\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "\ndef is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def count_up_to(n):\n        primes = []\n        for i in range(2, n):\n            if is_prime(i):\n                primes.append(i)\n        return primes"}
{"task_id": "HumanEval/97", "completion": "\nreturn (a%10)*(b%10)"}
{"task_id": "HumanEval/98", "completion": "return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper() and c.lower() in 'aeiou')"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    return int(round(float(value)))"}
{"task_id": "HumanEval/100", "completion": "\n\n    stones_per_level = []\n    current_stone_count = n\n    for _ in range(n):\n        stones_per_level.append(current_stone_count)\n        if n % 2 == 0:\n            current_stone_count += 1\n        else:\n            current_stone_count += 2\n    return stones_per_level\n"}
{"task_id": "HumanEval/101", "completion": "\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n        if n > m:\n            return -1\n        else:\n            avg = (n + m) // 2\n            return bin(int(avg))"}
{"task_id": "HumanEval/104", "completion": "\nreturn sorted([i for i in x if not any(int(d) % 2 == 0 for d in str(i))])"}
{"task_id": "HumanEval/105", "completion": "return [] if not arr else [digit_dict[i-1] for i in sorted([i for i in arr if i >= 1 and i <= 9], reverse=True)]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "\nif not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        arr = arr[-1:] + arr[:-1]  \n        if arr == sorted_arr:\n            return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "\nif all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n            if all(x % 2 == 0 for x in lst1):\n                return \"YES\"\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n        histogram = {}\n        for letter in test.split():\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        max_occurrence = max(histogram.values())\n        return {letter: count for letter, count in histogram.items() if count == max_occurrence}"}
{"task_id": "HumanEval/112", "completion": "\nreturn ''.join([i for i in s if i not in c]), s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "\n    return [f\"the number of odd elements {i}n the str{i}ng {i} of the {i}nput.\" for i in map(lambda x: sum(int(d) % 2!= 0 for d in x), lst)]\n"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        current_sum = max(0, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "\n    bucket_capacity = int(capacity)\n    wells = [row.count(1) for row in grid]\n    rounds = 0\n    while sum(wells)!= 0:\n        rounds += 1\n        for i in range(len(wells)):\n            wells[i] = min(wells[i], bucket_capacity)\n            if wells[i] == bucket_capacity:\n                bucket_capacity = 0\n                break\n            else:\n                bucket_capacity = bucket_capacity - wells[i]\n                wells[i] = 0\n    return rounds"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "if not word or len(word) < 3:\n        return \"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "\nif len(lst[0]) == len(lst[1]):\n        return 'No'\n    open_parens = lst[0].count('(') + lst[1].count('(')\n    close_parens = lst[0].count(')') + lst[1].count(')')\n    if open_parens!= close_parens:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "return sum(i for i in arr[:k] if len(str(i)) <= 2)"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    collatz = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([x for x in collatz if x % 2!= 0])\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if date == '':\n        return False\n    date_parts = date.split('-')\n    if len(date_parts)!= 3:\n        return False\n    month, day, year = int(date_parts[0]), int(date_parts[1]), int(date_parts[2])\n    if month < 1 or month > 12:\n        return False\n    if month in [1,3,5,7,8,10,12] and (day < 1 or day > 31):\n        return False\n    if month in [4,6,9,11] and (day < 1 or day > 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "\nreturn txt.split() or txt.split(',') or sum(1 for i in txt if i.islower() and ord(i) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "\nreturn sorted(lst) == lst and len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "completion": "\nif interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    intersection_length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1\n    if intersection_length <= 1:\n        return \"NO\"\n    for i in range(2, intersection_length):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod = 1\n    sum_mag = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num < 0:\n            prod *= -1\n        sum_mag += abs(num)\n    return prod * sum_mag"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    visited = set()\n    min_path = []\n    min_val = float('inf')\n\n    def dfs(i, j, path, val):\n        nonlocal min_path, min_val\n\n        if len(path) == k:\n            if val < min_val:\n                min_path = path.copy()\n                min_val = val\n            return\n\n        visited.add((i, j))\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                new_val = val + grid[ni][nj]\n                new_path = path + [grid[ni][nj]]\n                dfs(ni, nj, new_path, new_val)\n        visited.remove((i, j))\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]], grid[i][j])\n\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i])\n    return sequence\n"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    product = 1\n    while n > 0:\n        if n % 2!= 0:\n            product *= n % 10\n        n //= 10\n    return product if product!= 1 else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "\ndef sum_squares(lst):\n    return sum([int(n) ** 2 for n in [math.ceil(i) for i in lst]])\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.strip()\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "\n\ndef can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "\n    negative_integers = [i for i in lst if i < 0]\n    positive_integers = [i for i in lst if i > 0]\n\n    if negative_integers:\n        a = max(negative_integers)\n    else:\n        a = None\n\n    if positive_integers:\n        b = min(positive_integers)\n    else:\n        b = None\n\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    try:\n        a = float(a.replace(\",\", \".\"))\n        b = float(b.replace(\",\", \".\"))\n    except ValueError:\n        return b if b > a else a\n    else:\n        return b if b > a else a if a > b else None"}
{"task_id": "HumanEval/138", "completion": "\nif n%2!=0:\n        return False\n    if n==4:\n        return False\n    if n==6:\n        return False\n    if n==8:\n        return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "return text.replace(' ', '_').replace('  ', '-')"}
{"task_id": "HumanEval/141", "completion": "return 'Yes' if re.match(r'^[a-zA-Z]\\w*[.]\\w*$', file_name) and file_name.split('.')[1] in ['txt', 'exe', 'dll'] and len(re.findall(r'\\d', file_name)) <= 3 else 'No'"}
{"task_id": "HumanEval/142", "completion": "\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            result += lst[i] ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    new_sentence = \"\"\n    words = sentence.split(\" \")\n    for word in words:\n        if word.isalpha() and len(word) > 1 and all(len(i)>1 for i in str(factorint(len(word)))):\n            new_sentence += f\"{word} \"\n    return(new_sentence.strip())"}
{"task_id": "HumanEval/144", "completion": "def simplify(x: str, n: str) -> bool:\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Multiply the numerators and denominators\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    # Check if the result is a whole number\n    return result_num % result_den == 0"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a) - 2):\n        for j in range(i + 1, len(a) - 1):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n\n    return tuple(planets[planet1_index + 1:planet2_index])"}
{"task_id": "HumanEval/149", "completion": "return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "if not lst:\n        return 0\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2!= 0:\n            total += num ** 2\n    return total * 2"}
{"task_id": "HumanEval/152", "completion": "return [abs(guess[i]-game[i]) if guess[i]!=game[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "\n    def strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    max_strength = -1\n    strongest_extension = None\n    \n    for extension in extensions:\n        ext_strength = strength(extension)\n        if ext_strength > max_strength:\n            max_strength = ext_strength\n            strongest_extension = extension\n    \n    return class_name + '.' + strongest_extension\n"}
{"task_id": "HumanEval/154", "completion": "if b in a:\n        return True\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "\nint_to_mini_roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: ''}\n    result = ''\n    for value, numeral in sorted(int_to_mini_roman_dict.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "return sorted(words, key=lambda word: (len(set(word)), word))[-1]"}
{"task_id": "HumanEval/159", "completion": "if number >= need:\n        return [number + need, remaining - need]\n    elif number + remaining >= need:\n        return [number + remaining, 0]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "if not operator or not operand or len(operand) < 2 or len(operand) - len(operator)!= 1:\n        raise ValueError(\"Invalid operator or operand list\")\n    result = operand[0]\n    for i in range(1, len(operand)):\n        op = operator[i - 1]\n        num = operand[i]\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            if num == 0:\n                raise ValueError(\"Division by zero\")\n            result //= num\n        elif op == '**':\n            result **= num\n    return result"}
{"task_id": "HumanEval/161", "completion": "return ''.join([c.swapcase() if c.isalpha() else c for c in s])[::-1] if not s.isalpha() else ''.join([c.swapcase() if c.isalpha() else c for c in s])"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "return [i for i in range(a, b + 1) if i % 2 == 0]"}
