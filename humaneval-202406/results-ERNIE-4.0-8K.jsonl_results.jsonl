{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()  # \u5148\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    current_group = ''\n    result = []\n\n    for char in paren_string:\n        if char != ' ':  # Ignore spaces\n            if char == '(':\n                if stack:\n                    current_group += char\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                if stack:\n                    current_group += char\n                else:\n                    result.append(current_group + char)\n                    current_group = ''\n\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n\n    x_mean = mean(numbers)\n    absolute_deviations = [abs(x - x_mean) for x in numbers]\n    return mean(absolute_deviations)\n\n# \u6d4b\u8bd5\u51fd\u6570\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # \u8f93\u51fa\u5e94\u4e3a 1.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def get_max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        result.append(get_max_depth(group))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    \n    total_sum = 0\n    product = 1\n    \n    for num in numbers:\n        total_sum += num\n        product *= num\n    \n    return total_sum, product", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]  # \u521d\u59cb\u5316\u7ed3\u679c\u5217\u8868\uff0c\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u8d77\u59cb\u6700\u5927\u503c\n    for num in numbers[1:]:\n        # \u6bd4\u8f83\u5f53\u524d\u5143\u7d20\u4e0e\u7ed3\u679c\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u53d6\u8f83\u5927\u503c\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\n        result.append(max(num, result[-1]))\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    \n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    # \u5982\u679c\u6ca1\u6709\u627e\u5230\u56de\u6587\u540e\u7f00\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u539f\u5b57\u7b26\u4e32\u4e0e\u5176\u53cd\u8f6c\u7684\u62fc\u63a5\n    return string + string[::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u8fdb\u884cXOR\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u8f6c\u6362\u56de\u5b57\u7b26\u4e32\n    result = int(a, 2) ^ int(b, 2)\n    return bin(result)[2:]  # \u53bb\u6389\u524d\u7f00'0b'\n\n# \u6d4b\u8bd5\u793a\u4f8b\nprint(string_xor('010', '110'))  # \u8f93\u51fa: '100'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:  # \u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u8fd4\u56deNone\n        return None\n\n    longest_string = strings[0]  # \u521d\u59cb\u5316\u6700\u957f\u5b57\u7b26\u4e32\u4e3a\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    for string in strings:\n        if len(string) > len(longest_string):  # \u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e\u6700\u957f\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u5219\u66f4\u65b0\u6700\u957f\u5b57\u7b26\u4e32\n            longest_string = string\n\n    return longest_string", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        \n    Returns:\n        int: The greatest common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u4ee5\u4fbf\u4e0d\u533a\u5206\u5927\u5c0f\u5199\n    string = string.lower()\n    # \u4f7f\u7528\u96c6\u5408\u53bb\u91cd\uff0c\u5e76\u8ba1\u7b97\u4e0d\u540c\u5b57\u7b26\u7684\u6570\u91cf\n    distinct_chars = set(string)\n    return len(distinct_chars)", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    \u89e3\u6790\u7279\u6b8aASCII\u683c\u5f0f\u7684\u97f3\u4e50\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u6bcf\u4e2a\u97f3\u7b26\u6301\u7eed\u591a\u5c11\u62cd\u7684\u6574\u6570\u5217\u8868\u3002\n\n    \u56fe\u4f8b\uff1a\n    'o' - \u5168\u97f3\u7b26\uff0c\u6301\u7eed\u56db\u62cd\n    'o|' - \u534a\u97f3\u7b26\uff0c\u6301\u7eed\u4e24\u62cd\n    '.|' - \u56db\u5206\u4e4b\u4e00\u97f3\u7b26\uff0c\u6301\u7eed\u4e00\u62cd\n    \"\"\"\n    # \u521d\u59cb\u5316\u7ed3\u679c\u5217\u8868\n    result = []\n    \n    # \u904d\u5386\u97f3\u4e50\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            # \u9047\u5230\u5168\u97f3\u7b26\uff0c\u6dfb\u52a04\u5230\u7ed3\u679c\u5217\u8868\uff0c\u5e76\u8df3\u8fc7\u4e00\u4e2a\u5b57\u7b26\n            result.append(4)\n            i += 1\n        elif music_string[i:i+2] == 'o|':\n            # \u9047\u5230\u534a\u97f3\u7b26\uff0c\u6dfb\u52a02\u5230\u7ed3\u679c\u5217\u8868\uff0c\u5e76\u8df3\u8fc7\u4e24\u4e2a\u5b57\u7b26\n            result.append(2)\n            i += 2\n        elif music_string[i:i+2] == '.|':\n            # \u9047\u5230\u56db\u5206\u4e4b\u4e00\u97f3\u7b26\uff0c\u6dfb\u52a01\u5230\u7ed3\u679c\u5217\u8868\uff0c\u5e76\u8df3\u8fc7\u4e24\u4e2a\u5b57\u7b26\n            result.append(1)\n            i += 2\n        else:\n            # \u9047\u5230\u65e0\u6548\u5b57\u7b26\uff0c\u53ef\u4ee5\u9009\u62e9\u8df3\u8fc7\u6216\u629b\u51fa\u5f02\u5e38\n            i += 1\n    \n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # \u521b\u5efa\u4e00\u4e2a\u6570\u5b57\u5230\u5176\u5bf9\u5e94\u6570\u503c\u7684\u6620\u5c04\u5b57\u5178\n    num_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # \u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6309\u7a7a\u683c\u5206\u5272\u6210\u5217\u8868\uff0c\u5e76\u6620\u5c04\u6210\u5bf9\u5e94\u7684\u6570\u503c\u5217\u8868\n    value_list = [num_to_value[num] for num in numbers.split()]\n    \n    # \u4f7f\u7528\u6570\u503c\u5217\u8868\u5bf9\u539f\u59cb\u7684\u6570\u5b57\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n    sorted_numbers = [num for _, num in sorted(zip(value_list, numbers.split()))]\n    \n    # \u5c06\u6392\u5e8f\u540e\u7684\u6570\u5b57\u5217\u8868\u62fc\u63a5\u6210\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\n    return ' '.join(sorted_numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()  # \u5148\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n    closest_pair = (float('inf'), float('inf'))  # \u521d\u59cb\u5316\u4e00\u4e2a\u6b63\u65e0\u7a77\u5927\u7684\u6570\u5bf9\u4f5c\u4e3a\u6700\u63a5\u8fd1\u7684\u6570\u5bf9\n    min_diff = float('inf')  # \u521d\u59cb\u5316\u6700\u5c0f\u5dee\u503c\u4e3a\u6b63\u65e0\u7a77\u5927\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]  # \u8ba1\u7b97\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5dee\u503c\n        if diff < min_diff:  # \u5982\u679c\u5dee\u503c\u6bd4\u5f53\u524d\u6700\u5c0f\u5dee\u503c\u8fd8\u5c0f\n            min_diff = diff  # \u66f4\u65b0\u6700\u5c0f\u5dee\u503c\n            closest_pair = (numbers[i], numbers[i + 1])  # \u66f4\u65b0\u6700\u63a5\u8fd1\u7684\u6570\u5bf9\n    \n    return closest_pair", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    \n    Args:\n        string (str): The input string.\n        \n    Returns:\n        int: The length of the string.\n    \"\"\"\n    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return None  # \u5982\u679cn\u662f\u7d20\u6570\uff0c\u5219\u6ca1\u6709\u5c0f\u4e8en\u7684\u9664\u6570\uff0c\u53ef\u4ee5\u8fd4\u56deNone\u6216\u8005\u629b\u51fa\u5f02\u5e38\uff0c\u6839\u636e\u5b9e\u9645\u9700\u6c42\u51b3\u5b9a\n\n# \u793a\u4f8b\u6d4b\u8bd5\nprint(largest_divisor(15))  # \u8f93\u51fa: 5", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factors = []\n    d = 2\n    while d * d <= n:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n\n    if n > 1:\n        factors.append(n)\n\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    result = []\n    for num in numbers:\n        if count_dict[num] == 1:\n            result.append(num)\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    \"\"\"\n    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return [num for num in l if num > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:  # Prime numbers are greater than 1\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    def poly(xs: list, x: float):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    def bisect(f, a, b, tol=1e-6, max_iter=100):\n        if f(a) * f(b) >= 0:\n            raise ValueError(\"f(a) and f(b) must have different signs.\")\n        for _ in range(max_iter):\n            c = (a + b) / 2\n            if f(c) == 0 or abs(b - a) / 2 < tol:\n                return c\n            if f(a) * f(c) < 0:\n                b = c\n            else:\n                a = c\n        raise ValueError(\"Max iterations exceeded.\")\n\n    # Assume a large enough search interval\n    a, b = -100, 100\n    if poly(xs, a) * poly(xs, b) >= 0:\n        raise ValueError(\"No zero found in the search interval.\")\n\n    return bisect(lambda x: poly(xs, x), a, b)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # \u627e\u51fa\u6240\u6709\u53ef\u4ee5\u88ab3\u6574\u9664\u7684\u7d22\u5f15\u4f4d\u7f6e\u53ca\u5176\u5bf9\u5e94\u7684\u5143\u7d20\n    divisible_by_three = [(i, l[i]) for i in range(len(l)) if i % 3 == 0]\n    \n    # \u5bf9\u8fd9\u4e9b\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff0c\u4f46\u4fdd\u6301\u7d22\u5f15\u4e0d\u53d8\uff0c\u4ee5\u4fbf\u540e\u9762\u6211\u4eec\u53ef\u4ee5\u5c06\u5143\u7d20\u653e\u56de\u6b63\u786e\u7684\u4f4d\u7f6e\n    sorted_elements = [x[1] for x in sorted(divisible_by_three, key=lambda x: x[1])]\n    \n    # \u521b\u5efa\u4e00\u4e2a\u539f\u59cb\u5217\u8868\u7684\u526f\u672c\uff0c\u8fd9\u6837\u6211\u4eec\u4e0d\u4f1a\u4fee\u6539\u539f\u59cb\u5217\u8868\n    result = l.copy()\n    \n    # \u5c06\u6392\u5e8f\u540e\u7684\u5143\u7d20\u653e\u56de\u53ef\u4ee5\u88ab3\u6574\u9664\u7684\u7d22\u5f15\u4f4d\u7f6e\n    for i, sorted_elem in zip(range(0, len(l), 3), sorted_elements):\n        result[i] = sorted_elem\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \"\"\"\n    return sorted(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    if not l:  # \u68c0\u67e5\u5217\u8868\u662f\u5426\u4e3a\u7a7a\n        raise ValueError(\"The list is empty.\")\n    \n    maximum = l[0]  # \u5047\u8bbe\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u6700\u5927\u503c\n    for element in l:\n        if element > maximum:\n            maximum = element  # \u66f4\u65b0\u6700\u5927\u503c\n    \n    return maximum", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def count_digit_seven(num):\n    \"\"\"Count the number of times digit 7 appears in num.\"\"\"\n    count = 0\n    while num > 0:\n        if num % 10 == 7:\n            count += 1\n        num //= 10\n    return count\n\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += count_digit_seven(i)\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    # Separate odd and even indexed elements\n    odd_elems = [l[i] for i in range(len(l)) if i % 2 != 0]\n    even_elems = [l[i] for i in range(len(l)) if i % 2 == 0]\n    \n    # Sort the even indexed elements\n    even_elems.sort()\n    \n    # Reconstruct the list with sorted even indexed elements\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_elems.pop(0))\n        else:\n            result.append(odd_elems.pop(0))\n    \n    return result\n\n# Test the function with provided examples\nprint(sort_even([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3 or less for the last group.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycling done in encode_cyclic for each group\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    \"\"\"\n    \u68c0\u67e5\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u8d28\u6570\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"\n    \u8fd4\u56de\u7b2cn\u4e2a\u65e2\u662f\u6590\u6ce2\u90a3\u5951\u6570\u53c8\u662f\u8d28\u6570\u7684\u6570\n    \"\"\"\n    fib_seq = [0, 1]  # \u521d\u59cb\u5316\u6590\u6ce2\u90a3\u5951\u5e8f\u5217\uff0c\u5305\u542b\u524d\u4e24\u4e2a\u6570\n    prime_count = 0  # \u65e2\u662f\u6590\u6ce2\u90a3\u5951\u6570\u53c8\u662f\u8d28\u6570\u7684\u6570\u7684\u8ba1\u6570\u5668\n\n    while prime_count < n:\n        next_fib = fib_seq[-1] + fib_seq[-2]  # \u8ba1\u7b97\u4e0b\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\n        fib_seq.append(next_fib)  # \u5c06\u4e0b\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u6dfb\u52a0\u5230\u5e8f\u5217\u4e2d\n\n        if is_prime(next_fib):  # \u68c0\u67e5\u4e0b\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u662f\u5426\u4e3a\u8d28\u6570\n            prime_count += 1  # \u5982\u679c\u662f\uff0c\u589e\u52a0\u8ba1\u6570\u5668\n\n        if prime_count == n:\n            return next_fib  # \u5f53\u627e\u5230\u7b2cn\u4e2a\u65e2\u662f\u6590\u6ce2\u90a3\u5951\u6570\u53c8\u662f\u8d28\u6570\u7684\u6570\u65f6\uff0c\u8fd4\u56de\u8be5\u6570\n\n# \u6d4b\u8bd5\u793a\u4f8b\nprint(prime_fib(1))  # \u8f93\u51fa: 2\nprint(prime_fib(2))  # \u8f93\u51fa: 3\nprint(prime_fib(3))  # \u8f93\u51fa: 5\nprint(prime_fib(4))  # \u8f93\u51fa: 13\nprint(prime_fib(5))  # \u8f93\u51fa: 89", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    # \u9996\u5148\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n    l.sort()\n    n = len(l)\n    \n    # \u904d\u5386\u5217\u8868\uff0c\u56fa\u5b9a\u7b2c\u4e00\u4e2a\u6570\n    for i in range(n-2):\n        # \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5728\u5269\u4f59\u7684\u6570\u4e2d\u5bfb\u627e\u4e24\u4e2a\u6570\u4e4b\u548c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u7684\u76f8\u53cd\u6570\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                # \u68c0\u67e5\u4e09\u4e2a\u6570\u662f\u5426\u4e92\u4e0d\u76f8\u540c\n                if l[i] != l[left] and l[left] != l[right] and l[i] != l[right]:\n                    return True\n                else:\n                    # \u82e5\u76f8\u540c\uff0c\u5219\u79fb\u52a8\u6307\u9488\u7ee7\u7eed\u5bfb\u627e\n                    left += 1\n                    right -= 1\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    # \u6ca1\u6709\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u4e09\u5143\u7ec4\uff0c\u8fd4\u56deFalse\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    \u8ba1\u7b97\u4e24\u7ec4\u8f66\u8f86\u53d1\u751f\u78b0\u649e\u7684\u6b21\u6570\u3002\n    \n    \u53c2\u6570:\n        n (int): \u6bcf\u7ec4\u8f66\u8f86\u7684\u6570\u91cf\u3002\n    \n    \u8fd4\u56de:\n        int: \u53d1\u751f\u78b0\u649e\u7684\u6b21\u6570\u3002\n    \"\"\"\n    # \u78b0\u649e\u6b21\u6570\u7b49\u4e8e\u4e24\u7ec4\u8f66\u8f86\u6570\u91cf\u7684\u6700\u5c0f\u503c\n    # \u56e0\u4e3a\u6bcf\u8f86\u8f66\u90fd\u4f1a\u4e0e\u5bf9\u9762\u7684\u4e00\u8f86\u8f66\u53d1\u751f\u4e00\u6b21\u78b0\u649e\n    return n  # \u6216\u8005 min(n, n)\uff0c\u4f46\u5728\u8fd9\u91cc\u4e24\u8005\u662f\u76f8\u7b49\u7684\n\n# \u793a\u4f8b\u7528\u6cd5\nprint(car_race_collision(3))  # \u8f93\u51fa: 3\nprint(car_race_collision(5))  # \u8f93\u51fa: 5", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    \n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, return area for a triangle.\n\n    Args:\n        a (float): Length of the base side of the triangle.\n        h (float): Height of the triangle with respect to the base side.\n\n    Returns:\n        float: Area of the triangle.\n\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u50a8Fib4\u5e8f\u5217\u7684\u503c\n    fib_values = [0, 0, 2, 0] + [0] * (n - 3)\n    \n    # \u4f7f\u7528\u52a8\u6001\u89c4\u5212\u8ba1\u7b97Fib4\u5e8f\u5217\u7684\u503c\n    for i in range(4, n + 1):\n        fib_values[i] = fib_values[i-1] + fib_values[i-2] + fib_values[i-3] + fib_values[i-4]\n    \n    # \u8fd4\u56de\u7b2cn\u4e2aFib4\u6570\n    return fib_values[n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        # \u5982\u679c\u5217\u8868\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u5219\u4e2d\u4f4d\u6570\u4e3a\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        return (mid1 + mid2) / 2.0\n    else:\n        # \u5982\u679c\u5217\u8868\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u4e2d\u4f4d\u6570\u4e3a\u4e2d\u95f4\u7684\u6570\n        return sorted_l[n // 2]\n\n# \u6d4b\u8bd5\u793a\u4f8b\nprint(median([3, 1, 2, 4, 5]))  # \u8f93\u51fa: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # \u8f93\u51fa: 15.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # \u8f6c\u6362\u4e3a\u5c0f\u5199\u5e76\u79fb\u9664\u975e\u5b57\u6bcd\u5b57\u7b26\n    cleaned_text = ''.join(c.lower() for c in text if c.isalnum())\n    # \u68c0\u67e5\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\u662f\u5426\u4e0e\u539f\u5b57\u7b26\u4e32\u76f8\u540c\n    return cleaned_text == cleaned_text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    Use modular exponentiation by squaring to efficiently compute the result.\n    \"\"\"\n    if n == 0:\n        return 1  # Anything to the power of 0 is 1\n    \n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p  # Multiply the current result by the base\n        base = (base * base) % p  # Square the base\n        n //= 2  # Divide n by 2 (integer division)\n\n    return result\n\n# Testing the function with the provided test cases\nprint(modp(3, 5))  # Output should be 3\nprint(modp(1101, 101))  # Output should be 2\nprint(modp(0, 101))  # Output should be 1, not 101 as mentioned in the incorrect test case\nprint(modp(3, 11))  # Output should be 8\nprint(modp(100, 101))  # Output should be 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return all(num < t for num in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "from collections import Counter\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return Counter(s0) == Counter(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \n    Args:\n        n (int): The index of the Fibonacci number to be returned.\n\n    Returns:\n        int: The n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n    return increasing or decreasing", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    # \u5c06\u4e24\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u96c6\u5408\uff0c\u4ee5\u53bb\u9664\u91cd\u590d\u5143\u7d20\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # \u4f7f\u7528\u96c6\u5408\u7684\u4ea4\u96c6\u8fd0\u7b97\u7b26 & \u627e\u5230\u5171\u540c\u5143\u7d20\n    common_elements = set1 & set2\n    \n    # \u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a\u5217\u8868\uff0c\u5e76\u8fdb\u884c\u6392\u5e8f\n    result = sorted(list(common_elements))\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"\u8fd4\u56den\u7684\u6700\u5927\u8d28\u56e0\u6570\u3002\u5047\u8bben > 1\u4e14\u4e0d\u662f\u8d28\u6570\u3002\n    \"\"\"\n    # \u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u67e5\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u8d28\u6570\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # \u4ece\u5927\u5230\u5c0f\u904d\u5386\u53ef\u80fd\u7684\u56e0\u6570\uff0c\u627e\u5230\u6700\u5927\u7684\u8d28\u56e0\u6570\n    for factor in range(int(n ** 0.5), 1, -1):\n        if n % factor == 0 and is_prime(factor):\n            return factor\n        elif n % factor == 0 and is_prime(n // factor):\n            return n // factor\n\n    # \u5982\u679cn\u662f\u4e00\u4e2a\u8d28\u6570\u7684\u5e73\u65b9\uff0c\u5219\u8fd4\u56de\u5176\u5e73\u65b9\u6839\n    if is_prime(int(n ** 0.5)):\n        return int(n ** 0.5)\n\n    # \u5982\u679cn\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u6839\u636e\u9898\u76ee\u8981\u6c42\u4e0d\u8fd4\u56de\uff08\u9898\u76ee\u5df2\u5047\u8bben\u4e0d\u662f\u8d28\u6570\uff09\n\n    # \u5982\u679c\u6ca1\u6709\u627e\u5230\u6700\u5927\u8d28\u56e0\u6570\uff0c\u5219\u8fd4\u56deNone\uff08\u7406\u8bba\u4e0a\u4e0d\u4f1a\u6267\u884c\u5230\u8fd9\u91cc\uff09\n    return None\n\n# \u6d4b\u8bd5\u793a\u4f8b\nprint(largest_prime_factor(13195))  # \u8f93\u51fa: 29\nprint(largest_prime_factor(2048))  # \u8f93\u51fa: 2", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    derivative_coeffs = []\n    for i in range(1, len(xs)):\n        derivative_coeffs.append(xs[i] * i)\n    return derivative_coeffs", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8FibFib\u5e8f\u5217\u7684\u503c\n    fibfib_seq = [0] * (n + 1)\n    fibfib_seq[0], fibfib_seq[1], fibfib_seq[2] = 0, 0, 1\n    \n    # \u4f7f\u7528\u52a8\u6001\u89c4\u5212\u8ba1\u7b97FibFib\u5e8f\u5217\u7684\u503c\n    for i in range(3, n + 1):\n        fibfib_seq[i] = fibfib_seq[i-1] + fibfib_seq[i-2] + fibfib_seq[i-3]\n    \n    return fibfib_seq[n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':  # Check if 'y' is at the end of the word\n        count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    str_x = str(x)\n    # \u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n    length = len(str_x)\n    # \u5904\u7406shift\u5927\u4e8e\u6570\u5b57\u4f4d\u6570\u7684\u60c5\u51b5\uff0c\u53d6\u4f59\u6570\n    shift %= length\n    # \u5206\u5272\u5b57\u7b26\u4e32\u4e3a\u4e24\u90e8\u5206\uff0c\u8fdb\u884c\u5faa\u73af\u53f3\u79fb\n    part1 = str_x[-shift:]\n    part2 = str_x[:-shift]\n    # \u62fc\u63a5\u4e24\u90e8\u5206\u5e76\u8fd4\u56de\u7ed3\u679c\n    result = part1 + part2\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    \u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u5927\u5199\u5b57\u6bcd\u7684ASCII\u7801\u4e4b\u548c\u3002\n\n    \u53c2\u6570:\n        s (str): \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002\n\n    \u8fd4\u56de:\n        int: \u5927\u5199\u5b57\u6bcd\u7684ASCII\u7801\u4e4b\u548c\u3002\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # \u63d0\u53d6\u5b57\u7b26\u4e32\u4e2d\u7684\u82f9\u679c\u548c\u6a59\u5b50\u6570\u91cf\n    apples = int(s.split(' apples and ')[0])\n    oranges = int(s.split(' apples and ')[1].split(' oranges')[0])\n    \n    # \u8ba1\u7b97\u8292\u679c\u6570\u91cf\n    mangoes = n - (apples + oranges)\n    return mangoes", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # \u521d\u59cb\u5316\u6700\u5c0f\u5076\u6570\u503c\u548c\u7d22\u5f15\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    \n    # \u904d\u5386\u6570\u7ec4\uff0c\u67e5\u627e\u6700\u5c0f\u5076\u6570\u8282\u70b9\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_even_index = index\n    \n    # \u5982\u679c\u627e\u5230\u6700\u5c0f\u5076\u6570\u8282\u70b9\uff0c\u5219\u8fd4\u56de\u8282\u70b9\u503c\u548c\u7d22\u5f15\uff1b\u5426\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n    if smallest_even_index != -1:\n        return [smallest_even, smallest_even_index]\n    else:\n        return []", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_val = -1\n    for num in freq:\n        if num > 0 and freq[num] >= num and num > max_val:\n            max_val = num\n    \n    return max_val", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = [sorted_lst[0]]\n    del sorted_lst[0]\n\n    while sorted_lst:\n        if sorted_lst:\n            result.append(max(sorted_lst))\n            sorted_lst.remove(max(sorted_lst))\n        if sorted_lst:\n            result.append(min(sorted_lst))\n            sorted_lst.remove(min(sorted_lst))\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # \u68c0\u67e5\u662f\u5426\u80fd\u6784\u6210\u4e09\u89d2\u5f62\n    if a + b > c and a + c > b and b + c > a:\n        # \u4f7f\u7528\u6d77\u4f26\u516c\u5f0f\u8ba1\u7b97\u9762\u79ef\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # \u68c0\u67e5\u5217\u8868\u662f\u5426\u4e3a\u56de\u6587\uff08\u5e73\u8861\uff09\n    if q == q[::-1]:\n        # \u8ba1\u7b97\u5217\u8868\u5143\u7d20\u4e4b\u548c\n        total_weight = sum(q)\n        # \u68c0\u67e5\u603b\u91cd\u91cf\u662f\u5426\u5c0f\u4e8e\u6216\u7b49\u4e8e\u6700\u5927\u5141\u8bb8\u91cd\u91cf\n        if total_weight <= w:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n\n    # \u521b\u5efa\u4e00\u4e2a\u526f\u672c\u6570\u7ec4\uff0c\u5e76\u5c06\u5176\u53cd\u8f6c\n    reversed_arr = arr[::-1]\n\n    # \u904d\u5386\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff08\u6216\u4e2d\u95f4\u90e8\u5206\uff0c\u5982\u679c\u957f\u5ea6\u4e3a\u5947\u6570\uff09\n    for i in range(n // 2):\n        if arr[i] != reversed_arr[i]:\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e0e\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\u4e0d\u76f8\u7b49\n            # \u5219\u5c1d\u8bd5\u5c06\u5176\u4fee\u6539\u4e3a\u76f8\u7b49\uff0c\u5e76\u589e\u52a0\u8ba1\u6570\u5668\n            count += 1\n\n            # \u5982\u679c\u524d\u534a\u90e8\u5206\u8fd8\u6709\u672a\u5339\u914d\u7684\u5143\u7d20\uff0c\u5219\u7ee7\u7eed\u5339\u914d\n            # \u5426\u5219\uff0c\u8df3\u51fa\u5faa\u73af\n            if i + 1 < n - i - 1:\n                # \u5982\u679c\u4e0b\u4e00\u4e2a\u5143\u7d20\u4e5f\u4e0d\u5339\u914d\uff0c\u5219\u5c06\u5176\u4fee\u6539\u4e3a\u76f8\u7b49\n                if arr[i + 1] != reversed_arr[i + 1]:\n                    count += 1\n\n            # \u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u8ba1\u6570\uff0c\u8df3\u8fc7\u4e0b\u4e00\u4e2a\u5143\u7d20\uff08\u5982\u679c\u5b58\u5728\uff09\n            if i + 1 < n // 2:\n                i += 1\n\n    return count\n\n# \u6d4b\u8bd5\u6837\u4f8b\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # \u8f93\u51fa: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))    # \u8f93\u51fa: 1\nprint(smallest_change([1, 2, 3, 2, 1]))          # \u8f93\u51fa: 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def count_chars(lst):\n        return sum(len(s) for s in lst)\n\n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n\n    if count1 < count2:\n        return lst1\n    else:\n        return lst2", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is the multiplication of 3 prime numbers.\"\"\"\n    if a >= 100:\n        return False  # Since the problem states that a is less than 100\n\n    for i in range(2, a + 1):\n        if is_prime(i):\n            for j in range(i, a + 1):\n                if is_prime(j):\n                    for k in range(j, a + 1):\n                        if is_prime(k) and i * j * k == a:\n                            return True\n    return False\n\n# Test the function\nprint(is_multiply_prime(30))  # True, because 30 = 2 * 3 * 5", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x < n:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        if power > x:\n            return False\n        power *= n\n    return False", "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    # \u68c0\u67e5a\u662f\u5426\u4e3a\u67d0\u4e2a\u6574\u6570\u7684\u7acb\u65b9\n    root = int(round(a ** (1.0/3.0)))  # \u8ba1\u7b97a\u7684\u7acb\u65b9\u6839\u5e76\u56db\u820d\u4e94\u5165\u4e3a\u6574\u6570\n    return root * root * root == a  # \u5224\u65ad\u7acb\u65b9\u6839\u7684\u7acb\u65b9\u662f\u5426\u7b49\u4e8ea", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    # \u5b9a\u4e49\u5341\u516d\u8fdb\u5236\u4e2d\u7684\u8d28\u6570\u6570\u5b57\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # \u521d\u59cb\u5316\u8ba1\u6570\u5668\n    count = 0\n    \n    # \u904d\u5386\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for digit in num:\n        # \u5982\u679c\u5b57\u7b26\u662f\u8d28\u6570\u6570\u5b57\uff0c\u5219\u8ba1\u6570\u5668\u52a01\n        if digit in prime_digits:\n            count += 1\n    \n    # \u8fd4\u56de\u8d28\u6570\u6570\u5b57\u7684\u4e2a\u6570\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # \u5c06\u5341\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u5e76\u53bb\u6389\u5f00\u5934\u7684'0b'\n    formatted_binary = \"db\" + binary + \"db\"  # \u5728\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u7684\u524d\u540e\u6dfb\u52a0'db'\n    return formatted_binary", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    length = len(string)\n    if length < 2:  # \u6392\u9664\u5c0f\u4e8e2\u7684\u6570\uff0c\u56e0\u4e3a2\u662f\u6700\u5c0f\u7684\u8d28\u6570\n        return False\n    for i in range(2, int(length ** 0.5) + 1):  # \u68c0\u67e5\u4ece2\u5230\u957f\u5ea6\u7684\u5e73\u65b9\u6839\u4e4b\u95f4\u662f\u5426\u6709\u56e0\u6570\n        if length % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # \u8ba1\u7b97n\u4f4d\u6570\u5b57\u4e2d\u4ee51\u5f00\u5934\u6216\u4ee51\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u603b\u6570\n    # \u5bf9\u4e8en\u4f4d\u6570\u5b57\uff0c\u603b\u5171\u670910**(n-1)\u4e2a\u4ee51\u5f00\u5934\u7684\u6570\u5b57\uff0c\u540c\u6837\u670910**(n-1)\u4e2a\u4ee51\u7ed3\u5c3e\u7684\u6570\u5b57\n    # \u4f46\u662f\uff0c\u5176\u4e2d\u670910**(n-2)\u4e2a\u6570\u5b57\u540c\u65f6\u4ee51\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u88ab\u91cd\u590d\u8ba1\u7b97\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u51cf\u53bb\u8fd9\u90e8\u5206\u6570\u91cf\n    \n    if n == 1:\n        # \u7279\u5224\uff0c\u5982\u679cn\u4e3a1\uff0c\u5219\u53ea\u6709\u6570\u5b571\u6ee1\u8db3\u6761\u4ef6\n        return 1\n    else:\n        # \u8ba1\u7b97\u603b\u6570\n        total_count = 2 * (10 ** (n - 1)) - (10 ** (n - 2))\n        return total_count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the integer to a binary string\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary string\n    sum_of_digits = binary_str.count('1')\n    \n    # Convert the sum to a binary string and return it\n    return bin(sum_of_digits)[2:]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Returns:\n        int: The sum of even elements at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):  # Start from index 1 and increment by 2 to get odd indices\n        if lst[i] % 2 == 0:  # Check if the element at odd index is even\n            total += lst[i]\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()  # \u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u5355\u8bcd\u5217\u8868\n    ordered_words = []  # \u7528\u4e8e\u5b58\u50a8\u6392\u5e8f\u540e\u7684\u5355\u8bcd\n    \n    for word in words:\n        # \u5bf9\u5355\u8bcd\u4e2d\u7684\u5b57\u7b26\u8fdb\u884c\u6392\u5e8f\uff0c\u6ce8\u610f\u8981\u6392\u9664\u6807\u70b9\u7b26\u53f7\n        chars = sorted(c for c in word if c.isalnum())\n        # \u5c06\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u548c\u539f\u5355\u8bcd\u4e2d\u7684\u6807\u70b9\u7b26\u53f7\u6309\u987a\u5e8f\u7ec4\u5408\u6210\u65b0\u7684\u5355\u8bcd\n        new_word = ''.join(chars)\n        for c in word:\n            if c not in new_word:\n                new_word += c\n        ordered_words.append(new_word)\n    \n    # \u5c06\u6392\u5e8f\u540e\u7684\u5355\u8bcd\u6309\u7167\u539f\u987a\u5e8f\u7ec4\u5408\u6210\u5b57\u7b26\u4e32\uff0c\u5e76\u7528\u7a7a\u683c\u8fde\u63a5\n    return ' '.join(ordered_words)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    # \u5148\u6309\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u82e5\u884c\u76f8\u540c\u5219\u6309\u5217\u964d\u5e8f\u6392\u5e8f\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    # Create a copy of the original array to avoid modifying it\n    sorted_array = array.copy()\n\n    # Calculate the sum of the first and last index values\n    sum_indices = sorted_array[0] + sorted_array[-1]\n\n    # Sort the array in ascending or descending order based on the sum\n    if sum_indices % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n\n    return sorted_array", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # \u5904\u7406\u5927\u5199\u5b57\u6bcd\n            if char.isupper():\n                shifted = (ord(char) - 65 + 2 * 2) % 26 + 65\n                result += chr(shifted)\n            # \u5904\u7406\u5c0f\u5199\u5b57\u6bcd\n            else:\n                shifted = (ord(char) - 97 + 2 * 2) % 26 + 97\n                result += chr(shifted)\n        else:\n            # \u975e\u5b57\u6bcd\u5b57\u7b26\u4fdd\u6301\u4e0d\u53d8\n            result += char\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('.')  # \u6309\u53e5\u53f7\u5206\u5272\u53e5\u5b50\n    boredom_count = 0  # \u521d\u59cb\u5316\u65e0\u804a\u53e5\u5b50\u8ba1\u6570\n\n    # \u904d\u5386\u6bcf\u4e2a\u53e5\u5b50\n    for sentence in sentences:\n        sentence = sentence.strip()  # \u53bb\u9664\u53e5\u5b50\u9996\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\n        if sentence.startswith(\"I\"):  # \u5224\u65ad\u53e5\u5b50\u662f\u5426\u4ee5\"I\"\u5f00\u5934\n            boredom_count += 1\n\n    # \u8003\u8651\u53e5\u5b50\u53ef\u80fd\u4ee5'?'\u6216'!'\u7ed3\u5c3e\u7684\u60c5\u51b5\n    additional_sentences = S.split('?') + S.split('!')\n    for sentence in additional_sentences:\n        sentence = sentence.strip()\n        if sentence.startswith(\"I\") and '.' not in sentence:\n            boredom_count += 1\n\n    # \u53bb\u9664\u91cd\u590d\u7684\u8ba1\u6570\uff08\u4f8b\u5982\uff0c\"I love it!\"\u65e2\u88ab'.'\u5206\u5272\u4e5f\u88ab'!'\u5206\u5272\uff09\n    unique_sentences = set(sentences + additional_sentences)\n    unique_boredom_count = 0\n    for sentence in unique_sentences:\n        sentence = sentence.strip()\n        if sentence.startswith(\"I\"):\n            unique_boredom_count += 1\n\n    return unique_boredom_count", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # \u68c0\u67e5\u6240\u6709\u6570\u5b57\u662f\u5426\u90fd\u662f\u6574\u6570\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6570\u5b57\u7b49\u4e8e\u5176\u4ed6\u4e24\u4e2a\u6570\u5b57\u7684\u548c\n    return x == y + z or y == x + z or z == x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    vowels_replacement = 'cdfgh'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                replacement = vowels_replacement[(index + 2) % 5]\n                encoded_message += replacement if char.islower() else replacement.upper()\n            else:\n                encoded_message += char.lower() if char.isupper() else char.upper()\n        else:\n            encoded_message += char\n            \n    return encoded_message", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"\u68c0\u67e5\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u8d28\u6570\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"\u627e\u5230\u5217\u8868\u4e2d\u6700\u5927\u7684\u8d28\u6570\uff0c\u5e76\u8fd4\u56de\u5176\u5404\u4f4d\u6570\u5b57\u4e4b\u548c\"\"\"\n    max_prime = None\n    for num in lst:\n        if is_prime(num) and (max_prime is None or num > max_prime):\n            max_prime = num\n    if max_prime is None:\n        return 0  # \u5982\u679c\u6ca1\u6709\u627e\u5230\u8d28\u6570\uff0c\u8fd4\u56de0\n    digit_sum = sum(int(digit) for digit in str(max_prime))\n    return digit_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not d:  # Check if the dictionary is empty\n        return False\n\n    key_cases = [k.islower() for k in d.keys() if isinstance(k, str)]\n    if len(key_cases) != len(d):  # Check if all keys are strings\n        return False\n\n    if all(key_cases):  # Check if all keys are lowercase\n        return True\n\n    key_cases = [k.isupper() for k in d.keys()]\n    return all(key_cases)  # Check if all keys are uppercase", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # \u83b7\u53d6a\u548cb\u7684\u4e2a\u4f4d\u6570\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # \u8fd4\u56de\u4e24\u4e2a\u4e2a\u4f4d\u6570\u7684\u4e58\u79ef\n    return unit_digit_a * unit_digit_b", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\n    num = float(value)\n    \n    # \u8ba1\u7b97\u6700\u63a5\u8fd1\u7684\u6574\u6570\uff0c\u4f7f\u7528\u5185\u7f6eround()\u51fd\u6570\uff0c\u5e76\u6307\u5b9a\u820d\u5165\u65b9\u5f0f\u4e3a\u8fdc\u79bb\u96f6\n    closest_int = int(round(num + 0.5 if num > 0 else num - 0.5))\n    \n    return closest_int", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]  # \u521d\u59cb\u5316\u5806\uff0c\u5c06\u7b2c\u4e00\u5c42\u7684\u77f3\u5934\u6570\u653e\u5165\u5217\u8868\n    for _ in range(1, n):  # \u4ece\u7b2c\u4e8c\u5c42\u5f00\u59cb\u5faa\u73af\uff0c\u76f4\u5230\u7b2cn\u5c42\n        if pile[-1] % 2 == 0:  # \u5982\u679c\u6700\u540e\u4e00\u5c42\u7684\u77f3\u5934\u6570\u662f\u5076\u6570\n            pile.append(pile[-1] + 2)  # \u4e0b\u4e00\u5c42\u7684\u77f3\u5934\u6570\u4e3a\u5f53\u524d\u5c42\u52a02\uff0c\u5373\u4e0b\u4e00\u4e2a\u5076\u6570\n        else:  # \u5982\u679c\u6700\u540e\u4e00\u5c42\u7684\u77f3\u5934\u6570\u662f\u5947\u6570\n            pile.append(pile[-1] + 2 - 1)  # \u4e0b\u4e00\u5c42\u7684\u77f3\u5934\u6570\u4e3a\u5f53\u524d\u5c42\u52a02\u518d\u51cf1\uff0c\u5373\u4e0b\u4e00\u4e2a\u5947\u6570\n    return pile", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u66ff\u6362\u591a\u4e2a\u8fde\u7eed\u7684\u5206\u9694\u7b26\uff08\u9017\u53f7\u6216\u7a7a\u683c\uff09\u4e3a\u5355\u4e2a\u7a7a\u683c\n    s = re.sub(r'[,\\s]+', ' ', s)\n    # \u4f7f\u7528split()\u65b9\u6cd5\u6309\u7a7a\u683c\u5206\u5272\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u5217\u8868\n    return s.strip().split()", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # \u786e\u4fddx\u662f\u8f83\u5c0f\u7684\u6570\uff0cy\u662f\u8f83\u5927\u7684\u6570\n    if x > y:\n        x, y = y, x\n\n    # \u4ecey\u5f00\u59cb\u5f80\u4e0b\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5076\u6570\u5373\u8fd4\u56de\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # \u5982\u679c\u6ca1\u627e\u5230\u5076\u6570\uff0c\u5219\u8fd4\u56de-1\n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    binary = bin(avg)[2:]  # Convert to binary, remove '0b' prefix\n    return \"0b\" + binary", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # \u5b9a\u4e49\u6570\u5b57\u5230\u540d\u79f0\u7684\u6620\u5c04\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    \n    # \u8fc7\u6ee4\u5e76\u6392\u5e8f\u6570\u7ec4\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    \n    # \u53cd\u8f6c\u6570\u7ec4\u5e76\u8f6c\u6362\u4e3a\u540d\u79f0\n    result = [num_to_name[num] for num in reversed(sorted_arr)]\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_nums = sum(range(1, i + 1))\n            result.append(sum_nums)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # \u68c0\u67e5\u6570\u5b57\u662f\u5426\u4e3a\u56de\u6587\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = 0\n        num_str = str(num)\n        if num_str[0] == '-':  # \u5904\u7406\u8d1f\u6570\u60c5\u51b5\n            digit_sum += int(num_str[1])\n            num_str = num_str[2:]\n        for digit in num_str:\n            digit_sum += int(digit)\n        if digit_sum > 0:\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:  # \u5982\u679c\u6570\u7ec4\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56deTrue\n        return True\n\n    # \u521b\u5efa\u4e00\u4e2a\u526f\u672c\u6570\u7ec4\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\n    sorted_arr = sorted(arr)\n\n    # \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u53f3\u79fb\u6b21\u6570\uff08\u6700\u591aN\u6b21\uff0cN\u4e3a\u6570\u7ec4\u957f\u5ea6\uff09\n    for i in range(len(arr)):\n        # \u53f3\u79fb\u6570\u7ec4\u5143\u7d20\n        arr = arr[-1:] + arr[:-1]\n\n        # \u68c0\u67e5\u53f3\u79fb\u540e\u7684\u6570\u7ec4\u662f\u5426\u5df2\u6392\u5e8f\n        if arr == sorted_arr:\n            return True\n\n    # \u5982\u679c\u6240\u6709\u53ef\u80fd\u7684\u53f3\u79fb\u90fd\u65e0\u6cd5\u5f97\u5230\u5df2\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u5219\u8fd4\u56deFalse\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # \u7edf\u8ba1lst1\u4e2d\u5947\u6570\u7684\u6570\u91cf\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # \u7edf\u8ba1lst2\u4e2d\u5076\u6570\u7684\u6570\u91cf\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # \u5982\u679clst1\u4e2d\u7684\u5947\u6570\u6570\u91cf\u5c0f\u4e8e\u7b49\u4e8elst2\u4e2d\u7684\u5076\u6570\u6570\u91cf\uff0c\u5219\u53ef\u4ee5\u4ea4\u6362\u4f7f\u5f97lst1\u5168\u90e8\u4e3a\u5076\u6570\n    if odd_count <= even_count:\n        return \"YES\"\n    else:\n        return \"NO\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    count_dict = {}\n    max_count = 0\n    \n    for letter in test.split():\n        count_dict[letter] = count_dict.get(letter, 0) + 1\n        max_count = max(max_count, count_dict[letter])\n    \n    result = {}\n    for letter, count in count_dict.items():\n        if count == max_count:\n            result[letter] = count\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # \u5220\u9664\u5b57\u7b26\u4e32s\u4e2d\u4e0ec\u4e2d\u4efb\u610f\u5b57\u7b26\u76f8\u7b49\u7684\u5b57\u7b26\n    result = ''.join(char for char in s if char not in c)\n    \n    # \u68c0\u67e5\u7ed3\u679c\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u56de\u6587\n    is_palindrome = result == result[::-1]\n    \n    # \u8fd4\u56de\u7ed3\u679c\u5b57\u7b26\u4e32\u548c\u56de\u6587\u68c0\u67e5\u7ed3\u679c\u7684\u5143\u7ec4\n    return result, is_palindrome", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(1 for c in s if int(c) % 2 != 0)\n        output_string = (\n            f\"the number of odd elements {odd_digits}n the str{odd_digits}ng \"\n            f\"{i+1} of the {odd_digits}nput.\"\n        )\n        result.append(output_string)\n    return result", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    :param nums: List[int], the input array of integers\n    :return: int, the minimum sum of any non-empty sub-array of nums\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input array cannot be empty\")\n    \n    min_sum = float('inf')  # \u521d\u59cb\u5316\u6700\u5c0f\u548c\u4e3a\u6b63\u65e0\u7a77\u5927\n    current_sum = 0  # \u5f53\u524d\u5b50\u6570\u7ec4\u7684\u548c\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)  # \u9009\u62e9\u5f53\u524d\u5143\u7d20\u6216\u52a0\u4e0a\u5f53\u524d\u5143\u7d20\u540e\u7684\u8f83\u5c0f\u503c\n        min_sum = min(min_sum, current_sum)  # \u66f4\u65b0\u6700\u5c0f\u548c\n    \n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    if rows == 0:\n        return 0\n\n    cols = len(grid[0])\n    total_water = 0\n    bucket_count = 0\n\n    for row in grid:\n        total_water += sum(row)\n\n    if total_water == 0:\n        return 0\n\n    while total_water > 0:\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 1:\n                    grid[i][j] = 0\n                    total_water -= 1\n                    bucket_count += 1\n                    if bucket_count == capacity:\n                        bucket_count = 0\n                        return_here()  # This is a placeholder for the continuation logic\n\n        # If we reach here, it means we have finished a complete iteration without filling a bucket to capacity\n        # We need to \"return\" to the last point where we filled a bucket to capacity\n        return_here()  # This is a placeholder for returning to the last filled bucket position\n\n    return bucket_count // capacity  # Return the number of times we filled a bucket to capacity\n\n# Note: The above code has a placeholder for a continuation logic that is not provided in the function definition.\n# To fully implement the function, you need to add the logic to \"return\" to the last filled bucket position.\n# However, since this is a simplified example, we can assume that each time we fill a bucket, we start from scratch.\n# Therefore, we can modify the code to remove the need for the continuation logic.\n\n# Modified code without the need for continuation logic:\ndef max_fill(grid, capacity):\n    rows = len(grid)\n    if rows == 0:\n        return 0\n\n    cols = len(grid[0])\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n\n    if total_water == 0:\n        return 0\n\n    bucket_count = 0\n    units_filled = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                units_filled += 1\n                if units_filled == capacity:\n                    bucket_count += 1\n                    units_filled = 0\n\n    # If there are remaining units in the last incomplete bucket, we need to count it as well\n    if units_filled > 0:\n        bucket_count += 1\n\n    return bucket_count", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    # \u5b9a\u4e49\u8f85\u97f3\u5b57\u6bcd\u96c6\u5408\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n    if not s:\n        return []\n    \n    # \u5c06\u5b57\u7b26\u4e32\u6309\u7a7a\u683c\u5206\u5272\u6210\u5355\u8bcd\u5217\u8868\n    words = s.split()\n    \n    # \u5b58\u50a8\u7b26\u5408\u6761\u4ef6\u7684\u5355\u8bcd\n    result = []\n    \n    # \u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\n    for word in words:\n        # \u8ba1\u6570\u5668\uff0c\u8bb0\u5f55\u8f85\u97f3\u5b57\u6bcd\u7684\u4e2a\u6570\n        count = 0\n        \n        # \u904d\u5386\u5355\u8bcd\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\n        for char in word:\n            # \u5982\u679c\u5b57\u6bcd\u662f\u8f85\u97f3\u5b57\u6bcd\uff0c\u5219\u8ba1\u6570\u5668\u52a01\n            if char in consonants:\n                count += 1\n        \n        # \u5982\u679c\u8f85\u97f3\u5b57\u6bcd\u7684\u4e2a\u6570\u7b49\u4e8en\uff0c\u5219\u5c06\u5355\u8bcd\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        if count == n:\n            result.append(word)\n    \n    # \u8fd4\u56de\u7ed3\u679c\u5217\u8868\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    consonants_found = False\n\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if consonants_found:\n                closest_vowel = word[i]\n                break\n        else:\n            consonants_found = True\n\n    return closest_vowel", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    s1, s2 = lst\n    # \u5c1d\u8bd5\u56db\u79cd\u53ef\u80fd\u7684\u7ec4\u5408\u65b9\u5f0f\n    combined = [s1 + s2, s2 + s1, '(' + s1 + ')' + s2, '(' + s2 + ')' + s1]\n    for s in combined:\n        if is_balanced(s):\n            return 'Yes'\n    return 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # \u9996\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff08\u5347\u5e8f\uff09\n    sorted_arr = sorted(arr)\n    # \u6839\u636e\u9898\u76ee\u8981\u6c42\uff0c\u6211\u4eec\u9700\u8981\u8fd4\u56de\u6700\u5927\u7684k\u4e2a\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u672b\u5c3e\u5f00\u59cb\u53d6k\u4e2a\u6570\n    max_k_numbers = sorted_arr[-k:]\n    # \u7531\u4e8e\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u662f\u5347\u5e8f\uff0c\u800c\u9898\u76ee\u8981\u6c42\u8fd4\u56de\u7684\u5217\u8868\u4e5f\u9700\u8981\u662f\u5347\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u53d6\u51fa\u7684k\u4e2a\u6570\u518d\u6b21\u8fdb\u884c\u6392\u5e8f\uff08\u5347\u5e8f\uff09\n    sorted_max_k_numbers = sorted(max_k_numbers)\n    return sorted_max_k_numbers", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total_sum = 0\n    count = 0\n    for num in arr:\n        if count == k:\n            break\n        if 10 >= num >= 0:  # Check if the number has at most two digits\n            total_sum += num\n        count += 1\n    return total_sum", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Add 1 to the list since it's always part of the Collatz sequence\n    return sorted(odd_numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # \u89c4\u52191\uff1a\u65e5\u671f\u5b57\u7b26\u4e32\u4e0d\u80fd\u4e3a\u7a7a\n    if not date:\n        return False\n    \n    # \u89c4\u52194\uff1a\u65e5\u671f\u683c\u5f0f\u5e94\u4e3a mm-dd-yyyy\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # \u89c4\u52193\uff1a\u6708\u4efd\u4e0d\u80fd\u5c0f\u4e8e1\u6216\u5927\u4e8e12\n    if not 1 <= int(month) <= 12:\n        return False\n    \n    # \u89c4\u52192\uff1a\u6839\u636e\u6708\u4efd\u9a8c\u8bc1\u5929\u6570\n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        if not 1 <= int(day) <= 31:\n            return False\n    elif month in ['04', '06', '09', '11']:\n        if not 1 <= int(day) <= 30:\n            return False\n    elif month == '02':\n        # \u95f0\u5e742\u670829\u5929\uff0c\u975e\u95f0\u5e742\u670828\u5929\n        if (int(year) % 4 == 0 and int(year) % 100 != 0) or int(year) % 400 == 0:\n            if not 1 <= int(day) <= 29:\n                return False\n        else:\n            if not 1 <= int(day) <= 28:\n                return False\n    else:\n        return False  # \u6708\u4efd\u65e0\u6548\n    \n    return True  # \u6240\u6709\u89c4\u5219\u90fd\u6ee1\u8db3\uff0c\u65e5\u671f\u6709\u6548", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # \u5c1d\u8bd5\u6309\u7a7a\u683c\u5206\u5272\u6587\u672c\n    words = txt.split()\n    if words:\n        return words\n    \n    # \u5982\u679c\u6309\u7a7a\u683c\u5206\u5272\u5931\u8d25\uff0c\u5c1d\u8bd5\u6309\u9017\u53f7\u5206\u5272\u6587\u672c\n    words = txt.split(',')\n    if words:\n        return [word for word in words if word]  # \u79fb\u9664\u7a7a\u5b57\u7b26\u4e32\n    \n    # \u5982\u679c\u6309\u9017\u53f7\u5206\u5272\u4e5f\u5931\u8d25\uff0c\u8ba1\u7b97\u5c0f\u5199\u5b57\u6bcd\u4e2d\u5947\u6570\u987a\u5e8f\u7684\u4e2a\u6570\n    count = 0\n    for char in txt:\n        if char.islower():\n            order = ord(char) - ord('a')\n            if order % 2 == 1:\n                count += 1\n    \n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    prev_num = lst[0]\n    prev_count = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] == prev_num:\n            prev_count += 1\n            if prev_count > 2:\n                return False\n        elif lst[i] < prev_num:\n            return False\n        else:\n            prev_num = lst[i]\n            prev_count = 1\n\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    # \u63d0\u53d6\u533a\u95f4\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u70b9\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # \u786e\u5b9a\u4ea4\u96c6\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u70b9\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # \u68c0\u67e5\u533a\u95f4\u662f\u5426\u76f8\u4ea4\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    # \u8ba1\u7b97\u4ea4\u96c6\u7684\u957f\u5ea6\n    length = intersection_end - intersection_start + 1\n\n    # \u68c0\u67e5\u957f\u5ea6\u662f\u5426\u4e3a\u8d28\u6570\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        sign_product *= sign\n        magnitude_sum += abs(num)\n\n    return sign_product * magnitude_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "from collections import deque\n\ndef minPath(grid, k):\n    n = len(grid)\n    # \u521b\u5efa\u4e00\u4e2a\u961f\u5217\uff0c\u7528\u4e8eBFS\n    queue = deque()\n    # \u521b\u5efa\u4e00\u4e2a\u96c6\u5408\uff0c\u7528\u4e8e\u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\n    visited = set()\n    # \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u7528\u4e8e\u8bb0\u5f55\u4ece\u8d77\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5c0f\u8def\u5f84\n    min_paths = {}\n    \n    # \u521d\u59cb\u5316\uff0c\u5c06\u6bcf\u4e2a\u683c\u5b50\u4f5c\u4e3a\u8d77\u70b9\u52a0\u5165\u961f\u5217\n    for i in range(n):\n        for j in range(n):\n            queue.append(((i, j), [grid[i][j]]))  # \u961f\u5217\u4e2d\u4fdd\u5b58\u7684\u662f(\u5750\u6807, \u8def\u5f84)\u7684\u5143\u7ec4\n            visited.add((i, j))\n            min_paths[(i, j)] = [grid[i][j]]  # \u521d\u59cb\u8def\u5f84\u5c31\u662f\u8d77\u70b9\u672c\u8eab\n    \n    # BFS\u641c\u7d22\n    while queue:\n        (x, y), path = queue.popleft()\n        if len(path) == k:  # \u5982\u679c\u8def\u5f84\u957f\u5ea6\u5df2\u7ecf\u8fbe\u5230k\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u8def\u5f84\n            return path\n        # \u6269\u5c55\u5f53\u524d\u8def\u5f84\u5230\u76f8\u90bb\u7684\u683c\u5b50\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                new_path = path + [grid[nx][ny]]\n                # \u5982\u679c\u65b0\u8def\u5f84\u6bd4\u5df2\u8bb0\u5f55\u7684\u6700\u5c0f\u8def\u5f84\u5b57\u5178\u5e8f\u66f4\u5c0f\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u8def\u5f84\n                if (nx, ny) not in min_paths or new_path < min_paths[(nx, ny)]:\n                    min_paths[(nx, ny)] = new_path\n                queue.append(((nx, ny), new_path))\n                visited.add((nx, ny))\n    \n    # \u5982\u679c\u65e0\u6cd5\u627e\u5230\u957f\u5ea6\u4e3ak\u7684\u8def\u5f84\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\uff08\u7406\u8bba\u4e0a\u4e0d\u4f1a\u53d1\u751f\uff0c\u56e0\u4e3a\u9898\u76ee\u4fdd\u8bc1\u6709\u89e3\uff09\n    return []", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Tribonacci sequence is defined by the recurrence:\n    tri(0) = 0\n    tri(1) = 1\n    tri(2) = 1\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3), if n > 2.\n    \n    You are given a non-negative integer number n, you have to return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    \n    Examples:\n    tri(3) should return [0, 1, 1, 2]\n    tri(4) should return [0, 1, 1, 2, 4]\n    \"\"\"\n    # Initialize the first three values of the Tribonacci sequence\n    tribonacci_seq = [0, 1, 1]\n    \n    # Calculate the remaining values of the Tribonacci sequence\n    for i in range(3, n + 1):\n        tribonacci_seq.append(tribonacci_seq[i-1] + tribonacci_seq[i-2] + tribonacci_seq[i-3])\n    \n    return tribonacci_seq", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    nested_found = False\n\n    for char in string:\n        if char == '[':\n            stack.append('[')\n            if stack[-1] != stack[-2]:  # Check if the '[' is not immediately following another '['\n                nested_found = True\n        elif char == ']' and stack:\n            stack.pop()\n\n    return nested_found and not stack  # Return True if nested found and stack is empty (valid brackets)\n\n# \u6d4b\u8bd5\u6837\u4f8b\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    squared_sum = 0\n    for num in lst:\n        # Round each element to the upper integer (Ceiling)\n        rounded_num = math.ceil(num)\n        # Add the square of the rounded number to the sum\n        squared_sum += rounded_num ** 2\n    return squared_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # \u5982\u679c\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56deFalse\n        return False\n    \n    last_char = txt[-1]  # \u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n    \n    # \u68c0\u67e5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a\u5b57\u6bcd\uff0c\u5e76\u4e14\u4e0d\u662f\u5728\u4e00\u4e2a\u5355\u8bcd\u7684\u4e2d\u95f4\uff08\u5373\u540e\u9762\u6ca1\u6709\u8ddf\u7a7a\u683c\uff09\n    if last_char.isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        # \u8fdb\u4e00\u6b65\u68c0\u67e5\u8be5\u5b57\u7b26\u662f\u5426\u4e3a\u4e00\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\uff08\u5373\u524d\u9762\u662f\u7a7a\u683c\u6216\u8005\u662f\u5b57\u7b26\u4e32\u7684\u5f00\u5934\uff09\n        if (len(txt) == 1 or txt[-2] == ' ') and (txt.rstrip()[-1] == last_char):\n            return True\n    \n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The largest index of an element that is not greater than or equal to\n             the element immediately preceding it. If no such element exists,\n             return -1.\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Helper function to convert string representation of real numbers to float\n    def to_float(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n\n    # Convert both values to float if necessary\n    a_float = to_float(a) if isinstance(a, (str, int)) else a\n    b_float = to_float(b) if isinstance(b, (str, int)) else b\n\n    # Compare the float values\n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None", "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\u8bc4\u4f30\u7ed9\u5b9a\u7684\u6570\u5b57n\u662f\u5426\u53ef\u4ee5\u5199\u6210\u6070\u597d4\u4e2a\u6b63\u5076\u6570\u7684\u548c\n    \n    \u793a\u4f8b\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # \u5982\u679cn\u5c0f\u4e8e8\u6216\u8005n\u662f\u5947\u6570\uff0c\u76f4\u63a5\u8fd4\u56deFalse\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u75314\u4e2a\u6b63\u5076\u6570\u76f8\u52a0\u5f97\u5230\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # \u5c1d\u8bd5\u5c06n\u5206\u89e3\u4e3a4\u4e2a\u6b63\u5076\u6570\u4e4b\u548c\n    for i in range(2, n // 2 - 1, 2):\n        for j in range(2, n // 2 - 1, 2):\n            for k in range(2, n // 2 - 1, 2):\n                l = n - i - j - k\n                if l > 0 and l % 2 == 0:\n                    return True\n    \n    # \u5982\u679c\u65e0\u6cd5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5206\u89e3\uff0c\u8fd4\u56deFalse\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    result = 1\n    factorial = 1\n\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # \u5c06\u6240\u6709\u5355\u4e2a\u7a7a\u683c\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\n    text = text.replace(\" \", \"_\")\n    \n    # \u5904\u7406\u8fde\u7eed\u591a\u4e2a\u7a7a\u683c\u7684\u60c5\u51b5\n    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \"_\":\n            # \u68c0\u67e5\u8fde\u7eed\u4e0b\u5212\u7ebf\u7684\u6570\u91cf\n            count = 1\n            j = i + 1\n            while j < len(text) and text[j] == \"_\":\n                count += 1\n                j += 1\n            \n            # \u6839\u636e\u8fde\u7eed\u4e0b\u5212\u7ebf\u7684\u6570\u91cf\u8fdb\u884c\u66ff\u6362\n            if count > 2:\n                result += \"-\"\n            else:\n                result += \"_\" * count\n            \n            i = j\n        else:\n            result += text[i]\n            i += 1\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check the number of digits\n    digit_count = sum(char.isdigit() for char in file_name)\n    if digit_count > 3:\n        return 'No'\n\n    # Check if there is exactly one dot\n    dot_count = file_name.count('.')\n    if dot_count != 1:\n        return 'No'\n\n    # Split the file name into two parts: before and after the dot\n    before_dot, after_dot = file_name.split('.')\n\n    # Check if the substring before the dot starts with a latin alphabet letter\n    if not before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the valid extensions\n    valid_extensions = ['txt', 'exe', 'dll']\n    if after_dot not in valid_extensions:\n        return 'No'\n\n    # All conditions are met, the file name is valid\n    return 'Yes'", "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for index, num in enumerate(lst):\n        if index % 3 == 0 and index % 4 != 0:\n            total_sum += num ** 2\n        elif index % 4 == 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_words = []\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n\n    return ' '.join(prime_words)", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # \u63d0\u53d6x\u7684\u5206\u5b50\u548c\u5206\u6bcd\n    x_numerator, x_denominator = map(int, x.split('/'))\n    # \u63d0\u53d6n\u7684\u5206\u5b50\u548c\u5206\u6bcd\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    # \u8ba1\u7b97x * n\u7684\u7ed3\u679c\uff0c\u4ee5\u5206\u6570\u5f62\u5f0f\u8868\u793a\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    \n    # \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a\u6574\u6570\n    return result_numerator % result_denominator == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    # \u5b9a\u4e49\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u4e00\u4e2a\u6574\u6570\u7684\u5404\u4f4d\u6570\u5b57\u4e4b\u548c\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # \u4f7f\u7528sorted\u51fd\u6570\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0ckey\u53c2\u6570\u6307\u5b9a\u6392\u5e8f\u4f9d\u636e\u4e3a\u5404\u4f4d\u6570\u5b57\u4e4b\u548c\uff0c\u7136\u540e\u6309\u7167\u5728\u539f\u5217\u8868\u4e2d\u7684\u7d22\u5f15\u6392\u5e8f\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10 ** (len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6574\u6570\u6570\u7ec4a\uff0c\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0  # \u8ba1\u6570\u5668\uff0c\u8bb0\u5f55\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u5143\u7ec4\u6570\u91cf\n    \n    # \u904d\u5386\u6570\u7ec4a\uff0c\u67e5\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u5143\u7ec4\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # \u5b9a\u4e49\u592a\u9633\u7cfb\u884c\u661f\u7684\u987a\u5e8f\u5217\u8868\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # \u68c0\u67e5planet1\u548cplanet2\u662f\u5426\u5728\u884c\u661f\u5217\u8868\u4e2d\n    if planet1 not in planets or planet2 not in planets:\n        return ()  # \u5982\u679c\u4efb\u4e00\u884c\u661f\u540d\u79f0\u4e0d\u6b63\u786e\uff0c\u8fd4\u56de\u7a7a\u5143\u7ec4\n    \n    # \u83b7\u53d6planet1\u548cplanet2\u5728\u884c\u661f\u5217\u8868\u4e2d\u7684\u7d22\u5f15\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # \u6839\u636e\u7d22\u5f15\u786e\u5b9a\u8981\u8fd4\u56de\u7684\u884c\u661f\u7247\u6bb5\uff0c\u786e\u4fdd\u5b83\u662f\u6309\u592a\u9633\u8fd1\u8ddd\u6392\u5e8f\u7684\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])\n\n# \u6d4b\u8bd5\u51fd\u6570\nprint(bf(\"Jupiter\", \"Neptune\"))  # \u8f93\u51fa: (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # \u8f93\u51fa: (\"Venus\",)\nprint(bf(\"Mercury\", \"Uranus\"))   # \u8f93\u51fa: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u8fc7\u6ee4\u51fa\u5947\u6570\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # \u4f7f\u7528sorted\u51fd\u6570\u5bf9\u8fc7\u6ee4\u540e\u7684\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u5148\u6309\u957f\u5ea6\uff0c\u957f\u5ea6\u76f8\u540c\u5219\u6309\u5b57\u6bcd\u987a\u5e8f\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    # \u521d\u59cb\u5316\u5e73\u65b9\u548c\u4e3a0\n    sum_of_squares = 0\n    \n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for num in lst:\n        # \u68c0\u67e5\u5143\u7d20\u662f\u5426\u4e3a\u975e\u8d1f\u6574\u6570\n        if isinstance(num, int) and num >= 0:\n            # \u68c0\u67e5\u5143\u7d20\u662f\u5426\u4e3a\u5947\u6570\n            if num % 2 != 0:\n                # \u5982\u679c\u662f\u5947\u6570\uff0c\u5219\u8ba1\u7b97\u5176\u5e73\u65b9\u5e76\u7d2f\u52a0\u5230\u603b\u548c\u4e2d\n                sum_of_squares += num ** 2\n    \n    # \u8fd4\u56de\u8ba1\u7b97\u5f97\u5230\u7684\u5e73\u65b9\u548c\n    return sum_of_squares", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u6570\u7ec4\u6765\u5b58\u50a8\u7ed3\u679c\n    results = []\n    \n    # \u904d\u5386\u6e38\u620f\u5206\u6570\u548c\u731c\u6d4b\u7684\u6570\u7ec4\n    for i in range(len(game)):\n        # \u8ba1\u7b97\u5f53\u524d\u6e38\u620f\u5206\u6570\u4e0e\u731c\u6d4b\u4e4b\u95f4\u7684\u7edd\u5bf9\u5dee\u503c\n        diff = abs(game[i] - guess[i])\n        # \u5c06\u5dee\u503c\u6dfb\u52a0\u5230\u7ed3\u679c\u6570\u7ec4\u4e2d\n        results.append(diff)\n    \n    # \u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\n    return results", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f'{class_name}.{strongest_extension}'", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # \u68c0\u67e5b\u6216b\u7684\u4efb\u610f\u5faa\u73af\u662f\u5426\u662fa\u7684\u5b50\u4e32\n    n = len(b)\n    for i in range(n):\n        rotated = b[i:] + b[:i]  # \u5faa\u73af\u79fb\u4f4db\n        if rotated in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    # \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u6b63\u6570\uff0c\u5e76\u4fdd\u7559\u5176\u7b26\u53f7\n    is_negative = False\n    if num < 0:\n        is_negative = True\n        num = -num\n\n    even_count = 0\n    odd_count = 0\n\n    # \u904d\u5386\u6574\u6570\u7684\u6bcf\u4e00\u4f4d\u6570\u5b57\n    while num > 0:\n        digit = num % 10  # \u83b7\u53d6\u6700\u540e\u4e00\u4f4d\u6570\u5b57\n        if digit % 2 == 0:\n            even_count += 1  # \u5076\u6570\u4f4d\u6570\u52a0\u4e00\n        else:\n            odd_count += 1  # \u5947\u6570\u4f4d\u6570\u52a0\u4e00\n        num //= 10  # \u53bb\u6389\u6700\u540e\u4e00\u4f4d\u6570\u5b57\n\n    # \u8fd4\u56de\u7ed3\u679c\uff0c\u6ce8\u610f\u8981\u4fdd\u6301\u5143\u7ec4\u7684\u683c\u5f0f\n    return (even_count, odd_count)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Input must be between 1 and 1000 (inclusive).\")\n    \n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = \"\"\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # \u4f7f\u7528\u52fe\u80a1\u5b9a\u7406\u8fdb\u884c\u5224\u65ad\n    # \u5148\u5bf9\u4e09\u8fb9\u8fdb\u884c\u6392\u5e8f\uff0c\u786e\u4fddc\u662f\u659c\u8fb9\uff08\u6700\u957f\u8fb9\uff09\n    a, b, c = sorted((a, b, c))\n    return a ** 2 + b ** 2 == c ** 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        num_unique_chars = len(unique_chars)\n        if num_unique_chars > max_unique_chars or \\\n           (num_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = num_unique_chars\n            max_word = word\n\n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the number of carrots to eat\n    to_eat = min(need, remaining)\n    \n    # Calculate the total number of eaten carrots after meals\n    total_eaten = number + to_eat\n    \n    # Calculate the number of carrots left after meals\n    left = remaining - to_eat\n    \n    # Return the result as an array\n    return [total_eaten, left]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    # \u5c06\u64cd\u4f5c\u7b26\u548c\u64cd\u4f5c\u6570\u5408\u5e76\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u4ea4\u66ff\u653e\u7f6e\n    combined = [operand[0]]\n    for op, num in zip(operator, operand[1:]):\n        combined.append(op)\n        combined.append(num)\n\n    # \u4f7f\u7528\u4e00\u4e2a\u6808\u6765\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\n    stack = []\n    for item in combined:\n        if isinstance(item, int):\n            # \u5982\u679c\u662f\u64cd\u4f5c\u6570\uff0c\u76f4\u63a5\u5165\u6808\n            stack.append(item)\n        else:\n            # \u5982\u679c\u662f\u64cd\u4f5c\u7b26\uff0c\u4ece\u6808\u4e2d\u5f39\u51fa\u4e24\u4e2a\u64cd\u4f5c\u6570\u8fdb\u884c\u8ba1\u7b97\n            right = stack.pop()\n            left = stack.pop()\n            if item == '+':\n                result = left + right\n            elif item == '-':\n                result = left - right\n            elif item == '*':\n                result = left * right\n            elif item == '//':\n                result = left // right\n            elif item == '**':\n                result = left ** right\n            # \u5c06\u8ba1\u7b97\u7ed3\u679c\u5165\u6808\n            stack.append(result)\n\n    # \u6808\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u5143\u7d20\u5c31\u662f\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\n    return stack[0]", "result": "failed: pop from empty list", "passed": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    has_letter = False\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    if not has_letter:\n        return result[::-1]\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # \u786e\u4fdda\u662f\u8f83\u5c0f\u7684\u6570\uff0cb\u662f\u8f83\u5927\u7684\u6570\n    a, b = min(a, b), max(a, b)\n    result = []\n    # \u904d\u5386a\u5230b\u4e4b\u95f4\u7684\u6240\u6709\u6574\u6570\n    for num in range(a, b + 1):\n        # \u5982\u679c\u5f53\u524d\u6570\u662f\u5076\u6570\uff0c\u5219\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        if num % 2 == 0:\n            result.append(num)\n    return result", "result": "failed: Test 1", "passed": false}
